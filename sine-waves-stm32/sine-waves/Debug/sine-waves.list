
sine-waves.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08006180  08006180  00007180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063d8  080063d8  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080063d8  080063d8  000073d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063e0  080063e0  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063e0  080063e0  000073e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063e4  080063e4  000073e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080063e8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000805c  2**0
                  CONTENTS
 10 .bss          00000470  2000005c  2000005c  0000805c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004cc  200004cc  0000805c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f116  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002328  00000000  00000000  000171a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  000194d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000acd  00000000  00000000  0001a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c92  00000000  00000000  0001ad85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001076b  00000000  00000000  0003ca17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd69b  00000000  00000000  0004d182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011a81d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044cc  00000000  00000000  0011a860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0011ed2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006168 	.word	0x08006168

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006168 	.word	0x08006168

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b988 	b.w	8000ed4 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	468e      	mov	lr, r1
 8000be4:	4604      	mov	r4, r0
 8000be6:	4688      	mov	r8, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14a      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4617      	mov	r7, r2
 8000bf0:	d962      	bls.n	8000cb8 <__udivmoddi4+0xdc>
 8000bf2:	fab2 f682 	clz	r6, r2
 8000bf6:	b14e      	cbz	r6, 8000c0c <__udivmoddi4+0x30>
 8000bf8:	f1c6 0320 	rsb	r3, r6, #32
 8000bfc:	fa01 f806 	lsl.w	r8, r1, r6
 8000c00:	fa20 f303 	lsr.w	r3, r0, r3
 8000c04:	40b7      	lsls	r7, r6
 8000c06:	ea43 0808 	orr.w	r8, r3, r8
 8000c0a:	40b4      	lsls	r4, r6
 8000c0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c10:	fa1f fc87 	uxth.w	ip, r7
 8000c14:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c18:	0c23      	lsrs	r3, r4, #16
 8000c1a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c22:	fb01 f20c 	mul.w	r2, r1, ip
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0x62>
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c30:	f080 80ea 	bcs.w	8000e08 <__udivmoddi4+0x22c>
 8000c34:	429a      	cmp	r2, r3
 8000c36:	f240 80e7 	bls.w	8000e08 <__udivmoddi4+0x22c>
 8000c3a:	3902      	subs	r1, #2
 8000c3c:	443b      	add	r3, r7
 8000c3e:	1a9a      	subs	r2, r3, r2
 8000c40:	b2a3      	uxth	r3, r4
 8000c42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c52:	459c      	cmp	ip, r3
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x8e>
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5c:	f080 80d6 	bcs.w	8000e0c <__udivmoddi4+0x230>
 8000c60:	459c      	cmp	ip, r3
 8000c62:	f240 80d3 	bls.w	8000e0c <__udivmoddi4+0x230>
 8000c66:	443b      	add	r3, r7
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6e:	eba3 030c 	sub.w	r3, r3, ip
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa2>
 8000c76:	40f3      	lsrs	r3, r6
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xb6>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb0>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x14c>
 8000c9a:	4573      	cmp	r3, lr
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xc8>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 8105 	bhi.w	8000eae <__udivmoddi4+0x2d2>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	4690      	mov	r8, r2
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e5      	beq.n	8000c7e <__udivmoddi4+0xa2>
 8000cb2:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb6:	e7e2      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f000 8090 	beq.w	8000dde <__udivmoddi4+0x202>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f040 80a4 	bne.w	8000e10 <__udivmoddi4+0x234>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	0c03      	lsrs	r3, r0, #16
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	b2bc      	uxth	r4, r7
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cda:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ce2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d907      	bls.n	8000cfa <__udivmoddi4+0x11e>
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x11c>
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	f200 80e0 	bhi.w	8000eb8 <__udivmoddi4+0x2dc>
 8000cf8:	46c4      	mov	ip, r8
 8000cfa:	1a9b      	subs	r3, r3, r2
 8000cfc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d00:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d04:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d08:	fb02 f404 	mul.w	r4, r2, r4
 8000d0c:	429c      	cmp	r4, r3
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x144>
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x142>
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	f200 80ca 	bhi.w	8000eb2 <__udivmoddi4+0x2d6>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x98>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa0e f401 	lsl.w	r4, lr, r1
 8000d38:	fa20 f306 	lsr.w	r3, r0, r6
 8000d3c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d40:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d44:	4323      	orrs	r3, r4
 8000d46:	fa00 f801 	lsl.w	r8, r0, r1
 8000d4a:	fa1f fc87 	uxth.w	ip, r7
 8000d4e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d52:	0c1c      	lsrs	r4, r3, #16
 8000d54:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d58:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d5c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d909      	bls.n	8000d7c <__udivmoddi4+0x1a0>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6e:	f080 809c 	bcs.w	8000eaa <__udivmoddi4+0x2ce>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f240 8099 	bls.w	8000eaa <__udivmoddi4+0x2ce>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	443c      	add	r4, r7
 8000d7c:	eba4 040e 	sub.w	r4, r4, lr
 8000d80:	fa1f fe83 	uxth.w	lr, r3
 8000d84:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d88:	fb09 4413 	mls	r4, r9, r3, r4
 8000d8c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d90:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d94:	45a4      	cmp	ip, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1ce>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9e:	f080 8082 	bcs.w	8000ea6 <__udivmoddi4+0x2ca>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d97f      	bls.n	8000ea6 <__udivmoddi4+0x2ca>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db6:	4564      	cmp	r4, ip
 8000db8:	4673      	mov	r3, lr
 8000dba:	46e1      	mov	r9, ip
 8000dbc:	d362      	bcc.n	8000e84 <__udivmoddi4+0x2a8>
 8000dbe:	d05f      	beq.n	8000e80 <__udivmoddi4+0x2a4>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x1fe>
 8000dc2:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc6:	eb64 0409 	sbc.w	r4, r4, r9
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	fa22 f301 	lsr.w	r3, r2, r1
 8000dd2:	431e      	orrs	r6, r3
 8000dd4:	40cc      	lsrs	r4, r1
 8000dd6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dda:	2100      	movs	r1, #0
 8000ddc:	e74f      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000dde:	fbb1 fcf2 	udiv	ip, r1, r2
 8000de2:	0c01      	lsrs	r1, r0, #16
 8000de4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de8:	b280      	uxth	r0, r0
 8000dea:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dee:	463b      	mov	r3, r7
 8000df0:	4638      	mov	r0, r7
 8000df2:	463c      	mov	r4, r7
 8000df4:	46b8      	mov	r8, r7
 8000df6:	46be      	mov	lr, r7
 8000df8:	2620      	movs	r6, #32
 8000dfa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfe:	eba2 0208 	sub.w	r2, r2, r8
 8000e02:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e06:	e766      	b.n	8000cd6 <__udivmoddi4+0xfa>
 8000e08:	4601      	mov	r1, r0
 8000e0a:	e718      	b.n	8000c3e <__udivmoddi4+0x62>
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	e72c      	b.n	8000c6a <__udivmoddi4+0x8e>
 8000e10:	f1c6 0220 	rsb	r2, r6, #32
 8000e14:	fa2e f302 	lsr.w	r3, lr, r2
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	40b1      	lsls	r1, r6
 8000e1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	430a      	orrs	r2, r1
 8000e26:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e30:	0c11      	lsrs	r1, r2, #16
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb08 f904 	mul.w	r9, r8, r4
 8000e3a:	40b0      	lsls	r0, r6
 8000e3c:	4589      	cmp	r9, r1
 8000e3e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e42:	b280      	uxth	r0, r0
 8000e44:	d93e      	bls.n	8000ec4 <__udivmoddi4+0x2e8>
 8000e46:	1879      	adds	r1, r7, r1
 8000e48:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e4c:	d201      	bcs.n	8000e52 <__udivmoddi4+0x276>
 8000e4e:	4589      	cmp	r9, r1
 8000e50:	d81f      	bhi.n	8000e92 <__udivmoddi4+0x2b6>
 8000e52:	eba1 0109 	sub.w	r1, r1, r9
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fb09 f804 	mul.w	r8, r9, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	b292      	uxth	r2, r2
 8000e64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e68:	4542      	cmp	r2, r8
 8000e6a:	d229      	bcs.n	8000ec0 <__udivmoddi4+0x2e4>
 8000e6c:	18ba      	adds	r2, r7, r2
 8000e6e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e72:	d2c4      	bcs.n	8000dfe <__udivmoddi4+0x222>
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d2c2      	bcs.n	8000dfe <__udivmoddi4+0x222>
 8000e78:	f1a9 0102 	sub.w	r1, r9, #2
 8000e7c:	443a      	add	r2, r7
 8000e7e:	e7be      	b.n	8000dfe <__udivmoddi4+0x222>
 8000e80:	45f0      	cmp	r8, lr
 8000e82:	d29d      	bcs.n	8000dc0 <__udivmoddi4+0x1e4>
 8000e84:	ebbe 0302 	subs.w	r3, lr, r2
 8000e88:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	46e1      	mov	r9, ip
 8000e90:	e796      	b.n	8000dc0 <__udivmoddi4+0x1e4>
 8000e92:	eba7 0909 	sub.w	r9, r7, r9
 8000e96:	4449      	add	r1, r9
 8000e98:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e9c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea0:	fb09 f804 	mul.w	r8, r9, r4
 8000ea4:	e7db      	b.n	8000e5e <__udivmoddi4+0x282>
 8000ea6:	4673      	mov	r3, lr
 8000ea8:	e77f      	b.n	8000daa <__udivmoddi4+0x1ce>
 8000eaa:	4650      	mov	r0, sl
 8000eac:	e766      	b.n	8000d7c <__udivmoddi4+0x1a0>
 8000eae:	4608      	mov	r0, r1
 8000eb0:	e6fd      	b.n	8000cae <__udivmoddi4+0xd2>
 8000eb2:	443b      	add	r3, r7
 8000eb4:	3a02      	subs	r2, #2
 8000eb6:	e733      	b.n	8000d20 <__udivmoddi4+0x144>
 8000eb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ebc:	443b      	add	r3, r7
 8000ebe:	e71c      	b.n	8000cfa <__udivmoddi4+0x11e>
 8000ec0:	4649      	mov	r1, r9
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x222>
 8000ec4:	eba1 0109 	sub.w	r1, r1, r9
 8000ec8:	46c4      	mov	ip, r8
 8000eca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ece:	fb09 f804 	mul.w	r8, r9, r4
 8000ed2:	e7c4      	b.n	8000e5e <__udivmoddi4+0x282>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <Error_Handler>:
#include "error_handler.h"
#include "main.h"

void Error_Handler(void) {
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop

  __disable_irq();
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <Error_Handler+0x8>

08000ee4 <main>:
void set_output_frequency(float freq_hz);
/* USER CODE END PFP */

/* Main program */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b09c      	sub	sp, #112	@ 0x70
 8000ee8:	af00      	add	r7, sp, #0
	peripheral_init();
 8000eea:	f000 f8e7 	bl	80010bc <peripheral_init>

	generate_sine_wave();
 8000eee:	f000 f877 	bl	8000fe0 <generate_sine_wave>
	start_sine_wave();
 8000ef2:	f000 f8cb 	bl	800108c <start_sine_wave>

  /* Logarithmic Sweep Parameters */
	float f_min = 10.0f;      // Min frekvencija [Hz]
 8000ef6:	4b35      	ldr	r3, [pc, #212]	@ (8000fcc <main+0xe8>)
 8000ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
	float f_max = 10000.0f;   // Max frekvencija [Hz]
 8000efa:	4b35      	ldr	r3, [pc, #212]	@ (8000fd0 <main+0xec>)
 8000efc:	667b      	str	r3, [r7, #100]	@ 0x64
	float duration = 10.0f;   // Sweep trajanje [s]
 8000efe:	4b33      	ldr	r3, [pc, #204]	@ (8000fcc <main+0xe8>)
 8000f00:	663b      	str	r3, [r7, #96]	@ 0x60
	uint32_t steps = 1000;    // Broj koraka
 8000f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f06:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float t_step = duration / steps;
 8000f08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f0a:	ee07 3a90 	vmov	s15, r3
 8000f0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f12:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8000f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f1a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58


	for (uint32_t i = 0; i <= steps; i++) {
 8000f1e:	2300      	movs	r3, #0
 8000f20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000f22:	e04c      	b.n	8000fbe <main+0xda>
		float ratio = (float)i / steps;
 8000f24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f26:	ee07 3a90 	vmov	s15, r3
 8000f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f30:	ee07 3a90 	vmov	s15, r3
 8000f34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f3c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		float freq = f_min * powf((f_max / f_min), ratio);  // log-sweep frekvencija
 8000f40:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8000f44:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8000f48:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f4c:	edd7 0a15 	vldr	s1, [r7, #84]	@ 0x54
 8000f50:	eeb0 0a66 	vmov.f32	s0, s13
 8000f54:	f003 fd6c 	bl	8004a30 <powf>
 8000f58:	eeb0 7a40 	vmov.f32	s14, s0
 8000f5c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8000f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f64:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

		char buffer[64];  // <- greška, duplirana deklaracija (već postoji izvan petlje)

		uint32_t int_part = (uint32_t)freq;
 8000f68:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f70:	ee17 3a90 	vmov	r3, s15
 8000f74:	64fb      	str	r3, [r7, #76]	@ 0x4c
		uint32_t decimal_part = (uint32_t)((freq - int_part) * 100); // Two decimal digits
 8000f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f78:	ee07 3a90 	vmov	s15, r3
 8000f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f80:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f88:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000fd4 <main+0xf0>
 8000f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f94:	ee17 3a90 	vmov	r3, s15
 8000f98:	64bb      	str	r3, [r7, #72]	@ 0x48
		int len= sprintf(buffer, "FREQ:%lu.%lu\n",int_part,decimal_part);
 8000f9a:	1d38      	adds	r0, r7, #4
 8000f9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000fa0:	490d      	ldr	r1, [pc, #52]	@ (8000fd8 <main+0xf4>)
 8000fa2:	f003 f84f 	bl	8004044 <siprintf>
 8000fa6:	6478      	str	r0, [r7, #68]	@ 0x44
		HAL_UART_Transmit(&huart4, (uint8_t*)buffer, len, HAL_MAX_DELAY);// <- ispis na standardni izlaz (ako postoji, npr. semihosting, debug konzola)
 8000fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	1d39      	adds	r1, r7, #4
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	480a      	ldr	r0, [pc, #40]	@ (8000fdc <main+0xf8>)
 8000fb4:	f002 fc8a 	bl	80038cc <HAL_UART_Transmit>
	for (uint32_t i = 0; i <= steps; i++) {
 8000fb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fba:	3301      	adds	r3, #1
 8000fbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000fbe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000fc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d9ae      	bls.n	8000f24 <main+0x40>
	}

	while (1) {}
 8000fc6:	bf00      	nop
 8000fc8:	e7fd      	b.n	8000fc6 <main+0xe2>
 8000fca:	bf00      	nop
 8000fcc:	41200000 	.word	0x41200000
 8000fd0:	461c4000 	.word	0x461c4000
 8000fd4:	42c80000 	.word	0x42c80000
 8000fd8:	08006180 	.word	0x08006180
 8000fdc:	20000334 	.word	0x20000334

08000fe0 <generate_sine_wave>:
}


/* USER CODE BEGIN 4 */
void generate_sine_wave(void) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  for (int i = 0; i < SINE_WAVE_SIZE; i++) {
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	e039      	b.n	8001060 <generate_sine_wave+0x80>
	  sine_wave[i] = (uint16_t)((sin(2 * M_PI * i / SINE_WAVE_SIZE) + 1) * 2047);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff fa91 	bl	8000514 <__aeabi_i2d>
 8000ff2:	a324      	add	r3, pc, #144	@ (adr r3, 8001084 <generate_sine_wave+0xa4>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff faf6 	bl	80005e8 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	4b1b      	ldr	r3, [pc, #108]	@ (8001078 <generate_sine_wave+0x98>)
 800100a:	f7ff fc17 	bl	800083c <__aeabi_ddiv>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	ec43 2b17 	vmov	d7, r2, r3
 8001016:	eeb0 0a47 	vmov.f32	s0, s14
 800101a:	eef0 0a67 	vmov.f32	s1, s15
 800101e:	f003 fcb3 	bl	8004988 <sin>
 8001022:	ec51 0b10 	vmov	r0, r1, d0
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	4b14      	ldr	r3, [pc, #80]	@ (800107c <generate_sine_wave+0x9c>)
 800102c:	f7ff f926 	bl	800027c <__adddf3>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	a30d      	add	r3, pc, #52	@ (adr r3, 8001070 <generate_sine_wave+0x90>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	f7ff fad3 	bl	80005e8 <__aeabi_dmul>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff fd8f 	bl	8000b6c <__aeabi_d2uiz>
 800104e:	4603      	mov	r3, r0
 8001050:	b299      	uxth	r1, r3
 8001052:	4a0b      	ldr	r2, [pc, #44]	@ (8001080 <generate_sine_wave+0xa0>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < SINE_WAVE_SIZE; i++) {
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3301      	adds	r3, #1
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2bff      	cmp	r3, #255	@ 0xff
 8001064:	ddc2      	ble.n	8000fec <generate_sine_wave+0xc>
  }
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	00000000 	.word	0x00000000
 8001074:	409ffc00 	.word	0x409ffc00
 8001078:	40700000 	.word	0x40700000
 800107c:	3ff00000 	.word	0x3ff00000
 8001080:	20000078 	.word	0x20000078
 8001084:	54442d18 	.word	0x54442d18
 8001088:	401921fb 	.word	0x401921fb

0800108c <start_sine_wave>:

void start_sine_wave(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af02      	add	r7, sp, #8
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)sine_wave, SINE_WAVE_SIZE, DAC_ALIGN_12B_R);
 8001092:	2300      	movs	r3, #0
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800109a:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <start_sine_wave+0x24>)
 800109c:	2100      	movs	r1, #0
 800109e:	4805      	ldr	r0, [pc, #20]	@ (80010b4 <start_sine_wave+0x28>)
 80010a0:	f000 fd0a 	bl	8001ab8 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim6);
 80010a4:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <start_sine_wave+0x2c>)
 80010a6:	f002 f901 	bl	80032ac <HAL_TIM_Base_Start>
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000078 	.word	0x20000078
 80010b4:	20000278 	.word	0x20000278
 80010b8:	200002ec 	.word	0x200002ec

080010bc <peripheral_init>:
static void MX_DMA_Init(void);
static void MX_GPIO_Init(void);
static void MX_UART4_Init(void);


void peripheral_init() {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	HAL_Init();
 80010c0:	f000 fb54 	bl	800176c <HAL_Init>
	SystemClock_Config();
 80010c4:	f000 f80c 	bl	80010e0 <SystemClock_Config>
	MX_GPIO_Init();
 80010c8:	f000 f8f4 	bl	80012b4 <MX_GPIO_Init>
	MX_DMA_Init();
 80010cc:	f000 f8d2 	bl	8001274 <MX_DMA_Init>
	MX_DAC_Init();
 80010d0:	f000 f870 	bl	80011b4 <MX_DAC_Init>
	MX_TIM6_Init();
 80010d4:	f000 f898 	bl	8001208 <MX_TIM6_Init>
	MX_UART4_Init();
 80010d8:	f000 f94c 	bl	8001374 <MX_UART4_Init>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <SystemClock_Config>:


void SystemClock_Config(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b094      	sub	sp, #80	@ 0x50
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0320 	add.w	r3, r7, #32
 80010ea:	2230      	movs	r2, #48	@ 0x30
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 ffca 	bl	8004088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	4b28      	ldr	r3, [pc, #160]	@ (80011ac <SystemClock_Config+0xcc>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110c:	4a27      	ldr	r2, [pc, #156]	@ (80011ac <SystemClock_Config+0xcc>)
 800110e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001112:	6413      	str	r3, [r2, #64]	@ 0x40
 8001114:	4b25      	ldr	r3, [pc, #148]	@ (80011ac <SystemClock_Config+0xcc>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	4b22      	ldr	r3, [pc, #136]	@ (80011b0 <SystemClock_Config+0xd0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a21      	ldr	r2, [pc, #132]	@ (80011b0 <SystemClock_Config+0xd0>)
 800112a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <SystemClock_Config+0xd0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800113c:	2302      	movs	r3, #2
 800113e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001140:	2301      	movs	r3, #1
 8001142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001144:	2310      	movs	r3, #16
 8001146:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001148:	2302      	movs	r3, #2
 800114a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800114c:	2300      	movs	r3, #0
 800114e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001150:	2308      	movs	r3, #8
 8001152:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001154:	23a8      	movs	r3, #168	@ 0xa8
 8001156:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001158:	2302      	movs	r3, #2
 800115a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800115c:	2304      	movs	r3, #4
 800115e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 8001160:	f107 0320 	add.w	r3, r7, #32
 8001164:	4618      	mov	r0, r3
 8001166:	f001 fbf9 	bl	800295c <HAL_RCC_OscConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0x94>
 8001170:	f7ff feb2 	bl	8000ed8 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001174:	230f      	movs	r3, #15
 8001176:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001178:	2302      	movs	r3, #2
 800117a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001180:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001184:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001186:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800118a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) Error_Handler();
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	2105      	movs	r1, #5
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fe5a 	bl	8002e4c <HAL_RCC_ClockConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0xc2>
 800119e:	f7ff fe9b 	bl	8000ed8 <Error_Handler>
}
 80011a2:	bf00      	nop
 80011a4:	3750      	adds	r7, #80	@ 0x50
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40007000 	.word	0x40007000

080011b4 <MX_DAC_Init>:

static void MX_DAC_Init(void) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80011ba:	463b      	mov	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]

  hdac.Instance = DAC;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <MX_DAC_Init+0x4c>)
 80011c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001204 <MX_DAC_Init+0x50>)
 80011c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK) Error_Handler();
 80011c8:	480d      	ldr	r0, [pc, #52]	@ (8001200 <MX_DAC_Init+0x4c>)
 80011ca:	f000 fc52 	bl	8001a72 <HAL_DAC_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_DAC_Init+0x24>
 80011d4:	f7ff fe80 	bl	8000ed8 <Error_Handler>

  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80011d8:	2304      	movs	r3, #4
 80011da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) Error_Handler();
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	@ (8001200 <MX_DAC_Init+0x4c>)
 80011e8:	f000 fda4 	bl	8001d34 <HAL_DAC_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_DAC_Init+0x42>
 80011f2:	f7ff fe71 	bl	8000ed8 <Error_Handler>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000278 	.word	0x20000278
 8001204:	40007400 	.word	0x40007400

08001208 <MX_TIM6_Init>:

static void MX_TIM6_Init(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120e:	463b      	mov	r3, r7
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <MX_TIM6_Init+0x64>)
 8001218:	4a15      	ldr	r2, [pc, #84]	@ (8001270 <MX_TIM6_Init+0x68>)
 800121a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800121c:	4b13      	ldr	r3, [pc, #76]	@ (800126c <MX_TIM6_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b12      	ldr	r3, [pc, #72]	@ (800126c <MX_TIM6_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;  // Za početnu frekvenciju (biće ažuriran)
 8001228:	4b10      	ldr	r3, [pc, #64]	@ (800126c <MX_TIM6_Init+0x64>)
 800122a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800122e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <MX_TIM6_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&htim6) != HAL_OK) Error_Handler();
 8001236:	480d      	ldr	r0, [pc, #52]	@ (800126c <MX_TIM6_Init+0x64>)
 8001238:	f001 ffe8 	bl	800320c <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM6_Init+0x3e>
 8001242:	f7ff fe49 	bl	8000ed8 <Error_Handler>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001246:	2320      	movs	r3, #32
 8001248:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) Error_Handler();
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	@ (800126c <MX_TIM6_Init+0x64>)
 8001254:	f002 fa5a 	bl	800370c <HAL_TIMEx_MasterConfigSynchronization>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM6_Init+0x5a>
 800125e:	f7ff fe3b 	bl	8000ed8 <Error_Handler>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200002ec 	.word	0x200002ec
 8001270:	40001000 	.word	0x40001000

08001274 <MX_DMA_Init>:

static void MX_DMA_Init(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <MX_DMA_Init+0x3c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a0b      	ldr	r2, [pc, #44]	@ (80012b0 <MX_DMA_Init+0x3c>)
 8001284:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <MX_DMA_Init+0x3c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	2010      	movs	r0, #16
 800129c:	f000 fbb3 	bl	8001a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012a0:	2010      	movs	r0, #16
 80012a2:	f000 fbcc 	bl	8001a3e <HAL_NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b27      	ldr	r3, [pc, #156]	@ (800136c <MX_GPIO_Init+0xb8>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a26      	ldr	r2, [pc, #152]	@ (800136c <MX_GPIO_Init+0xb8>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b24      	ldr	r3, [pc, #144]	@ (800136c <MX_GPIO_Init+0xb8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b20      	ldr	r3, [pc, #128]	@ (800136c <MX_GPIO_Init+0xb8>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a1f      	ldr	r2, [pc, #124]	@ (800136c <MX_GPIO_Init+0xb8>)
 80012f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <MX_GPIO_Init+0xb8>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b19      	ldr	r3, [pc, #100]	@ (800136c <MX_GPIO_Init+0xb8>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a18      	ldr	r2, [pc, #96]	@ (800136c <MX_GPIO_Init+0xb8>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b16      	ldr	r3, [pc, #88]	@ (800136c <MX_GPIO_Init+0xb8>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <MX_GPIO_Init+0xb8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a11      	ldr	r2, [pc, #68]	@ (800136c <MX_GPIO_Init+0xb8>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <MX_GPIO_Init+0xb8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001340:	480b      	ldr	r0, [pc, #44]	@ (8001370 <MX_GPIO_Init+0xbc>)
 8001342:	f001 faf1 	bl	8002928 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 8001346:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	4804      	ldr	r0, [pc, #16]	@ (8001370 <MX_GPIO_Init+0xbc>)
 8001360:	f001 f946 	bl	80025f0 <HAL_GPIO_Init>
}
 8001364:	bf00      	nop
 8001366:	3728      	adds	r7, #40	@ 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800
 8001370:	40020800 	.word	0x40020800

08001374 <MX_UART4_Init>:

static void MX_UART4_Init(void) {
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_UART4_Init+0x4c>)
 800137a:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <MX_UART4_Init+0x50>)
 800137c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <MX_UART4_Init+0x4c>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <MX_UART4_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <MX_UART4_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <MX_UART4_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MX_UART4_Init+0x4c>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <MX_UART4_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <MX_UART4_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <MX_UART4_Init+0x4c>)
 80013ac:	f002 fa3e 	bl	800382c <HAL_UART_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80013b6:	f7ff fd8f 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000334 	.word	0x20000334
 80013c4:	40004c00 	.word	0x40004c00

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <HAL_MspInit+0x4c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001414 <HAL_MspInit+0x4c>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013de:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <HAL_MspInit+0x4c>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	4a08      	ldr	r2, [pc, #32]	@ (8001414 <HAL_MspInit+0x4c>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800

08001418 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	@ 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a33      	ldr	r2, [pc, #204]	@ (8001504 <HAL_DAC_MspInit+0xec>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d160      	bne.n	80014fc <HAL_DAC_MspInit+0xe4>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b32      	ldr	r3, [pc, #200]	@ (8001508 <HAL_DAC_MspInit+0xf0>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	4a31      	ldr	r2, [pc, #196]	@ (8001508 <HAL_DAC_MspInit+0xf0>)
 8001444:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001448:	6413      	str	r3, [r2, #64]	@ 0x40
 800144a:	4b2f      	ldr	r3, [pc, #188]	@ (8001508 <HAL_DAC_MspInit+0xf0>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b2b      	ldr	r3, [pc, #172]	@ (8001508 <HAL_DAC_MspInit+0xf0>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a2a      	ldr	r2, [pc, #168]	@ (8001508 <HAL_DAC_MspInit+0xf0>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b28      	ldr	r3, [pc, #160]	@ (8001508 <HAL_DAC_MspInit+0xf0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001472:	2310      	movs	r3, #16
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001476:	2303      	movs	r3, #3
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4821      	ldr	r0, [pc, #132]	@ (800150c <HAL_DAC_MspInit+0xf4>)
 8001486:	f001 f8b3 	bl	80025f0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800148a:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <HAL_DAC_MspInit+0xf8>)
 800148c:	4a21      	ldr	r2, [pc, #132]	@ (8001514 <HAL_DAC_MspInit+0xfc>)
 800148e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001490:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <HAL_DAC_MspInit+0xf8>)
 8001492:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001496:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001498:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <HAL_DAC_MspInit+0xf8>)
 800149a:	2240      	movs	r2, #64	@ 0x40
 800149c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800149e:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <HAL_DAC_MspInit+0xf8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <HAL_DAC_MspInit+0xf8>)
 80014a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014aa:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014ac:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <HAL_DAC_MspInit+0xf8>)
 80014ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014b2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014b4:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <HAL_DAC_MspInit+0xf8>)
 80014b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ba:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80014bc:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <HAL_DAC_MspInit+0xf8>)
 80014be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014c2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_DAC_MspInit+0xf8>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <HAL_DAC_MspInit+0xf8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80014d0:	480f      	ldr	r0, [pc, #60]	@ (8001510 <HAL_DAC_MspInit+0xf8>)
 80014d2:	f000 fd1d 	bl	8001f10 <HAL_DMA_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80014dc:	f7ff fcfc 	bl	8000ed8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001510 <HAL_DAC_MspInit+0xf8>)
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <HAL_DAC_MspInit+0xf8>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	2036      	movs	r0, #54	@ 0x36
 80014f2:	f000 fa88 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014f6:	2036      	movs	r0, #54	@ 0x36
 80014f8:	f000 faa1 	bl	8001a3e <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80014fc:	bf00      	nop
 80014fe:	3728      	adds	r7, #40	@ 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40007400 	.word	0x40007400
 8001508:	40023800 	.word	0x40023800
 800150c:	40020000 	.word	0x40020000
 8001510:	2000028c 	.word	0x2000028c
 8001514:	40026088 	.word	0x40026088

08001518 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0e      	ldr	r2, [pc, #56]	@ (8001560 <HAL_TIM_Base_MspInit+0x48>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d115      	bne.n	8001556 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <HAL_TIM_Base_MspInit+0x4c>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	4a0c      	ldr	r2, [pc, #48]	@ (8001564 <HAL_TIM_Base_MspInit+0x4c>)
 8001534:	f043 0310 	orr.w	r3, r3, #16
 8001538:	6413      	str	r3, [r2, #64]	@ 0x40
 800153a:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <HAL_TIM_Base_MspInit+0x4c>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	2036      	movs	r0, #54	@ 0x36
 800154c:	f000 fa5b 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001550:	2036      	movs	r0, #54	@ 0x36
 8001552:	f000 fa74 	bl	8001a3e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40001000 	.word	0x40001000
 8001564:	40023800 	.word	0x40023800

08001568 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	@ 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a19      	ldr	r2, [pc, #100]	@ (80015ec <HAL_UART_MspInit+0x84>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d12b      	bne.n	80015e2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <HAL_UART_MspInit+0x88>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	4a17      	ldr	r2, [pc, #92]	@ (80015f0 <HAL_UART_MspInit+0x88>)
 8001594:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001598:	6413      	str	r3, [r2, #64]	@ 0x40
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <HAL_UART_MspInit+0x88>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <HAL_UART_MspInit+0x88>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a10      	ldr	r2, [pc, #64]	@ (80015f0 <HAL_UART_MspInit+0x88>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <HAL_UART_MspInit+0x88>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015c2:	2303      	movs	r3, #3
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015d2:	2308      	movs	r3, #8
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <HAL_UART_MspInit+0x8c>)
 80015de:	f001 f807 	bl	80025f0 <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	@ 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40004c00 	.word	0x40004c00
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <NMI_Handler+0x4>

08001600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <MemManage_Handler+0x4>

08001610 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <UsageFault_Handler+0x4>

08001620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164e:	f000 f8df 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800165c:	4802      	ldr	r0, [pc, #8]	@ (8001668 <DMA1_Stream5_IRQHandler+0x10>)
 800165e:	f000 fd5d 	bl	800211c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000028c 	.word	0x2000028c

0800166c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001670:	4803      	ldr	r0, [pc, #12]	@ (8001680 <TIM6_DAC_IRQHandler+0x14>)
 8001672:	f000 fae1 	bl	8001c38 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001676:	4803      	ldr	r0, [pc, #12]	@ (8001684 <TIM6_DAC_IRQHandler+0x18>)
 8001678:	f001 fe80 	bl	800337c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000278 	.word	0x20000278
 8001684:	200002ec 	.word	0x200002ec

08001688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001690:	4a14      	ldr	r2, [pc, #80]	@ (80016e4 <_sbrk+0x5c>)
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <_sbrk+0x60>)
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800169c:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <_sbrk+0x64>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	@ (80016f0 <_sbrk+0x68>)
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d207      	bcs.n	80016c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b8:	f002 fcee 	bl	8004098 <__errno>
 80016bc:	4603      	mov	r3, r0
 80016be:	220c      	movs	r2, #12
 80016c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	e009      	b.n	80016dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c8:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ce:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <_sbrk+0x64>)
 80016d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20020000 	.word	0x20020000
 80016e8:	00000400 	.word	0x00000400
 80016ec:	2000037c 	.word	0x2000037c
 80016f0:	200004d0 	.word	0x200004d0

080016f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <SystemInit+0x20>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fe:	4a05      	ldr	r2, [pc, #20]	@ (8001714 <SystemInit+0x20>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001718:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001750 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800171c:	f7ff ffea 	bl	80016f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001720:	480c      	ldr	r0, [pc, #48]	@ (8001754 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001722:	490d      	ldr	r1, [pc, #52]	@ (8001758 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001724:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001738:	4c0a      	ldr	r4, [pc, #40]	@ (8001764 <LoopFillZerobss+0x22>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001746:	f002 fcad 	bl	80040a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174a:	f7ff fbcb 	bl	8000ee4 <main>
  bx  lr    
 800174e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001750:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800175c:	080063e8 	.word	0x080063e8
  ldr r2, =_sbss
 8001760:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001764:	200004cc 	.word	0x200004cc

08001768 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC_IRQHandler>
	...

0800176c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001770:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <HAL_Init+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0d      	ldr	r2, [pc, #52]	@ (80017ac <HAL_Init+0x40>)
 8001776:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800177a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800177c:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <HAL_Init+0x40>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0a      	ldr	r2, [pc, #40]	@ (80017ac <HAL_Init+0x40>)
 8001782:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001786:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <HAL_Init+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a07      	ldr	r2, [pc, #28]	@ (80017ac <HAL_Init+0x40>)
 800178e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001792:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001794:	2003      	movs	r0, #3
 8001796:	f000 f92b 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179a:	200f      	movs	r0, #15
 800179c:	f000 f808 	bl	80017b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a0:	f7ff fe12 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023c00 	.word	0x40023c00

080017b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <HAL_InitTick+0x54>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <HAL_InitTick+0x58>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f943 	bl	8001a5a <HAL_SYSTICK_Config>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e00e      	b.n	80017fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b0f      	cmp	r3, #15
 80017e2:	d80a      	bhi.n	80017fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e4:	2200      	movs	r2, #0
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f000 f90b 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f0:	4a06      	ldr	r2, [pc, #24]	@ (800180c <HAL_InitTick+0x5c>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e000      	b.n	80017fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000000 	.word	0x20000000
 8001808:	20000008 	.word	0x20000008
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_IncTick+0x20>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_IncTick+0x24>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4413      	add	r3, r2
 8001820:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <HAL_IncTick+0x24>)
 8001822:	6013      	str	r3, [r2, #0]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000008 	.word	0x20000008
 8001834:	20000380 	.word	0x20000380

08001838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <HAL_GetTick+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000380 	.word	0x20000380

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001878:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800187c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	@ (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4907      	ldr	r1, [pc, #28]	@ (80018ec <__NVIC_EnableIRQ+0x38>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	@ (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	@ (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	@ 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	@ 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff8e 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	@ (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff29 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a18:	f7ff ff3e 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f7ff ff8e 	bl	8001944 <NVIC_EncodePriority>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff5d 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff31 	bl	80018b4 <__NVIC_EnableIRQ>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffa2 	bl	80019ac <SysTick_Config>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e014      	b.n	8001aae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	791b      	ldrb	r3, [r3, #4]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff fcbf 	bl	8001418 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
#endif /* DAC_CHANNEL2_SUPPORT */
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0a2      	b.n	8001c16 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	795b      	ldrb	r3, [r3, #5]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_DAC_Start_DMA+0x24>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e09c      	b.n	8001c16 <HAL_DAC_Start_DMA+0x15e>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d129      	bne.n	8001b42 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	4a4b      	ldr	r2, [pc, #300]	@ (8001c20 <HAL_DAC_Start_DMA+0x168>)
 8001af4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	4a4a      	ldr	r2, [pc, #296]	@ (8001c24 <HAL_DAC_Start_DMA+0x16c>)
 8001afc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	4a49      	ldr	r2, [pc, #292]	@ (8001c28 <HAL_DAC_Start_DMA+0x170>)
 8001b04:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001b14:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_DAC_Start_DMA+0x6c>
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d005      	beq.n	8001b2e <HAL_DAC_Start_DMA+0x76>
 8001b22:	e009      	b.n	8001b38 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	3308      	adds	r3, #8
 8001b2a:	613b      	str	r3, [r7, #16]
        break;
 8001b2c:	e033      	b.n	8001b96 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	330c      	adds	r3, #12
 8001b34:	613b      	str	r3, [r7, #16]
        break;
 8001b36:	e02e      	b.n	8001b96 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	3310      	adds	r3, #16
 8001b3e:	613b      	str	r3, [r7, #16]
        break;
 8001b40:	e029      	b.n	8001b96 <HAL_DAC_Start_DMA+0xde>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	4a39      	ldr	r2, [pc, #228]	@ (8001c2c <HAL_DAC_Start_DMA+0x174>)
 8001b48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	4a38      	ldr	r2, [pc, #224]	@ (8001c30 <HAL_DAC_Start_DMA+0x178>)
 8001b50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	4a37      	ldr	r2, [pc, #220]	@ (8001c34 <HAL_DAC_Start_DMA+0x17c>)
 8001b58:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001b68:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_DAC_Start_DMA+0xc0>
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d005      	beq.n	8001b82 <HAL_DAC_Start_DMA+0xca>
 8001b76:	e009      	b.n	8001b8c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	3314      	adds	r3, #20
 8001b7e:	613b      	str	r3, [r7, #16]
        break;
 8001b80:	e009      	b.n	8001b96 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	3318      	adds	r3, #24
 8001b88:	613b      	str	r3, [r7, #16]
        break;
 8001b8a:	e004      	b.n	8001b96 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	331c      	adds	r3, #28
 8001b92:	613b      	str	r3, [r7, #16]
        break;
 8001b94:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d111      	bne.n	8001bc0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001baa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6898      	ldr	r0, [r3, #8]
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	f000 fa59 	bl	800206c <HAL_DMA_Start_IT>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	75fb      	strb	r3, [r7, #23]
 8001bbe:	e010      	b.n	8001be2 <HAL_DAC_Start_DMA+0x12a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001bce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	68d8      	ldr	r0, [r3, #12]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	f000 fa47 	bl	800206c <HAL_DMA_Start_IT>
 8001bde:	4603      	mov	r3, r0
 8001be0:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10c      	bne.n	8001c08 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6819      	ldr	r1, [r3, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	e005      	b.n	8001c14 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	f043 0204 	orr.w	r2, r3, #4
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	08001de7 	.word	0x08001de7
 8001c24:	08001e09 	.word	0x08001e09
 8001c28:	08001e25 	.word	0x08001e25
 8001c2c:	08001ea3 	.word	0x08001ea3
 8001c30:	08001ec5 	.word	0x08001ec5
 8001c34:	08001ee1 	.word	0x08001ee1

08001c38 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c4e:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d01d      	beq.n	8001c96 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d018      	beq.n	8001c96 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2204      	movs	r2, #4
 8001c68:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f043 0201 	orr.w	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c8e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f845 	bl	8001d20 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01d      	beq.n	8001cdc <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d018      	beq.n	8001cdc <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2204      	movs	r2, #4
 8001cae:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	f043 0202 	orr.w	r2, r3, #2
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001cc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001cd4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f8d9 	bl	8001e8e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	@ 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_DAC_ConfigChannel+0x1c>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e042      	b.n	8001dda <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	795b      	ldrb	r3, [r3, #5]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_DAC_ConfigChannel+0x2c>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e03c      	b.n	8001dda <HAL_DAC_ConfigChannel+0xa6>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2201      	movs	r2, #1
 8001d64:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	22c0      	movs	r2, #192	@ 0xc0
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	400a      	ands	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001dd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3724      	adds	r7, #36	@ 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7ff ff75 	bl	8001ce4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	711a      	strb	r2, [r3, #4]
}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e14:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f7ff ff6e 	bl	8001cf8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f043 0204 	orr.w	r2, r3, #4
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f7ff ff64 	bl	8001d0c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2201      	movs	r2, #1
 8001e48:	711a      	strb	r2, [r3, #4]
}
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eae:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f7ff ffce 	bl	8001e52 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	711a      	strb	r2, [r3, #4]
}
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f7ff ffc7 	bl	8001e66 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f043 0204 	orr.w	r2, r3, #4
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f7ff ffbd 	bl	8001e7a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	711a      	strb	r2, [r3, #4]
}
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff fc8c 	bl	8001838 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e099      	b.n	8002060 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f4c:	e00f      	b.n	8001f6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f4e:	f7ff fc73 	bl	8001838 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d908      	bls.n	8001f6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2203      	movs	r2, #3
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e078      	b.n	8002060 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1e8      	bne.n	8001f4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	4b38      	ldr	r3, [pc, #224]	@ (8002068 <HAL_DMA_Init+0x158>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d107      	bne.n	8001fd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f023 0307 	bic.w	r3, r3, #7
 8001fee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d117      	bne.n	8002032 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00e      	beq.n	8002032 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fa6f 	bl	80024f8 <DMA_CheckFifoParam>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2240      	movs	r2, #64	@ 0x40
 8002024:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800202e:	2301      	movs	r3, #1
 8002030:	e016      	b.n	8002060 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fa26 	bl	800248c <DMA_CalcBaseAndBitshift>
 8002040:	4603      	mov	r3, r0
 8002042:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002048:	223f      	movs	r2, #63	@ 0x3f
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	f010803f 	.word	0xf010803f

0800206c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002082:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_DMA_Start_IT+0x26>
 800208e:	2302      	movs	r3, #2
 8002090:	e040      	b.n	8002114 <HAL_DMA_Start_IT+0xa8>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d12f      	bne.n	8002106 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2202      	movs	r2, #2
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f9b8 	bl	8002430 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c4:	223f      	movs	r2, #63	@ 0x3f
 80020c6:	409a      	lsls	r2, r3
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0216 	orr.w	r2, r2, #22
 80020da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0208 	orr.w	r2, r2, #8
 80020f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	e005      	b.n	8002112 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800210e:	2302      	movs	r3, #2
 8002110:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002112:	7dfb      	ldrb	r3, [r7, #23]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002128:	4b8e      	ldr	r3, [pc, #568]	@ (8002364 <HAL_DMA_IRQHandler+0x248>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a8e      	ldr	r2, [pc, #568]	@ (8002368 <HAL_DMA_IRQHandler+0x24c>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	0a9b      	lsrs	r3, r3, #10
 8002134:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002146:	2208      	movs	r2, #8
 8002148:	409a      	lsls	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d01a      	beq.n	8002188 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d013      	beq.n	8002188 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0204 	bic.w	r2, r2, #4
 800216e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002174:	2208      	movs	r2, #8
 8002176:	409a      	lsls	r2, r3
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002180:	f043 0201 	orr.w	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218c:	2201      	movs	r2, #1
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d012      	beq.n	80021be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021aa:	2201      	movs	r2, #1
 80021ac:	409a      	lsls	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b6:	f043 0202 	orr.w	r2, r3, #2
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c2:	2204      	movs	r2, #4
 80021c4:	409a      	lsls	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d012      	beq.n	80021f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00b      	beq.n	80021f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e0:	2204      	movs	r2, #4
 80021e2:	409a      	lsls	r2, r3
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ec:	f043 0204 	orr.w	r2, r3, #4
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f8:	2210      	movs	r2, #16
 80021fa:	409a      	lsls	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d043      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d03c      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002216:	2210      	movs	r2, #16
 8002218:	409a      	lsls	r2, r3
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d018      	beq.n	800225e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d108      	bne.n	800224c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d024      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
 800224a:	e01f      	b.n	800228c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01b      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
 800225c:	e016      	b.n	800228c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d107      	bne.n	800227c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0208 	bic.w	r2, r2, #8
 800227a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002290:	2220      	movs	r2, #32
 8002292:	409a      	lsls	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 808f 	beq.w	80023bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 8087 	beq.w	80023bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b2:	2220      	movs	r2, #32
 80022b4:	409a      	lsls	r2, r3
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b05      	cmp	r3, #5
 80022c4:	d136      	bne.n	8002334 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0216 	bic.w	r2, r2, #22
 80022d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d103      	bne.n	80022f6 <HAL_DMA_IRQHandler+0x1da>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0208 	bic.w	r2, r2, #8
 8002304:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230a:	223f      	movs	r2, #63	@ 0x3f
 800230c:	409a      	lsls	r2, r3
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002326:	2b00      	cmp	r3, #0
 8002328:	d07e      	beq.n	8002428 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	4798      	blx	r3
        }
        return;
 8002332:	e079      	b.n	8002428 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d01d      	beq.n	800237e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10d      	bne.n	800236c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002354:	2b00      	cmp	r3, #0
 8002356:	d031      	beq.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	4798      	blx	r3
 8002360:	e02c      	b.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
 8002362:	bf00      	nop
 8002364:	20000000 	.word	0x20000000
 8002368:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d023      	beq.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
 800237c:	e01e      	b.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10f      	bne.n	80023ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0210 	bic.w	r2, r2, #16
 800239a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d032      	beq.n	800242a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d022      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2205      	movs	r2, #5
 80023d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	3301      	adds	r3, #1
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d307      	bcc.n	8002404 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f2      	bne.n	80023e8 <HAL_DMA_IRQHandler+0x2cc>
 8002402:	e000      	b.n	8002406 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002404:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	4798      	blx	r3
 8002426:	e000      	b.n	800242a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002428:	bf00      	nop
    }
  }
}
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800244c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b40      	cmp	r3, #64	@ 0x40
 800245c:	d108      	bne.n	8002470 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800246e:	e007      	b.n	8002480 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	60da      	str	r2, [r3, #12]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	3b10      	subs	r3, #16
 800249c:	4a14      	ldr	r2, [pc, #80]	@ (80024f0 <DMA_CalcBaseAndBitshift+0x64>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024a6:	4a13      	ldr	r2, [pc, #76]	@ (80024f4 <DMA_CalcBaseAndBitshift+0x68>)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4413      	add	r3, r2
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d909      	bls.n	80024ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024c2:	f023 0303 	bic.w	r3, r3, #3
 80024c6:	1d1a      	adds	r2, r3, #4
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80024cc:	e007      	b.n	80024de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024d6:	f023 0303 	bic.w	r3, r3, #3
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	aaaaaaab 	.word	0xaaaaaaab
 80024f4:	080061a8 	.word	0x080061a8

080024f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002508:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d11f      	bne.n	8002552 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d856      	bhi.n	80025c6 <DMA_CheckFifoParam+0xce>
 8002518:	a201      	add	r2, pc, #4	@ (adr r2, 8002520 <DMA_CheckFifoParam+0x28>)
 800251a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251e:	bf00      	nop
 8002520:	08002531 	.word	0x08002531
 8002524:	08002543 	.word	0x08002543
 8002528:	08002531 	.word	0x08002531
 800252c:	080025c7 	.word	0x080025c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002534:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d046      	beq.n	80025ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002540:	e043      	b.n	80025ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002546:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800254a:	d140      	bne.n	80025ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002550:	e03d      	b.n	80025ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800255a:	d121      	bne.n	80025a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d837      	bhi.n	80025d2 <DMA_CheckFifoParam+0xda>
 8002562:	a201      	add	r2, pc, #4	@ (adr r2, 8002568 <DMA_CheckFifoParam+0x70>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	08002579 	.word	0x08002579
 800256c:	0800257f 	.word	0x0800257f
 8002570:	08002579 	.word	0x08002579
 8002574:	08002591 	.word	0x08002591
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
      break;
 800257c:	e030      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002582:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d025      	beq.n	80025d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800258e:	e022      	b.n	80025d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002594:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002598:	d11f      	bne.n	80025da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800259e:	e01c      	b.n	80025da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d903      	bls.n	80025ae <DMA_CheckFifoParam+0xb6>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d003      	beq.n	80025b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025ac:	e018      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
      break;
 80025b2:	e015      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00e      	beq.n	80025de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      break;
 80025c4:	e00b      	b.n	80025de <DMA_CheckFifoParam+0xe6>
      break;
 80025c6:	bf00      	nop
 80025c8:	e00a      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ca:	bf00      	nop
 80025cc:	e008      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ce:	bf00      	nop
 80025d0:	e006      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;
 80025d2:	bf00      	nop
 80025d4:	e004      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;
 80025d6:	bf00      	nop
 80025d8:	e002      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80025da:	bf00      	nop
 80025dc:	e000      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;
 80025de:	bf00      	nop
    }
  } 
  
  return status; 
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop

080025f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	@ 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002602:	2300      	movs	r3, #0
 8002604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	e16b      	b.n	80028e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800260c:	2201      	movs	r2, #1
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	429a      	cmp	r2, r3
 8002626:	f040 815a 	bne.w	80028de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b01      	cmp	r3, #1
 8002634:	d005      	beq.n	8002642 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263e:	2b02      	cmp	r3, #2
 8002640:	d130      	bne.n	80026a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	2203      	movs	r2, #3
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002678:	2201      	movs	r2, #1
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 0201 	and.w	r2, r3, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d017      	beq.n	80026e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	2203      	movs	r2, #3
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d123      	bne.n	8002734 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	08da      	lsrs	r2, r3, #3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3208      	adds	r2, #8
 80026f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	220f      	movs	r2, #15
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	08da      	lsrs	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3208      	adds	r2, #8
 800272e:	69b9      	ldr	r1, [r7, #24]
 8002730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	2203      	movs	r2, #3
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 0203 	and.w	r2, r3, #3
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80b4 	beq.w	80028de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b60      	ldr	r3, [pc, #384]	@ (80028fc <HAL_GPIO_Init+0x30c>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277e:	4a5f      	ldr	r2, [pc, #380]	@ (80028fc <HAL_GPIO_Init+0x30c>)
 8002780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002784:	6453      	str	r3, [r2, #68]	@ 0x44
 8002786:	4b5d      	ldr	r3, [pc, #372]	@ (80028fc <HAL_GPIO_Init+0x30c>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002792:	4a5b      	ldr	r2, [pc, #364]	@ (8002900 <HAL_GPIO_Init+0x310>)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	089b      	lsrs	r3, r3, #2
 8002798:	3302      	adds	r3, #2
 800279a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	220f      	movs	r2, #15
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a52      	ldr	r2, [pc, #328]	@ (8002904 <HAL_GPIO_Init+0x314>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d02b      	beq.n	8002816 <HAL_GPIO_Init+0x226>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a51      	ldr	r2, [pc, #324]	@ (8002908 <HAL_GPIO_Init+0x318>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d025      	beq.n	8002812 <HAL_GPIO_Init+0x222>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a50      	ldr	r2, [pc, #320]	@ (800290c <HAL_GPIO_Init+0x31c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01f      	beq.n	800280e <HAL_GPIO_Init+0x21e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002910 <HAL_GPIO_Init+0x320>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d019      	beq.n	800280a <HAL_GPIO_Init+0x21a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002914 <HAL_GPIO_Init+0x324>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_GPIO_Init+0x216>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002918 <HAL_GPIO_Init+0x328>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00d      	beq.n	8002802 <HAL_GPIO_Init+0x212>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4c      	ldr	r2, [pc, #304]	@ (800291c <HAL_GPIO_Init+0x32c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <HAL_GPIO_Init+0x20e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002920 <HAL_GPIO_Init+0x330>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_GPIO_Init+0x20a>
 80027f6:	2307      	movs	r3, #7
 80027f8:	e00e      	b.n	8002818 <HAL_GPIO_Init+0x228>
 80027fa:	2308      	movs	r3, #8
 80027fc:	e00c      	b.n	8002818 <HAL_GPIO_Init+0x228>
 80027fe:	2306      	movs	r3, #6
 8002800:	e00a      	b.n	8002818 <HAL_GPIO_Init+0x228>
 8002802:	2305      	movs	r3, #5
 8002804:	e008      	b.n	8002818 <HAL_GPIO_Init+0x228>
 8002806:	2304      	movs	r3, #4
 8002808:	e006      	b.n	8002818 <HAL_GPIO_Init+0x228>
 800280a:	2303      	movs	r3, #3
 800280c:	e004      	b.n	8002818 <HAL_GPIO_Init+0x228>
 800280e:	2302      	movs	r3, #2
 8002810:	e002      	b.n	8002818 <HAL_GPIO_Init+0x228>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <HAL_GPIO_Init+0x228>
 8002816:	2300      	movs	r3, #0
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	f002 0203 	and.w	r2, r2, #3
 800281e:	0092      	lsls	r2, r2, #2
 8002820:	4093      	lsls	r3, r2
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002828:	4935      	ldr	r1, [pc, #212]	@ (8002900 <HAL_GPIO_Init+0x310>)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3302      	adds	r3, #2
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002836:	4b3b      	ldr	r3, [pc, #236]	@ (8002924 <HAL_GPIO_Init+0x334>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800285a:	4a32      	ldr	r2, [pc, #200]	@ (8002924 <HAL_GPIO_Init+0x334>)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002860:	4b30      	ldr	r3, [pc, #192]	@ (8002924 <HAL_GPIO_Init+0x334>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002884:	4a27      	ldr	r2, [pc, #156]	@ (8002924 <HAL_GPIO_Init+0x334>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800288a:	4b26      	ldr	r3, [pc, #152]	@ (8002924 <HAL_GPIO_Init+0x334>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002924 <HAL_GPIO_Init+0x334>)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002924 <HAL_GPIO_Init+0x334>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028d8:	4a12      	ldr	r2, [pc, #72]	@ (8002924 <HAL_GPIO_Init+0x334>)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3301      	adds	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b0f      	cmp	r3, #15
 80028e8:	f67f ae90 	bls.w	800260c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3724      	adds	r7, #36	@ 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800
 8002900:	40013800 	.word	0x40013800
 8002904:	40020000 	.word	0x40020000
 8002908:	40020400 	.word	0x40020400
 800290c:	40020800 	.word	0x40020800
 8002910:	40020c00 	.word	0x40020c00
 8002914:	40021000 	.word	0x40021000
 8002918:	40021400 	.word	0x40021400
 800291c:	40021800 	.word	0x40021800
 8002920:	40021c00 	.word	0x40021c00
 8002924:	40013c00 	.word	0x40013c00

08002928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
 8002934:	4613      	mov	r3, r2
 8002936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002938:	787b      	ldrb	r3, [r7, #1]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002944:	e003      	b.n	800294e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002946:	887b      	ldrh	r3, [r7, #2]
 8002948:	041a      	lsls	r2, r3, #16
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	619a      	str	r2, [r3, #24]
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e267      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d075      	beq.n	8002a66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800297a:	4b88      	ldr	r3, [pc, #544]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b04      	cmp	r3, #4
 8002984:	d00c      	beq.n	80029a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002986:	4b85      	ldr	r3, [pc, #532]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800298e:	2b08      	cmp	r3, #8
 8002990:	d112      	bne.n	80029b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002992:	4b82      	ldr	r3, [pc, #520]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800299a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800299e:	d10b      	bne.n	80029b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	4b7e      	ldr	r3, [pc, #504]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d05b      	beq.n	8002a64 <HAL_RCC_OscConfig+0x108>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d157      	bne.n	8002a64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e242      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c0:	d106      	bne.n	80029d0 <HAL_RCC_OscConfig+0x74>
 80029c2:	4b76      	ldr	r3, [pc, #472]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a75      	ldr	r2, [pc, #468]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e01d      	b.n	8002a0c <HAL_RCC_OscConfig+0xb0>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x98>
 80029da:	4b70      	ldr	r3, [pc, #448]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a6f      	ldr	r2, [pc, #444]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b6d      	ldr	r3, [pc, #436]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a6c      	ldr	r2, [pc, #432]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e00b      	b.n	8002a0c <HAL_RCC_OscConfig+0xb0>
 80029f4:	4b69      	ldr	r3, [pc, #420]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a68      	ldr	r2, [pc, #416]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b66      	ldr	r3, [pc, #408]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a65      	ldr	r2, [pc, #404]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe ff10 	bl	8001838 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe ff0c 	bl	8001838 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	@ 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e207      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0xc0>
 8002a3a:	e014      	b.n	8002a66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fefc 	bl	8001838 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fe fef8 	bl	8001838 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	@ 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e1f3      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a56:	4b51      	ldr	r3, [pc, #324]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0xe8>
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d063      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a72:	4b4a      	ldr	r3, [pc, #296]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00b      	beq.n	8002a96 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7e:	4b47      	ldr	r3, [pc, #284]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d11c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8a:	4b44      	ldr	r3, [pc, #272]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d116      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a96:	4b41      	ldr	r3, [pc, #260]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <HAL_RCC_OscConfig+0x152>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e1c7      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aae:	4b3b      	ldr	r3, [pc, #236]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4937      	ldr	r1, [pc, #220]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac2:	e03a      	b.n	8002b3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d020      	beq.n	8002b0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002acc:	4b34      	ldr	r3, [pc, #208]	@ (8002ba0 <HAL_RCC_OscConfig+0x244>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad2:	f7fe feb1 	bl	8001838 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ada:	f7fe fead 	bl	8001838 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e1a8      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aec:	4b2b      	ldr	r3, [pc, #172]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af8:	4b28      	ldr	r3, [pc, #160]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4925      	ldr	r1, [pc, #148]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]
 8002b0c:	e015      	b.n	8002b3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0e:	4b24      	ldr	r3, [pc, #144]	@ (8002ba0 <HAL_RCC_OscConfig+0x244>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe fe90 	bl	8001838 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1c:	f7fe fe8c 	bl	8001838 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e187      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d036      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d016      	beq.n	8002b7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ba4 <HAL_RCC_OscConfig+0x248>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b54:	f7fe fe70 	bl	8001838 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b5c:	f7fe fe6c 	bl	8001838 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e167      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0x200>
 8002b7a:	e01b      	b.n	8002bb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ba4 <HAL_RCC_OscConfig+0x248>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b82:	f7fe fe59 	bl	8001838 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b88:	e00e      	b.n	8002ba8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8a:	f7fe fe55 	bl	8001838 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d907      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e150      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	42470000 	.word	0x42470000
 8002ba4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba8:	4b88      	ldr	r3, [pc, #544]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002baa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1ea      	bne.n	8002b8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8097 	beq.w	8002cf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc6:	4b81      	ldr	r3, [pc, #516]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10f      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	4b7d      	ldr	r3, [pc, #500]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	4a7c      	ldr	r2, [pc, #496]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002be2:	4b7a      	ldr	r3, [pc, #488]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf2:	4b77      	ldr	r3, [pc, #476]	@ (8002dd0 <HAL_RCC_OscConfig+0x474>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d118      	bne.n	8002c30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bfe:	4b74      	ldr	r3, [pc, #464]	@ (8002dd0 <HAL_RCC_OscConfig+0x474>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a73      	ldr	r2, [pc, #460]	@ (8002dd0 <HAL_RCC_OscConfig+0x474>)
 8002c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0a:	f7fe fe15 	bl	8001838 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c12:	f7fe fe11 	bl	8001838 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e10c      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c24:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd0 <HAL_RCC_OscConfig+0x474>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d106      	bne.n	8002c46 <HAL_RCC_OscConfig+0x2ea>
 8002c38:	4b64      	ldr	r3, [pc, #400]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3c:	4a63      	ldr	r2, [pc, #396]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c44:	e01c      	b.n	8002c80 <HAL_RCC_OscConfig+0x324>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x30c>
 8002c4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c52:	4a5e      	ldr	r2, [pc, #376]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c5a:	4b5c      	ldr	r3, [pc, #368]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5e:	4a5b      	ldr	r2, [pc, #364]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0x324>
 8002c68:	4b58      	ldr	r3, [pc, #352]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6c:	4a57      	ldr	r2, [pc, #348]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c6e:	f023 0301 	bic.w	r3, r3, #1
 8002c72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c74:	4b55      	ldr	r3, [pc, #340]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c78:	4a54      	ldr	r2, [pc, #336]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c7a:	f023 0304 	bic.w	r3, r3, #4
 8002c7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d015      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c88:	f7fe fdd6 	bl	8001838 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c90:	f7fe fdd2 	bl	8001838 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e0cb      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca6:	4b49      	ldr	r3, [pc, #292]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0ee      	beq.n	8002c90 <HAL_RCC_OscConfig+0x334>
 8002cb2:	e014      	b.n	8002cde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb4:	f7fe fdc0 	bl	8001838 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbc:	f7fe fdbc 	bl	8001838 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e0b5      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1ee      	bne.n	8002cbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d105      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce4:	4b39      	ldr	r3, [pc, #228]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce8:	4a38      	ldr	r2, [pc, #224]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002cea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80a1 	beq.w	8002e3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cfa:	4b34      	ldr	r3, [pc, #208]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d05c      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d141      	bne.n	8002d92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0e:	4b31      	ldr	r3, [pc, #196]	@ (8002dd4 <HAL_RCC_OscConfig+0x478>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fe fd90 	bl	8001838 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe fd8c 	bl	8001838 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e087      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2e:	4b27      	ldr	r3, [pc, #156]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69da      	ldr	r2, [r3, #28]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d48:	019b      	lsls	r3, r3, #6
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d50:	085b      	lsrs	r3, r3, #1
 8002d52:	3b01      	subs	r3, #1
 8002d54:	041b      	lsls	r3, r3, #16
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5c:	061b      	lsls	r3, r3, #24
 8002d5e:	491b      	ldr	r1, [pc, #108]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d64:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd4 <HAL_RCC_OscConfig+0x478>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7fe fd65 	bl	8001838 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d72:	f7fe fd61 	bl	8001838 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e05c      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d84:	4b11      	ldr	r3, [pc, #68]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x416>
 8002d90:	e054      	b.n	8002e3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d92:	4b10      	ldr	r3, [pc, #64]	@ (8002dd4 <HAL_RCC_OscConfig+0x478>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7fe fd4e 	bl	8001838 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da0:	f7fe fd4a 	bl	8001838 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e045      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db2:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x444>
 8002dbe:	e03d      	b.n	8002e3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d107      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e038      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e48 <HAL_RCC_OscConfig+0x4ec>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d028      	beq.n	8002e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d121      	bne.n	8002e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d11a      	bne.n	8002e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e08:	4013      	ands	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d111      	bne.n	8002e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	3b01      	subs	r3, #1
 8002e22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d107      	bne.n	8002e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800

08002e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0cc      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e60:	4b68      	ldr	r3, [pc, #416]	@ (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d90c      	bls.n	8002e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b65      	ldr	r3, [pc, #404]	@ (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b63      	ldr	r3, [pc, #396]	@ (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0b8      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d020      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea0:	4b59      	ldr	r3, [pc, #356]	@ (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4a58      	ldr	r2, [pc, #352]	@ (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002eaa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb8:	4b53      	ldr	r3, [pc, #332]	@ (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4a52      	ldr	r2, [pc, #328]	@ (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ec2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec4:	4b50      	ldr	r3, [pc, #320]	@ (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	494d      	ldr	r1, [pc, #308]	@ (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d044      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d107      	bne.n	8002efa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	4b47      	ldr	r3, [pc, #284]	@ (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d119      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e07f      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d003      	beq.n	8002f0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0a:	4b3f      	ldr	r3, [pc, #252]	@ (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e06f      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e067      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f2a:	4b37      	ldr	r3, [pc, #220]	@ (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f023 0203 	bic.w	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4934      	ldr	r1, [pc, #208]	@ (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f3c:	f7fe fc7c 	bl	8001838 <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f44:	f7fe fc78 	bl	8001838 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e04f      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	4b2b      	ldr	r3, [pc, #172]	@ (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 020c 	and.w	r2, r3, #12
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d1eb      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f6c:	4b25      	ldr	r3, [pc, #148]	@ (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d20c      	bcs.n	8002f94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	4b22      	ldr	r3, [pc, #136]	@ (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f82:	4b20      	ldr	r3, [pc, #128]	@ (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e032      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa0:	4b19      	ldr	r3, [pc, #100]	@ (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4916      	ldr	r1, [pc, #88]	@ (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fbe:	4b12      	ldr	r3, [pc, #72]	@ (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	490e      	ldr	r1, [pc, #56]	@ (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fd2:	f000 f821 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	490a      	ldr	r1, [pc, #40]	@ (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002fe4:	5ccb      	ldrb	r3, [r1, r3]
 8002fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fea:	4a09      	ldr	r2, [pc, #36]	@ (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002fee:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe fbdc 	bl	80017b0 <HAL_InitTick>

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40023c00 	.word	0x40023c00
 8003008:	40023800 	.word	0x40023800
 800300c:	08006190 	.word	0x08006190
 8003010:	20000000 	.word	0x20000000
 8003014:	20000004 	.word	0x20000004

08003018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800301c:	b090      	sub	sp, #64	@ 0x40
 800301e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003030:	4b59      	ldr	r3, [pc, #356]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x180>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b08      	cmp	r3, #8
 800303a:	d00d      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x40>
 800303c:	2b08      	cmp	r3, #8
 800303e:	f200 80a1 	bhi.w	8003184 <HAL_RCC_GetSysClockFreq+0x16c>
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0x34>
 8003046:	2b04      	cmp	r3, #4
 8003048:	d003      	beq.n	8003052 <HAL_RCC_GetSysClockFreq+0x3a>
 800304a:	e09b      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800304c:	4b53      	ldr	r3, [pc, #332]	@ (800319c <HAL_RCC_GetSysClockFreq+0x184>)
 800304e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003050:	e09b      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003052:	4b53      	ldr	r3, [pc, #332]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003054:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003056:	e098      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003058:	4b4f      	ldr	r3, [pc, #316]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x180>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003060:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003062:	4b4d      	ldr	r3, [pc, #308]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x180>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d028      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306e:	4b4a      	ldr	r3, [pc, #296]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x180>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	099b      	lsrs	r3, r3, #6
 8003074:	2200      	movs	r2, #0
 8003076:	623b      	str	r3, [r7, #32]
 8003078:	627a      	str	r2, [r7, #36]	@ 0x24
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003080:	2100      	movs	r1, #0
 8003082:	4b47      	ldr	r3, [pc, #284]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003084:	fb03 f201 	mul.w	r2, r3, r1
 8003088:	2300      	movs	r3, #0
 800308a:	fb00 f303 	mul.w	r3, r0, r3
 800308e:	4413      	add	r3, r2
 8003090:	4a43      	ldr	r2, [pc, #268]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003092:	fba0 1202 	umull	r1, r2, r0, r2
 8003096:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003098:	460a      	mov	r2, r1
 800309a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800309c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800309e:	4413      	add	r3, r2
 80030a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a4:	2200      	movs	r2, #0
 80030a6:	61bb      	str	r3, [r7, #24]
 80030a8:	61fa      	str	r2, [r7, #28]
 80030aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80030b2:	f7fd fd7b 	bl	8000bac <__aeabi_uldivmod>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4613      	mov	r3, r2
 80030bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030be:	e053      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c0:	4b35      	ldr	r3, [pc, #212]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x180>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	099b      	lsrs	r3, r3, #6
 80030c6:	2200      	movs	r2, #0
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	617a      	str	r2, [r7, #20]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030d2:	f04f 0b00 	mov.w	fp, #0
 80030d6:	4652      	mov	r2, sl
 80030d8:	465b      	mov	r3, fp
 80030da:	f04f 0000 	mov.w	r0, #0
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	0159      	lsls	r1, r3, #5
 80030e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e8:	0150      	lsls	r0, r2, #5
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	ebb2 080a 	subs.w	r8, r2, sl
 80030f2:	eb63 090b 	sbc.w	r9, r3, fp
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003102:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003106:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800310a:	ebb2 0408 	subs.w	r4, r2, r8
 800310e:	eb63 0509 	sbc.w	r5, r3, r9
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	00eb      	lsls	r3, r5, #3
 800311c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003120:	00e2      	lsls	r2, r4, #3
 8003122:	4614      	mov	r4, r2
 8003124:	461d      	mov	r5, r3
 8003126:	eb14 030a 	adds.w	r3, r4, sl
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	eb45 030b 	adc.w	r3, r5, fp
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800313e:	4629      	mov	r1, r5
 8003140:	028b      	lsls	r3, r1, #10
 8003142:	4621      	mov	r1, r4
 8003144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003148:	4621      	mov	r1, r4
 800314a:	028a      	lsls	r2, r1, #10
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003152:	2200      	movs	r2, #0
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	60fa      	str	r2, [r7, #12]
 8003158:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800315c:	f7fd fd26 	bl	8000bac <__aeabi_uldivmod>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4613      	mov	r3, r2
 8003166:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003168:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x180>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	0c1b      	lsrs	r3, r3, #16
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	3301      	adds	r3, #1
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003178:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800317a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003180:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003182:	e002      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003184:	4b05      	ldr	r3, [pc, #20]	@ (800319c <HAL_RCC_GetSysClockFreq+0x184>)
 8003186:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800318c:	4618      	mov	r0, r3
 800318e:	3740      	adds	r7, #64	@ 0x40
 8003190:	46bd      	mov	sp, r7
 8003192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800
 800319c:	00f42400 	.word	0x00f42400
 80031a0:	017d7840 	.word	0x017d7840

080031a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a8:	4b03      	ldr	r3, [pc, #12]	@ (80031b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000000 	.word	0x20000000

080031bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031c0:	f7ff fff0 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b05      	ldr	r3, [pc, #20]	@ (80031dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	0a9b      	lsrs	r3, r3, #10
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4903      	ldr	r1, [pc, #12]	@ (80031e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031d2:	5ccb      	ldrb	r3, [r1, r3]
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40023800 	.word	0x40023800
 80031e0:	080061a0 	.word	0x080061a0

080031e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031e8:	f7ff ffdc 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4b05      	ldr	r3, [pc, #20]	@ (8003204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	0b5b      	lsrs	r3, r3, #13
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	4903      	ldr	r1, [pc, #12]	@ (8003208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031fa:	5ccb      	ldrb	r3, [r1, r3]
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003200:	4618      	mov	r0, r3
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40023800 	.word	0x40023800
 8003208:	080061a0 	.word	0x080061a0

0800320c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e041      	b.n	80032a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fe f970 	bl	8001518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	4619      	mov	r1, r3
 800324a:	4610      	mov	r0, r2
 800324c:	f000 f9b8 	bl	80035c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d001      	beq.n	80032c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e046      	b.n	8003352 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a23      	ldr	r2, [pc, #140]	@ (8003360 <HAL_TIM_Base_Start+0xb4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d022      	beq.n	800331c <HAL_TIM_Base_Start+0x70>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032de:	d01d      	beq.n	800331c <HAL_TIM_Base_Start+0x70>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003364 <HAL_TIM_Base_Start+0xb8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d018      	beq.n	800331c <HAL_TIM_Base_Start+0x70>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003368 <HAL_TIM_Base_Start+0xbc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d013      	beq.n	800331c <HAL_TIM_Base_Start+0x70>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1c      	ldr	r2, [pc, #112]	@ (800336c <HAL_TIM_Base_Start+0xc0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00e      	beq.n	800331c <HAL_TIM_Base_Start+0x70>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1b      	ldr	r2, [pc, #108]	@ (8003370 <HAL_TIM_Base_Start+0xc4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d009      	beq.n	800331c <HAL_TIM_Base_Start+0x70>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a19      	ldr	r2, [pc, #100]	@ (8003374 <HAL_TIM_Base_Start+0xc8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d004      	beq.n	800331c <HAL_TIM_Base_Start+0x70>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a18      	ldr	r2, [pc, #96]	@ (8003378 <HAL_TIM_Base_Start+0xcc>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d111      	bne.n	8003340 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b06      	cmp	r3, #6
 800332c:	d010      	beq.n	8003350 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333e:	e007      	b.n	8003350 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40010000 	.word	0x40010000
 8003364:	40000400 	.word	0x40000400
 8003368:	40000800 	.word	0x40000800
 800336c:	40000c00 	.word	0x40000c00
 8003370:	40010400 	.word	0x40010400
 8003374:	40014000 	.word	0x40014000
 8003378:	40001800 	.word	0x40001800

0800337c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d020      	beq.n	80033e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01b      	beq.n	80033e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0202 	mvn.w	r2, #2
 80033b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8dc 	bl	8003584 <HAL_TIM_IC_CaptureCallback>
 80033cc:	e005      	b.n	80033da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f8ce 	bl	8003570 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f8df 	bl	8003598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d020      	beq.n	800342c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01b      	beq.n	800342c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0204 	mvn.w	r2, #4
 80033fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f8b6 	bl	8003584 <HAL_TIM_IC_CaptureCallback>
 8003418:	e005      	b.n	8003426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8a8 	bl	8003570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f8b9 	bl	8003598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d020      	beq.n	8003478 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01b      	beq.n	8003478 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0208 	mvn.w	r2, #8
 8003448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2204      	movs	r2, #4
 800344e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f890 	bl	8003584 <HAL_TIM_IC_CaptureCallback>
 8003464:	e005      	b.n	8003472 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f882 	bl	8003570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f893 	bl	8003598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	d020      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01b      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0210 	mvn.w	r2, #16
 8003494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2208      	movs	r2, #8
 800349a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f86a 	bl	8003584 <HAL_TIM_IC_CaptureCallback>
 80034b0:	e005      	b.n	80034be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f85c 	bl	8003570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f86d 	bl	8003598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00c      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0201 	mvn.w	r2, #1
 80034e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f83a 	bl	800355c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00c      	beq.n	800350c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d007      	beq.n	800350c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f986 	bl	8003818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d007      	beq.n	8003530 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f83e 	bl	80035ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00c      	beq.n	8003554 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0220 	mvn.w	r2, #32
 800354c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f958 	bl	8003804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003554:	bf00      	nop
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a43      	ldr	r2, [pc, #268]	@ (80036e0 <TIM_Base_SetConfig+0x120>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d013      	beq.n	8003600 <TIM_Base_SetConfig+0x40>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035de:	d00f      	beq.n	8003600 <TIM_Base_SetConfig+0x40>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a40      	ldr	r2, [pc, #256]	@ (80036e4 <TIM_Base_SetConfig+0x124>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00b      	beq.n	8003600 <TIM_Base_SetConfig+0x40>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a3f      	ldr	r2, [pc, #252]	@ (80036e8 <TIM_Base_SetConfig+0x128>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d007      	beq.n	8003600 <TIM_Base_SetConfig+0x40>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a3e      	ldr	r2, [pc, #248]	@ (80036ec <TIM_Base_SetConfig+0x12c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d003      	beq.n	8003600 <TIM_Base_SetConfig+0x40>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a3d      	ldr	r2, [pc, #244]	@ (80036f0 <TIM_Base_SetConfig+0x130>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d108      	bne.n	8003612 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a32      	ldr	r2, [pc, #200]	@ (80036e0 <TIM_Base_SetConfig+0x120>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d02b      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003620:	d027      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a2f      	ldr	r2, [pc, #188]	@ (80036e4 <TIM_Base_SetConfig+0x124>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d023      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a2e      	ldr	r2, [pc, #184]	@ (80036e8 <TIM_Base_SetConfig+0x128>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d01f      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a2d      	ldr	r2, [pc, #180]	@ (80036ec <TIM_Base_SetConfig+0x12c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d01b      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a2c      	ldr	r2, [pc, #176]	@ (80036f0 <TIM_Base_SetConfig+0x130>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d017      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a2b      	ldr	r2, [pc, #172]	@ (80036f4 <TIM_Base_SetConfig+0x134>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d013      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a2a      	ldr	r2, [pc, #168]	@ (80036f8 <TIM_Base_SetConfig+0x138>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00f      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a29      	ldr	r2, [pc, #164]	@ (80036fc <TIM_Base_SetConfig+0x13c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00b      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a28      	ldr	r2, [pc, #160]	@ (8003700 <TIM_Base_SetConfig+0x140>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d007      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a27      	ldr	r2, [pc, #156]	@ (8003704 <TIM_Base_SetConfig+0x144>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d003      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a26      	ldr	r2, [pc, #152]	@ (8003708 <TIM_Base_SetConfig+0x148>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d108      	bne.n	8003684 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a0e      	ldr	r2, [pc, #56]	@ (80036e0 <TIM_Base_SetConfig+0x120>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d003      	beq.n	80036b2 <TIM_Base_SetConfig+0xf2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a10      	ldr	r2, [pc, #64]	@ (80036f0 <TIM_Base_SetConfig+0x130>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d103      	bne.n	80036ba <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f043 0204 	orr.w	r2, r3, #4
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	601a      	str	r2, [r3, #0]
}
 80036d2:	bf00      	nop
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40010000 	.word	0x40010000
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40000800 	.word	0x40000800
 80036ec:	40000c00 	.word	0x40000c00
 80036f0:	40010400 	.word	0x40010400
 80036f4:	40014000 	.word	0x40014000
 80036f8:	40014400 	.word	0x40014400
 80036fc:	40014800 	.word	0x40014800
 8003700:	40001800 	.word	0x40001800
 8003704:	40001c00 	.word	0x40001c00
 8003708:	40002000 	.word	0x40002000

0800370c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003720:	2302      	movs	r3, #2
 8003722:	e05a      	b.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800374a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a21      	ldr	r2, [pc, #132]	@ (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d022      	beq.n	80037ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003770:	d01d      	beq.n	80037ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1d      	ldr	r2, [pc, #116]	@ (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d018      	beq.n	80037ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1b      	ldr	r2, [pc, #108]	@ (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d013      	beq.n	80037ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1a      	ldr	r2, [pc, #104]	@ (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d00e      	beq.n	80037ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a18      	ldr	r2, [pc, #96]	@ (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d009      	beq.n	80037ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a17      	ldr	r2, [pc, #92]	@ (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d004      	beq.n	80037ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a15      	ldr	r2, [pc, #84]	@ (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d10c      	bne.n	80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40010000 	.word	0x40010000
 80037ec:	40000400 	.word	0x40000400
 80037f0:	40000800 	.word	0x40000800
 80037f4:	40000c00 	.word	0x40000c00
 80037f8:	40010400 	.word	0x40010400
 80037fc:	40014000 	.word	0x40014000
 8003800:	40001800 	.word	0x40001800

08003804 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e042      	b.n	80038c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd fe88 	bl	8001568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2224      	movs	r2, #36	@ 0x24
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800386e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f973 	bl	8003b5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003884:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695a      	ldr	r2, [r3, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003894:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	@ 0x28
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d175      	bne.n	80039d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_UART_Transmit+0x2c>
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e06e      	b.n	80039da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2221      	movs	r2, #33	@ 0x21
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800390a:	f7fd ff95 	bl	8001838 <HAL_GetTick>
 800390e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	88fa      	ldrh	r2, [r7, #6]
 8003914:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	88fa      	ldrh	r2, [r7, #6]
 800391a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003924:	d108      	bne.n	8003938 <HAL_UART_Transmit+0x6c>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d104      	bne.n	8003938 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	e003      	b.n	8003940 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800393c:	2300      	movs	r3, #0
 800393e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003940:	e02e      	b.n	80039a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2200      	movs	r2, #0
 800394a:	2180      	movs	r1, #128	@ 0x80
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f848 	bl	80039e2 <UART_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e03a      	b.n	80039da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10b      	bne.n	8003982 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003978:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	3302      	adds	r3, #2
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	e007      	b.n	8003992 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	781a      	ldrb	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	3301      	adds	r3, #1
 8003990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1cb      	bne.n	8003942 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2200      	movs	r2, #0
 80039b2:	2140      	movs	r1, #64	@ 0x40
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f814 	bl	80039e2 <UART_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e006      	b.n	80039da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	e000      	b.n	80039da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
  }
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b086      	sub	sp, #24
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	603b      	str	r3, [r7, #0]
 80039ee:	4613      	mov	r3, r2
 80039f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f2:	e03b      	b.n	8003a6c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fa:	d037      	beq.n	8003a6c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039fc:	f7fd ff1c 	bl	8001838 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	6a3a      	ldr	r2, [r7, #32]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d302      	bcc.n	8003a12 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e03a      	b.n	8003a8c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d023      	beq.n	8003a6c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b80      	cmp	r3, #128	@ 0x80
 8003a28:	d020      	beq.n	8003a6c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b40      	cmp	r3, #64	@ 0x40
 8003a2e:	d01d      	beq.n	8003a6c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d116      	bne.n	8003a6c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f81d 	bl	8003a94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e00f      	b.n	8003a8c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4013      	ands	r3, r2
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	461a      	mov	r2, r3
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d0b4      	beq.n	80039f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b095      	sub	sp, #84	@ 0x54
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	330c      	adds	r3, #12
 8003aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003abc:	643a      	str	r2, [r7, #64]	@ 0x40
 8003abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ac2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e5      	bne.n	8003a9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3314      	adds	r3, #20
 8003ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3314      	adds	r3, #20
 8003aee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003af0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e5      	bne.n	8003ad0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d119      	bne.n	8003b40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	330c      	adds	r3, #12
 8003b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	e853 3f00 	ldrex	r3, [r3]
 8003b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f023 0310 	bic.w	r3, r3, #16
 8003b22:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	330c      	adds	r3, #12
 8003b2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b2c:	61ba      	str	r2, [r7, #24]
 8003b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b30:	6979      	ldr	r1, [r7, #20]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	e841 2300 	strex	r3, r2, [r1]
 8003b38:	613b      	str	r3, [r7, #16]
   return(result);
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e5      	bne.n	8003b0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b4e:	bf00      	nop
 8003b50:	3754      	adds	r7, #84	@ 0x54
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b60:	b0c0      	sub	sp, #256	@ 0x100
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b78:	68d9      	ldr	r1, [r3, #12]
 8003b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	ea40 0301 	orr.w	r3, r0, r1
 8003b84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003bb4:	f021 010c 	bic.w	r1, r1, #12
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003bc2:	430b      	orrs	r3, r1
 8003bc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd6:	6999      	ldr	r1, [r3, #24]
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	ea40 0301 	orr.w	r3, r0, r1
 8003be2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4b8f      	ldr	r3, [pc, #572]	@ (8003e28 <UART_SetConfig+0x2cc>)
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d005      	beq.n	8003bfc <UART_SetConfig+0xa0>
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4b8d      	ldr	r3, [pc, #564]	@ (8003e2c <UART_SetConfig+0x2d0>)
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d104      	bne.n	8003c06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bfc:	f7ff faf2 	bl	80031e4 <HAL_RCC_GetPCLK2Freq>
 8003c00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003c04:	e003      	b.n	8003c0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c06:	f7ff fad9 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
 8003c0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c18:	f040 810c 	bne.w	8003e34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c20:	2200      	movs	r2, #0
 8003c22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c2e:	4622      	mov	r2, r4
 8003c30:	462b      	mov	r3, r5
 8003c32:	1891      	adds	r1, r2, r2
 8003c34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c36:	415b      	adcs	r3, r3
 8003c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c3e:	4621      	mov	r1, r4
 8003c40:	eb12 0801 	adds.w	r8, r2, r1
 8003c44:	4629      	mov	r1, r5
 8003c46:	eb43 0901 	adc.w	r9, r3, r1
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c5e:	4690      	mov	r8, r2
 8003c60:	4699      	mov	r9, r3
 8003c62:	4623      	mov	r3, r4
 8003c64:	eb18 0303 	adds.w	r3, r8, r3
 8003c68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c6c:	462b      	mov	r3, r5
 8003c6e:	eb49 0303 	adc.w	r3, r9, r3
 8003c72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	18db      	adds	r3, r3, r3
 8003c8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c90:	4613      	mov	r3, r2
 8003c92:	eb42 0303 	adc.w	r3, r2, r3
 8003c96:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ca0:	f7fc ff84 	bl	8000bac <__aeabi_uldivmod>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4b61      	ldr	r3, [pc, #388]	@ (8003e30 <UART_SetConfig+0x2d4>)
 8003caa:	fba3 2302 	umull	r2, r3, r3, r2
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	011c      	lsls	r4, r3, #4
 8003cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cbc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003cc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	1891      	adds	r1, r2, r2
 8003cca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ccc:	415b      	adcs	r3, r3
 8003cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	eb12 0a01 	adds.w	sl, r2, r1
 8003cda:	4649      	mov	r1, r9
 8003cdc:	eb43 0b01 	adc.w	fp, r3, r1
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cf4:	4692      	mov	sl, r2
 8003cf6:	469b      	mov	fp, r3
 8003cf8:	4643      	mov	r3, r8
 8003cfa:	eb1a 0303 	adds.w	r3, sl, r3
 8003cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d02:	464b      	mov	r3, r9
 8003d04:	eb4b 0303 	adc.w	r3, fp, r3
 8003d08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d20:	460b      	mov	r3, r1
 8003d22:	18db      	adds	r3, r3, r3
 8003d24:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d26:	4613      	mov	r3, r2
 8003d28:	eb42 0303 	adc.w	r3, r2, r3
 8003d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d36:	f7fc ff39 	bl	8000bac <__aeabi_uldivmod>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4b3b      	ldr	r3, [pc, #236]	@ (8003e30 <UART_SetConfig+0x2d4>)
 8003d42:	fba3 2301 	umull	r2, r3, r3, r1
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	2264      	movs	r2, #100	@ 0x64
 8003d4a:	fb02 f303 	mul.w	r3, r2, r3
 8003d4e:	1acb      	subs	r3, r1, r3
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d56:	4b36      	ldr	r3, [pc, #216]	@ (8003e30 <UART_SetConfig+0x2d4>)
 8003d58:	fba3 2302 	umull	r2, r3, r3, r2
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d64:	441c      	add	r4, r3
 8003d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d78:	4642      	mov	r2, r8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	1891      	adds	r1, r2, r2
 8003d7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d80:	415b      	adcs	r3, r3
 8003d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d88:	4641      	mov	r1, r8
 8003d8a:	1851      	adds	r1, r2, r1
 8003d8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d8e:	4649      	mov	r1, r9
 8003d90:	414b      	adcs	r3, r1
 8003d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003da0:	4659      	mov	r1, fp
 8003da2:	00cb      	lsls	r3, r1, #3
 8003da4:	4651      	mov	r1, sl
 8003da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003daa:	4651      	mov	r1, sl
 8003dac:	00ca      	lsls	r2, r1, #3
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	4642      	mov	r2, r8
 8003db6:	189b      	adds	r3, r3, r2
 8003db8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dbc:	464b      	mov	r3, r9
 8003dbe:	460a      	mov	r2, r1
 8003dc0:	eb42 0303 	adc.w	r3, r2, r3
 8003dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003dd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ddc:	460b      	mov	r3, r1
 8003dde:	18db      	adds	r3, r3, r3
 8003de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003de2:	4613      	mov	r3, r2
 8003de4:	eb42 0303 	adc.w	r3, r2, r3
 8003de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003dee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003df2:	f7fc fedb 	bl	8000bac <__aeabi_uldivmod>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003e30 <UART_SetConfig+0x2d4>)
 8003dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003e00:	095b      	lsrs	r3, r3, #5
 8003e02:	2164      	movs	r1, #100	@ 0x64
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	3332      	adds	r3, #50	@ 0x32
 8003e0e:	4a08      	ldr	r2, [pc, #32]	@ (8003e30 <UART_SetConfig+0x2d4>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	f003 0207 	and.w	r2, r3, #7
 8003e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4422      	add	r2, r4
 8003e22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e24:	e106      	b.n	8004034 <UART_SetConfig+0x4d8>
 8003e26:	bf00      	nop
 8003e28:	40011000 	.word	0x40011000
 8003e2c:	40011400 	.word	0x40011400
 8003e30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e46:	4642      	mov	r2, r8
 8003e48:	464b      	mov	r3, r9
 8003e4a:	1891      	adds	r1, r2, r2
 8003e4c:	6239      	str	r1, [r7, #32]
 8003e4e:	415b      	adcs	r3, r3
 8003e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e56:	4641      	mov	r1, r8
 8003e58:	1854      	adds	r4, r2, r1
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	eb43 0501 	adc.w	r5, r3, r1
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	00eb      	lsls	r3, r5, #3
 8003e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e6e:	00e2      	lsls	r2, r4, #3
 8003e70:	4614      	mov	r4, r2
 8003e72:	461d      	mov	r5, r3
 8003e74:	4643      	mov	r3, r8
 8003e76:	18e3      	adds	r3, r4, r3
 8003e78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e7c:	464b      	mov	r3, r9
 8003e7e:	eb45 0303 	adc.w	r3, r5, r3
 8003e82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	008b      	lsls	r3, r1, #2
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eac:	4621      	mov	r1, r4
 8003eae:	008a      	lsls	r2, r1, #2
 8003eb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003eb4:	f7fc fe7a 	bl	8000bac <__aeabi_uldivmod>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4b60      	ldr	r3, [pc, #384]	@ (8004040 <UART_SetConfig+0x4e4>)
 8003ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	011c      	lsls	r4, r3, #4
 8003ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ed0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ed4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ed8:	4642      	mov	r2, r8
 8003eda:	464b      	mov	r3, r9
 8003edc:	1891      	adds	r1, r2, r2
 8003ede:	61b9      	str	r1, [r7, #24]
 8003ee0:	415b      	adcs	r3, r3
 8003ee2:	61fb      	str	r3, [r7, #28]
 8003ee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee8:	4641      	mov	r1, r8
 8003eea:	1851      	adds	r1, r2, r1
 8003eec:	6139      	str	r1, [r7, #16]
 8003eee:	4649      	mov	r1, r9
 8003ef0:	414b      	adcs	r3, r1
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f00:	4659      	mov	r1, fp
 8003f02:	00cb      	lsls	r3, r1, #3
 8003f04:	4651      	mov	r1, sl
 8003f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f0a:	4651      	mov	r1, sl
 8003f0c:	00ca      	lsls	r2, r1, #3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	4619      	mov	r1, r3
 8003f12:	4603      	mov	r3, r0
 8003f14:	4642      	mov	r2, r8
 8003f16:	189b      	adds	r3, r3, r2
 8003f18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f1c:	464b      	mov	r3, r9
 8003f1e:	460a      	mov	r2, r1
 8003f20:	eb42 0303 	adc.w	r3, r2, r3
 8003f24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f40:	4649      	mov	r1, r9
 8003f42:	008b      	lsls	r3, r1, #2
 8003f44:	4641      	mov	r1, r8
 8003f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f4a:	4641      	mov	r1, r8
 8003f4c:	008a      	lsls	r2, r1, #2
 8003f4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f52:	f7fc fe2b 	bl	8000bac <__aeabi_uldivmod>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4b38      	ldr	r3, [pc, #224]	@ (8004040 <UART_SetConfig+0x4e4>)
 8003f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	2264      	movs	r2, #100	@ 0x64
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	1acb      	subs	r3, r1, r3
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	3332      	adds	r3, #50	@ 0x32
 8003f70:	4a33      	ldr	r2, [pc, #204]	@ (8004040 <UART_SetConfig+0x4e4>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f7c:	441c      	add	r4, r3
 8003f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f82:	2200      	movs	r2, #0
 8003f84:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f86:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	464b      	mov	r3, r9
 8003f90:	1891      	adds	r1, r2, r2
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	415b      	adcs	r3, r3
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	1851      	adds	r1, r2, r1
 8003fa0:	6039      	str	r1, [r7, #0]
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	414b      	adcs	r3, r1
 8003fa6:	607b      	str	r3, [r7, #4]
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fb4:	4659      	mov	r1, fp
 8003fb6:	00cb      	lsls	r3, r1, #3
 8003fb8:	4651      	mov	r1, sl
 8003fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fbe:	4651      	mov	r1, sl
 8003fc0:	00ca      	lsls	r2, r1, #3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4642      	mov	r2, r8
 8003fca:	189b      	adds	r3, r3, r2
 8003fcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fce:	464b      	mov	r3, r9
 8003fd0:	460a      	mov	r2, r1
 8003fd2:	eb42 0303 	adc.w	r3, r2, r3
 8003fd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fe2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	008b      	lsls	r3, r1, #2
 8003ff4:	4641      	mov	r1, r8
 8003ff6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	008a      	lsls	r2, r1, #2
 8003ffe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004002:	f7fc fdd3 	bl	8000bac <__aeabi_uldivmod>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4b0d      	ldr	r3, [pc, #52]	@ (8004040 <UART_SetConfig+0x4e4>)
 800400c:	fba3 1302 	umull	r1, r3, r3, r2
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	2164      	movs	r1, #100	@ 0x64
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	3332      	adds	r3, #50	@ 0x32
 800401e:	4a08      	ldr	r2, [pc, #32]	@ (8004040 <UART_SetConfig+0x4e4>)
 8004020:	fba2 2303 	umull	r2, r3, r2, r3
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	f003 020f 	and.w	r2, r3, #15
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4422      	add	r2, r4
 8004032:	609a      	str	r2, [r3, #8]
}
 8004034:	bf00      	nop
 8004036:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800403a:	46bd      	mov	sp, r7
 800403c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004040:	51eb851f 	.word	0x51eb851f

08004044 <siprintf>:
 8004044:	b40e      	push	{r1, r2, r3}
 8004046:	b510      	push	{r4, lr}
 8004048:	b09d      	sub	sp, #116	@ 0x74
 800404a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800404c:	9002      	str	r0, [sp, #8]
 800404e:	9006      	str	r0, [sp, #24]
 8004050:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004054:	480a      	ldr	r0, [pc, #40]	@ (8004080 <siprintf+0x3c>)
 8004056:	9107      	str	r1, [sp, #28]
 8004058:	9104      	str	r1, [sp, #16]
 800405a:	490a      	ldr	r1, [pc, #40]	@ (8004084 <siprintf+0x40>)
 800405c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004060:	9105      	str	r1, [sp, #20]
 8004062:	2400      	movs	r4, #0
 8004064:	a902      	add	r1, sp, #8
 8004066:	6800      	ldr	r0, [r0, #0]
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800406c:	f000 f994 	bl	8004398 <_svfiprintf_r>
 8004070:	9b02      	ldr	r3, [sp, #8]
 8004072:	701c      	strb	r4, [r3, #0]
 8004074:	b01d      	add	sp, #116	@ 0x74
 8004076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800407a:	b003      	add	sp, #12
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	2000000c 	.word	0x2000000c
 8004084:	ffff0208 	.word	0xffff0208

08004088 <memset>:
 8004088:	4402      	add	r2, r0
 800408a:	4603      	mov	r3, r0
 800408c:	4293      	cmp	r3, r2
 800408e:	d100      	bne.n	8004092 <memset+0xa>
 8004090:	4770      	bx	lr
 8004092:	f803 1b01 	strb.w	r1, [r3], #1
 8004096:	e7f9      	b.n	800408c <memset+0x4>

08004098 <__errno>:
 8004098:	4b01      	ldr	r3, [pc, #4]	@ (80040a0 <__errno+0x8>)
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	2000000c 	.word	0x2000000c

080040a4 <__libc_init_array>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	4d0d      	ldr	r5, [pc, #52]	@ (80040dc <__libc_init_array+0x38>)
 80040a8:	4c0d      	ldr	r4, [pc, #52]	@ (80040e0 <__libc_init_array+0x3c>)
 80040aa:	1b64      	subs	r4, r4, r5
 80040ac:	10a4      	asrs	r4, r4, #2
 80040ae:	2600      	movs	r6, #0
 80040b0:	42a6      	cmp	r6, r4
 80040b2:	d109      	bne.n	80040c8 <__libc_init_array+0x24>
 80040b4:	4d0b      	ldr	r5, [pc, #44]	@ (80040e4 <__libc_init_array+0x40>)
 80040b6:	4c0c      	ldr	r4, [pc, #48]	@ (80040e8 <__libc_init_array+0x44>)
 80040b8:	f002 f856 	bl	8006168 <_init>
 80040bc:	1b64      	subs	r4, r4, r5
 80040be:	10a4      	asrs	r4, r4, #2
 80040c0:	2600      	movs	r6, #0
 80040c2:	42a6      	cmp	r6, r4
 80040c4:	d105      	bne.n	80040d2 <__libc_init_array+0x2e>
 80040c6:	bd70      	pop	{r4, r5, r6, pc}
 80040c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040cc:	4798      	blx	r3
 80040ce:	3601      	adds	r6, #1
 80040d0:	e7ee      	b.n	80040b0 <__libc_init_array+0xc>
 80040d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d6:	4798      	blx	r3
 80040d8:	3601      	adds	r6, #1
 80040da:	e7f2      	b.n	80040c2 <__libc_init_array+0x1e>
 80040dc:	080063e0 	.word	0x080063e0
 80040e0:	080063e0 	.word	0x080063e0
 80040e4:	080063e0 	.word	0x080063e0
 80040e8:	080063e4 	.word	0x080063e4

080040ec <__retarget_lock_acquire_recursive>:
 80040ec:	4770      	bx	lr

080040ee <__retarget_lock_release_recursive>:
 80040ee:	4770      	bx	lr

080040f0 <_free_r>:
 80040f0:	b538      	push	{r3, r4, r5, lr}
 80040f2:	4605      	mov	r5, r0
 80040f4:	2900      	cmp	r1, #0
 80040f6:	d041      	beq.n	800417c <_free_r+0x8c>
 80040f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040fc:	1f0c      	subs	r4, r1, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	bfb8      	it	lt
 8004102:	18e4      	addlt	r4, r4, r3
 8004104:	f000 f8e0 	bl	80042c8 <__malloc_lock>
 8004108:	4a1d      	ldr	r2, [pc, #116]	@ (8004180 <_free_r+0x90>)
 800410a:	6813      	ldr	r3, [r2, #0]
 800410c:	b933      	cbnz	r3, 800411c <_free_r+0x2c>
 800410e:	6063      	str	r3, [r4, #4]
 8004110:	6014      	str	r4, [r2, #0]
 8004112:	4628      	mov	r0, r5
 8004114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004118:	f000 b8dc 	b.w	80042d4 <__malloc_unlock>
 800411c:	42a3      	cmp	r3, r4
 800411e:	d908      	bls.n	8004132 <_free_r+0x42>
 8004120:	6820      	ldr	r0, [r4, #0]
 8004122:	1821      	adds	r1, r4, r0
 8004124:	428b      	cmp	r3, r1
 8004126:	bf01      	itttt	eq
 8004128:	6819      	ldreq	r1, [r3, #0]
 800412a:	685b      	ldreq	r3, [r3, #4]
 800412c:	1809      	addeq	r1, r1, r0
 800412e:	6021      	streq	r1, [r4, #0]
 8004130:	e7ed      	b.n	800410e <_free_r+0x1e>
 8004132:	461a      	mov	r2, r3
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	b10b      	cbz	r3, 800413c <_free_r+0x4c>
 8004138:	42a3      	cmp	r3, r4
 800413a:	d9fa      	bls.n	8004132 <_free_r+0x42>
 800413c:	6811      	ldr	r1, [r2, #0]
 800413e:	1850      	adds	r0, r2, r1
 8004140:	42a0      	cmp	r0, r4
 8004142:	d10b      	bne.n	800415c <_free_r+0x6c>
 8004144:	6820      	ldr	r0, [r4, #0]
 8004146:	4401      	add	r1, r0
 8004148:	1850      	adds	r0, r2, r1
 800414a:	4283      	cmp	r3, r0
 800414c:	6011      	str	r1, [r2, #0]
 800414e:	d1e0      	bne.n	8004112 <_free_r+0x22>
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	6053      	str	r3, [r2, #4]
 8004156:	4408      	add	r0, r1
 8004158:	6010      	str	r0, [r2, #0]
 800415a:	e7da      	b.n	8004112 <_free_r+0x22>
 800415c:	d902      	bls.n	8004164 <_free_r+0x74>
 800415e:	230c      	movs	r3, #12
 8004160:	602b      	str	r3, [r5, #0]
 8004162:	e7d6      	b.n	8004112 <_free_r+0x22>
 8004164:	6820      	ldr	r0, [r4, #0]
 8004166:	1821      	adds	r1, r4, r0
 8004168:	428b      	cmp	r3, r1
 800416a:	bf04      	itt	eq
 800416c:	6819      	ldreq	r1, [r3, #0]
 800416e:	685b      	ldreq	r3, [r3, #4]
 8004170:	6063      	str	r3, [r4, #4]
 8004172:	bf04      	itt	eq
 8004174:	1809      	addeq	r1, r1, r0
 8004176:	6021      	streq	r1, [r4, #0]
 8004178:	6054      	str	r4, [r2, #4]
 800417a:	e7ca      	b.n	8004112 <_free_r+0x22>
 800417c:	bd38      	pop	{r3, r4, r5, pc}
 800417e:	bf00      	nop
 8004180:	200004c8 	.word	0x200004c8

08004184 <sbrk_aligned>:
 8004184:	b570      	push	{r4, r5, r6, lr}
 8004186:	4e0f      	ldr	r6, [pc, #60]	@ (80041c4 <sbrk_aligned+0x40>)
 8004188:	460c      	mov	r4, r1
 800418a:	6831      	ldr	r1, [r6, #0]
 800418c:	4605      	mov	r5, r0
 800418e:	b911      	cbnz	r1, 8004196 <sbrk_aligned+0x12>
 8004190:	f000 fba4 	bl	80048dc <_sbrk_r>
 8004194:	6030      	str	r0, [r6, #0]
 8004196:	4621      	mov	r1, r4
 8004198:	4628      	mov	r0, r5
 800419a:	f000 fb9f 	bl	80048dc <_sbrk_r>
 800419e:	1c43      	adds	r3, r0, #1
 80041a0:	d103      	bne.n	80041aa <sbrk_aligned+0x26>
 80041a2:	f04f 34ff 	mov.w	r4, #4294967295
 80041a6:	4620      	mov	r0, r4
 80041a8:	bd70      	pop	{r4, r5, r6, pc}
 80041aa:	1cc4      	adds	r4, r0, #3
 80041ac:	f024 0403 	bic.w	r4, r4, #3
 80041b0:	42a0      	cmp	r0, r4
 80041b2:	d0f8      	beq.n	80041a6 <sbrk_aligned+0x22>
 80041b4:	1a21      	subs	r1, r4, r0
 80041b6:	4628      	mov	r0, r5
 80041b8:	f000 fb90 	bl	80048dc <_sbrk_r>
 80041bc:	3001      	adds	r0, #1
 80041be:	d1f2      	bne.n	80041a6 <sbrk_aligned+0x22>
 80041c0:	e7ef      	b.n	80041a2 <sbrk_aligned+0x1e>
 80041c2:	bf00      	nop
 80041c4:	200004c4 	.word	0x200004c4

080041c8 <_malloc_r>:
 80041c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041cc:	1ccd      	adds	r5, r1, #3
 80041ce:	f025 0503 	bic.w	r5, r5, #3
 80041d2:	3508      	adds	r5, #8
 80041d4:	2d0c      	cmp	r5, #12
 80041d6:	bf38      	it	cc
 80041d8:	250c      	movcc	r5, #12
 80041da:	2d00      	cmp	r5, #0
 80041dc:	4606      	mov	r6, r0
 80041de:	db01      	blt.n	80041e4 <_malloc_r+0x1c>
 80041e0:	42a9      	cmp	r1, r5
 80041e2:	d904      	bls.n	80041ee <_malloc_r+0x26>
 80041e4:	230c      	movs	r3, #12
 80041e6:	6033      	str	r3, [r6, #0]
 80041e8:	2000      	movs	r0, #0
 80041ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042c4 <_malloc_r+0xfc>
 80041f2:	f000 f869 	bl	80042c8 <__malloc_lock>
 80041f6:	f8d8 3000 	ldr.w	r3, [r8]
 80041fa:	461c      	mov	r4, r3
 80041fc:	bb44      	cbnz	r4, 8004250 <_malloc_r+0x88>
 80041fe:	4629      	mov	r1, r5
 8004200:	4630      	mov	r0, r6
 8004202:	f7ff ffbf 	bl	8004184 <sbrk_aligned>
 8004206:	1c43      	adds	r3, r0, #1
 8004208:	4604      	mov	r4, r0
 800420a:	d158      	bne.n	80042be <_malloc_r+0xf6>
 800420c:	f8d8 4000 	ldr.w	r4, [r8]
 8004210:	4627      	mov	r7, r4
 8004212:	2f00      	cmp	r7, #0
 8004214:	d143      	bne.n	800429e <_malloc_r+0xd6>
 8004216:	2c00      	cmp	r4, #0
 8004218:	d04b      	beq.n	80042b2 <_malloc_r+0xea>
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	4639      	mov	r1, r7
 800421e:	4630      	mov	r0, r6
 8004220:	eb04 0903 	add.w	r9, r4, r3
 8004224:	f000 fb5a 	bl	80048dc <_sbrk_r>
 8004228:	4581      	cmp	r9, r0
 800422a:	d142      	bne.n	80042b2 <_malloc_r+0xea>
 800422c:	6821      	ldr	r1, [r4, #0]
 800422e:	1a6d      	subs	r5, r5, r1
 8004230:	4629      	mov	r1, r5
 8004232:	4630      	mov	r0, r6
 8004234:	f7ff ffa6 	bl	8004184 <sbrk_aligned>
 8004238:	3001      	adds	r0, #1
 800423a:	d03a      	beq.n	80042b2 <_malloc_r+0xea>
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	442b      	add	r3, r5
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	f8d8 3000 	ldr.w	r3, [r8]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	bb62      	cbnz	r2, 80042a4 <_malloc_r+0xdc>
 800424a:	f8c8 7000 	str.w	r7, [r8]
 800424e:	e00f      	b.n	8004270 <_malloc_r+0xa8>
 8004250:	6822      	ldr	r2, [r4, #0]
 8004252:	1b52      	subs	r2, r2, r5
 8004254:	d420      	bmi.n	8004298 <_malloc_r+0xd0>
 8004256:	2a0b      	cmp	r2, #11
 8004258:	d917      	bls.n	800428a <_malloc_r+0xc2>
 800425a:	1961      	adds	r1, r4, r5
 800425c:	42a3      	cmp	r3, r4
 800425e:	6025      	str	r5, [r4, #0]
 8004260:	bf18      	it	ne
 8004262:	6059      	strne	r1, [r3, #4]
 8004264:	6863      	ldr	r3, [r4, #4]
 8004266:	bf08      	it	eq
 8004268:	f8c8 1000 	streq.w	r1, [r8]
 800426c:	5162      	str	r2, [r4, r5]
 800426e:	604b      	str	r3, [r1, #4]
 8004270:	4630      	mov	r0, r6
 8004272:	f000 f82f 	bl	80042d4 <__malloc_unlock>
 8004276:	f104 000b 	add.w	r0, r4, #11
 800427a:	1d23      	adds	r3, r4, #4
 800427c:	f020 0007 	bic.w	r0, r0, #7
 8004280:	1ac2      	subs	r2, r0, r3
 8004282:	bf1c      	itt	ne
 8004284:	1a1b      	subne	r3, r3, r0
 8004286:	50a3      	strne	r3, [r4, r2]
 8004288:	e7af      	b.n	80041ea <_malloc_r+0x22>
 800428a:	6862      	ldr	r2, [r4, #4]
 800428c:	42a3      	cmp	r3, r4
 800428e:	bf0c      	ite	eq
 8004290:	f8c8 2000 	streq.w	r2, [r8]
 8004294:	605a      	strne	r2, [r3, #4]
 8004296:	e7eb      	b.n	8004270 <_malloc_r+0xa8>
 8004298:	4623      	mov	r3, r4
 800429a:	6864      	ldr	r4, [r4, #4]
 800429c:	e7ae      	b.n	80041fc <_malloc_r+0x34>
 800429e:	463c      	mov	r4, r7
 80042a0:	687f      	ldr	r7, [r7, #4]
 80042a2:	e7b6      	b.n	8004212 <_malloc_r+0x4a>
 80042a4:	461a      	mov	r2, r3
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	42a3      	cmp	r3, r4
 80042aa:	d1fb      	bne.n	80042a4 <_malloc_r+0xdc>
 80042ac:	2300      	movs	r3, #0
 80042ae:	6053      	str	r3, [r2, #4]
 80042b0:	e7de      	b.n	8004270 <_malloc_r+0xa8>
 80042b2:	230c      	movs	r3, #12
 80042b4:	6033      	str	r3, [r6, #0]
 80042b6:	4630      	mov	r0, r6
 80042b8:	f000 f80c 	bl	80042d4 <__malloc_unlock>
 80042bc:	e794      	b.n	80041e8 <_malloc_r+0x20>
 80042be:	6005      	str	r5, [r0, #0]
 80042c0:	e7d6      	b.n	8004270 <_malloc_r+0xa8>
 80042c2:	bf00      	nop
 80042c4:	200004c8 	.word	0x200004c8

080042c8 <__malloc_lock>:
 80042c8:	4801      	ldr	r0, [pc, #4]	@ (80042d0 <__malloc_lock+0x8>)
 80042ca:	f7ff bf0f 	b.w	80040ec <__retarget_lock_acquire_recursive>
 80042ce:	bf00      	nop
 80042d0:	200004c0 	.word	0x200004c0

080042d4 <__malloc_unlock>:
 80042d4:	4801      	ldr	r0, [pc, #4]	@ (80042dc <__malloc_unlock+0x8>)
 80042d6:	f7ff bf0a 	b.w	80040ee <__retarget_lock_release_recursive>
 80042da:	bf00      	nop
 80042dc:	200004c0 	.word	0x200004c0

080042e0 <__ssputs_r>:
 80042e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042e4:	688e      	ldr	r6, [r1, #8]
 80042e6:	461f      	mov	r7, r3
 80042e8:	42be      	cmp	r6, r7
 80042ea:	680b      	ldr	r3, [r1, #0]
 80042ec:	4682      	mov	sl, r0
 80042ee:	460c      	mov	r4, r1
 80042f0:	4690      	mov	r8, r2
 80042f2:	d82d      	bhi.n	8004350 <__ssputs_r+0x70>
 80042f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80042fc:	d026      	beq.n	800434c <__ssputs_r+0x6c>
 80042fe:	6965      	ldr	r5, [r4, #20]
 8004300:	6909      	ldr	r1, [r1, #16]
 8004302:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004306:	eba3 0901 	sub.w	r9, r3, r1
 800430a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800430e:	1c7b      	adds	r3, r7, #1
 8004310:	444b      	add	r3, r9
 8004312:	106d      	asrs	r5, r5, #1
 8004314:	429d      	cmp	r5, r3
 8004316:	bf38      	it	cc
 8004318:	461d      	movcc	r5, r3
 800431a:	0553      	lsls	r3, r2, #21
 800431c:	d527      	bpl.n	800436e <__ssputs_r+0x8e>
 800431e:	4629      	mov	r1, r5
 8004320:	f7ff ff52 	bl	80041c8 <_malloc_r>
 8004324:	4606      	mov	r6, r0
 8004326:	b360      	cbz	r0, 8004382 <__ssputs_r+0xa2>
 8004328:	6921      	ldr	r1, [r4, #16]
 800432a:	464a      	mov	r2, r9
 800432c:	f000 fae6 	bl	80048fc <memcpy>
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800433a:	81a3      	strh	r3, [r4, #12]
 800433c:	6126      	str	r6, [r4, #16]
 800433e:	6165      	str	r5, [r4, #20]
 8004340:	444e      	add	r6, r9
 8004342:	eba5 0509 	sub.w	r5, r5, r9
 8004346:	6026      	str	r6, [r4, #0]
 8004348:	60a5      	str	r5, [r4, #8]
 800434a:	463e      	mov	r6, r7
 800434c:	42be      	cmp	r6, r7
 800434e:	d900      	bls.n	8004352 <__ssputs_r+0x72>
 8004350:	463e      	mov	r6, r7
 8004352:	6820      	ldr	r0, [r4, #0]
 8004354:	4632      	mov	r2, r6
 8004356:	4641      	mov	r1, r8
 8004358:	f000 faa6 	bl	80048a8 <memmove>
 800435c:	68a3      	ldr	r3, [r4, #8]
 800435e:	1b9b      	subs	r3, r3, r6
 8004360:	60a3      	str	r3, [r4, #8]
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	4433      	add	r3, r6
 8004366:	6023      	str	r3, [r4, #0]
 8004368:	2000      	movs	r0, #0
 800436a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800436e:	462a      	mov	r2, r5
 8004370:	f000 fad2 	bl	8004918 <_realloc_r>
 8004374:	4606      	mov	r6, r0
 8004376:	2800      	cmp	r0, #0
 8004378:	d1e0      	bne.n	800433c <__ssputs_r+0x5c>
 800437a:	6921      	ldr	r1, [r4, #16]
 800437c:	4650      	mov	r0, sl
 800437e:	f7ff feb7 	bl	80040f0 <_free_r>
 8004382:	230c      	movs	r3, #12
 8004384:	f8ca 3000 	str.w	r3, [sl]
 8004388:	89a3      	ldrh	r3, [r4, #12]
 800438a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800438e:	81a3      	strh	r3, [r4, #12]
 8004390:	f04f 30ff 	mov.w	r0, #4294967295
 8004394:	e7e9      	b.n	800436a <__ssputs_r+0x8a>
	...

08004398 <_svfiprintf_r>:
 8004398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439c:	4698      	mov	r8, r3
 800439e:	898b      	ldrh	r3, [r1, #12]
 80043a0:	061b      	lsls	r3, r3, #24
 80043a2:	b09d      	sub	sp, #116	@ 0x74
 80043a4:	4607      	mov	r7, r0
 80043a6:	460d      	mov	r5, r1
 80043a8:	4614      	mov	r4, r2
 80043aa:	d510      	bpl.n	80043ce <_svfiprintf_r+0x36>
 80043ac:	690b      	ldr	r3, [r1, #16]
 80043ae:	b973      	cbnz	r3, 80043ce <_svfiprintf_r+0x36>
 80043b0:	2140      	movs	r1, #64	@ 0x40
 80043b2:	f7ff ff09 	bl	80041c8 <_malloc_r>
 80043b6:	6028      	str	r0, [r5, #0]
 80043b8:	6128      	str	r0, [r5, #16]
 80043ba:	b930      	cbnz	r0, 80043ca <_svfiprintf_r+0x32>
 80043bc:	230c      	movs	r3, #12
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	f04f 30ff 	mov.w	r0, #4294967295
 80043c4:	b01d      	add	sp, #116	@ 0x74
 80043c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ca:	2340      	movs	r3, #64	@ 0x40
 80043cc:	616b      	str	r3, [r5, #20]
 80043ce:	2300      	movs	r3, #0
 80043d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80043d2:	2320      	movs	r3, #32
 80043d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80043dc:	2330      	movs	r3, #48	@ 0x30
 80043de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800457c <_svfiprintf_r+0x1e4>
 80043e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043e6:	f04f 0901 	mov.w	r9, #1
 80043ea:	4623      	mov	r3, r4
 80043ec:	469a      	mov	sl, r3
 80043ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043f2:	b10a      	cbz	r2, 80043f8 <_svfiprintf_r+0x60>
 80043f4:	2a25      	cmp	r2, #37	@ 0x25
 80043f6:	d1f9      	bne.n	80043ec <_svfiprintf_r+0x54>
 80043f8:	ebba 0b04 	subs.w	fp, sl, r4
 80043fc:	d00b      	beq.n	8004416 <_svfiprintf_r+0x7e>
 80043fe:	465b      	mov	r3, fp
 8004400:	4622      	mov	r2, r4
 8004402:	4629      	mov	r1, r5
 8004404:	4638      	mov	r0, r7
 8004406:	f7ff ff6b 	bl	80042e0 <__ssputs_r>
 800440a:	3001      	adds	r0, #1
 800440c:	f000 80a7 	beq.w	800455e <_svfiprintf_r+0x1c6>
 8004410:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004412:	445a      	add	r2, fp
 8004414:	9209      	str	r2, [sp, #36]	@ 0x24
 8004416:	f89a 3000 	ldrb.w	r3, [sl]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 809f 	beq.w	800455e <_svfiprintf_r+0x1c6>
 8004420:	2300      	movs	r3, #0
 8004422:	f04f 32ff 	mov.w	r2, #4294967295
 8004426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800442a:	f10a 0a01 	add.w	sl, sl, #1
 800442e:	9304      	str	r3, [sp, #16]
 8004430:	9307      	str	r3, [sp, #28]
 8004432:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004436:	931a      	str	r3, [sp, #104]	@ 0x68
 8004438:	4654      	mov	r4, sl
 800443a:	2205      	movs	r2, #5
 800443c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004440:	484e      	ldr	r0, [pc, #312]	@ (800457c <_svfiprintf_r+0x1e4>)
 8004442:	f7fb fec5 	bl	80001d0 <memchr>
 8004446:	9a04      	ldr	r2, [sp, #16]
 8004448:	b9d8      	cbnz	r0, 8004482 <_svfiprintf_r+0xea>
 800444a:	06d0      	lsls	r0, r2, #27
 800444c:	bf44      	itt	mi
 800444e:	2320      	movmi	r3, #32
 8004450:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004454:	0711      	lsls	r1, r2, #28
 8004456:	bf44      	itt	mi
 8004458:	232b      	movmi	r3, #43	@ 0x2b
 800445a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800445e:	f89a 3000 	ldrb.w	r3, [sl]
 8004462:	2b2a      	cmp	r3, #42	@ 0x2a
 8004464:	d015      	beq.n	8004492 <_svfiprintf_r+0xfa>
 8004466:	9a07      	ldr	r2, [sp, #28]
 8004468:	4654      	mov	r4, sl
 800446a:	2000      	movs	r0, #0
 800446c:	f04f 0c0a 	mov.w	ip, #10
 8004470:	4621      	mov	r1, r4
 8004472:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004476:	3b30      	subs	r3, #48	@ 0x30
 8004478:	2b09      	cmp	r3, #9
 800447a:	d94b      	bls.n	8004514 <_svfiprintf_r+0x17c>
 800447c:	b1b0      	cbz	r0, 80044ac <_svfiprintf_r+0x114>
 800447e:	9207      	str	r2, [sp, #28]
 8004480:	e014      	b.n	80044ac <_svfiprintf_r+0x114>
 8004482:	eba0 0308 	sub.w	r3, r0, r8
 8004486:	fa09 f303 	lsl.w	r3, r9, r3
 800448a:	4313      	orrs	r3, r2
 800448c:	9304      	str	r3, [sp, #16]
 800448e:	46a2      	mov	sl, r4
 8004490:	e7d2      	b.n	8004438 <_svfiprintf_r+0xa0>
 8004492:	9b03      	ldr	r3, [sp, #12]
 8004494:	1d19      	adds	r1, r3, #4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	9103      	str	r1, [sp, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	bfbb      	ittet	lt
 800449e:	425b      	neglt	r3, r3
 80044a0:	f042 0202 	orrlt.w	r2, r2, #2
 80044a4:	9307      	strge	r3, [sp, #28]
 80044a6:	9307      	strlt	r3, [sp, #28]
 80044a8:	bfb8      	it	lt
 80044aa:	9204      	strlt	r2, [sp, #16]
 80044ac:	7823      	ldrb	r3, [r4, #0]
 80044ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80044b0:	d10a      	bne.n	80044c8 <_svfiprintf_r+0x130>
 80044b2:	7863      	ldrb	r3, [r4, #1]
 80044b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80044b6:	d132      	bne.n	800451e <_svfiprintf_r+0x186>
 80044b8:	9b03      	ldr	r3, [sp, #12]
 80044ba:	1d1a      	adds	r2, r3, #4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	9203      	str	r2, [sp, #12]
 80044c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044c4:	3402      	adds	r4, #2
 80044c6:	9305      	str	r3, [sp, #20]
 80044c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800458c <_svfiprintf_r+0x1f4>
 80044cc:	7821      	ldrb	r1, [r4, #0]
 80044ce:	2203      	movs	r2, #3
 80044d0:	4650      	mov	r0, sl
 80044d2:	f7fb fe7d 	bl	80001d0 <memchr>
 80044d6:	b138      	cbz	r0, 80044e8 <_svfiprintf_r+0x150>
 80044d8:	9b04      	ldr	r3, [sp, #16]
 80044da:	eba0 000a 	sub.w	r0, r0, sl
 80044de:	2240      	movs	r2, #64	@ 0x40
 80044e0:	4082      	lsls	r2, r0
 80044e2:	4313      	orrs	r3, r2
 80044e4:	3401      	adds	r4, #1
 80044e6:	9304      	str	r3, [sp, #16]
 80044e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ec:	4824      	ldr	r0, [pc, #144]	@ (8004580 <_svfiprintf_r+0x1e8>)
 80044ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044f2:	2206      	movs	r2, #6
 80044f4:	f7fb fe6c 	bl	80001d0 <memchr>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	d036      	beq.n	800456a <_svfiprintf_r+0x1d2>
 80044fc:	4b21      	ldr	r3, [pc, #132]	@ (8004584 <_svfiprintf_r+0x1ec>)
 80044fe:	bb1b      	cbnz	r3, 8004548 <_svfiprintf_r+0x1b0>
 8004500:	9b03      	ldr	r3, [sp, #12]
 8004502:	3307      	adds	r3, #7
 8004504:	f023 0307 	bic.w	r3, r3, #7
 8004508:	3308      	adds	r3, #8
 800450a:	9303      	str	r3, [sp, #12]
 800450c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800450e:	4433      	add	r3, r6
 8004510:	9309      	str	r3, [sp, #36]	@ 0x24
 8004512:	e76a      	b.n	80043ea <_svfiprintf_r+0x52>
 8004514:	fb0c 3202 	mla	r2, ip, r2, r3
 8004518:	460c      	mov	r4, r1
 800451a:	2001      	movs	r0, #1
 800451c:	e7a8      	b.n	8004470 <_svfiprintf_r+0xd8>
 800451e:	2300      	movs	r3, #0
 8004520:	3401      	adds	r4, #1
 8004522:	9305      	str	r3, [sp, #20]
 8004524:	4619      	mov	r1, r3
 8004526:	f04f 0c0a 	mov.w	ip, #10
 800452a:	4620      	mov	r0, r4
 800452c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004530:	3a30      	subs	r2, #48	@ 0x30
 8004532:	2a09      	cmp	r2, #9
 8004534:	d903      	bls.n	800453e <_svfiprintf_r+0x1a6>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0c6      	beq.n	80044c8 <_svfiprintf_r+0x130>
 800453a:	9105      	str	r1, [sp, #20]
 800453c:	e7c4      	b.n	80044c8 <_svfiprintf_r+0x130>
 800453e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004542:	4604      	mov	r4, r0
 8004544:	2301      	movs	r3, #1
 8004546:	e7f0      	b.n	800452a <_svfiprintf_r+0x192>
 8004548:	ab03      	add	r3, sp, #12
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	462a      	mov	r2, r5
 800454e:	4b0e      	ldr	r3, [pc, #56]	@ (8004588 <_svfiprintf_r+0x1f0>)
 8004550:	a904      	add	r1, sp, #16
 8004552:	4638      	mov	r0, r7
 8004554:	f3af 8000 	nop.w
 8004558:	1c42      	adds	r2, r0, #1
 800455a:	4606      	mov	r6, r0
 800455c:	d1d6      	bne.n	800450c <_svfiprintf_r+0x174>
 800455e:	89ab      	ldrh	r3, [r5, #12]
 8004560:	065b      	lsls	r3, r3, #25
 8004562:	f53f af2d 	bmi.w	80043c0 <_svfiprintf_r+0x28>
 8004566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004568:	e72c      	b.n	80043c4 <_svfiprintf_r+0x2c>
 800456a:	ab03      	add	r3, sp, #12
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	462a      	mov	r2, r5
 8004570:	4b05      	ldr	r3, [pc, #20]	@ (8004588 <_svfiprintf_r+0x1f0>)
 8004572:	a904      	add	r1, sp, #16
 8004574:	4638      	mov	r0, r7
 8004576:	f000 f879 	bl	800466c <_printf_i>
 800457a:	e7ed      	b.n	8004558 <_svfiprintf_r+0x1c0>
 800457c:	080061b0 	.word	0x080061b0
 8004580:	080061ba 	.word	0x080061ba
 8004584:	00000000 	.word	0x00000000
 8004588:	080042e1 	.word	0x080042e1
 800458c:	080061b6 	.word	0x080061b6

08004590 <_printf_common>:
 8004590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004594:	4616      	mov	r6, r2
 8004596:	4698      	mov	r8, r3
 8004598:	688a      	ldr	r2, [r1, #8]
 800459a:	690b      	ldr	r3, [r1, #16]
 800459c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045a0:	4293      	cmp	r3, r2
 80045a2:	bfb8      	it	lt
 80045a4:	4613      	movlt	r3, r2
 80045a6:	6033      	str	r3, [r6, #0]
 80045a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045ac:	4607      	mov	r7, r0
 80045ae:	460c      	mov	r4, r1
 80045b0:	b10a      	cbz	r2, 80045b6 <_printf_common+0x26>
 80045b2:	3301      	adds	r3, #1
 80045b4:	6033      	str	r3, [r6, #0]
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	0699      	lsls	r1, r3, #26
 80045ba:	bf42      	ittt	mi
 80045bc:	6833      	ldrmi	r3, [r6, #0]
 80045be:	3302      	addmi	r3, #2
 80045c0:	6033      	strmi	r3, [r6, #0]
 80045c2:	6825      	ldr	r5, [r4, #0]
 80045c4:	f015 0506 	ands.w	r5, r5, #6
 80045c8:	d106      	bne.n	80045d8 <_printf_common+0x48>
 80045ca:	f104 0a19 	add.w	sl, r4, #25
 80045ce:	68e3      	ldr	r3, [r4, #12]
 80045d0:	6832      	ldr	r2, [r6, #0]
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	42ab      	cmp	r3, r5
 80045d6:	dc26      	bgt.n	8004626 <_printf_common+0x96>
 80045d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045dc:	6822      	ldr	r2, [r4, #0]
 80045de:	3b00      	subs	r3, #0
 80045e0:	bf18      	it	ne
 80045e2:	2301      	movne	r3, #1
 80045e4:	0692      	lsls	r2, r2, #26
 80045e6:	d42b      	bmi.n	8004640 <_printf_common+0xb0>
 80045e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045ec:	4641      	mov	r1, r8
 80045ee:	4638      	mov	r0, r7
 80045f0:	47c8      	blx	r9
 80045f2:	3001      	adds	r0, #1
 80045f4:	d01e      	beq.n	8004634 <_printf_common+0xa4>
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	6922      	ldr	r2, [r4, #16]
 80045fa:	f003 0306 	and.w	r3, r3, #6
 80045fe:	2b04      	cmp	r3, #4
 8004600:	bf02      	ittt	eq
 8004602:	68e5      	ldreq	r5, [r4, #12]
 8004604:	6833      	ldreq	r3, [r6, #0]
 8004606:	1aed      	subeq	r5, r5, r3
 8004608:	68a3      	ldr	r3, [r4, #8]
 800460a:	bf0c      	ite	eq
 800460c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004610:	2500      	movne	r5, #0
 8004612:	4293      	cmp	r3, r2
 8004614:	bfc4      	itt	gt
 8004616:	1a9b      	subgt	r3, r3, r2
 8004618:	18ed      	addgt	r5, r5, r3
 800461a:	2600      	movs	r6, #0
 800461c:	341a      	adds	r4, #26
 800461e:	42b5      	cmp	r5, r6
 8004620:	d11a      	bne.n	8004658 <_printf_common+0xc8>
 8004622:	2000      	movs	r0, #0
 8004624:	e008      	b.n	8004638 <_printf_common+0xa8>
 8004626:	2301      	movs	r3, #1
 8004628:	4652      	mov	r2, sl
 800462a:	4641      	mov	r1, r8
 800462c:	4638      	mov	r0, r7
 800462e:	47c8      	blx	r9
 8004630:	3001      	adds	r0, #1
 8004632:	d103      	bne.n	800463c <_printf_common+0xac>
 8004634:	f04f 30ff 	mov.w	r0, #4294967295
 8004638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800463c:	3501      	adds	r5, #1
 800463e:	e7c6      	b.n	80045ce <_printf_common+0x3e>
 8004640:	18e1      	adds	r1, r4, r3
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	2030      	movs	r0, #48	@ 0x30
 8004646:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800464a:	4422      	add	r2, r4
 800464c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004650:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004654:	3302      	adds	r3, #2
 8004656:	e7c7      	b.n	80045e8 <_printf_common+0x58>
 8004658:	2301      	movs	r3, #1
 800465a:	4622      	mov	r2, r4
 800465c:	4641      	mov	r1, r8
 800465e:	4638      	mov	r0, r7
 8004660:	47c8      	blx	r9
 8004662:	3001      	adds	r0, #1
 8004664:	d0e6      	beq.n	8004634 <_printf_common+0xa4>
 8004666:	3601      	adds	r6, #1
 8004668:	e7d9      	b.n	800461e <_printf_common+0x8e>
	...

0800466c <_printf_i>:
 800466c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004670:	7e0f      	ldrb	r7, [r1, #24]
 8004672:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004674:	2f78      	cmp	r7, #120	@ 0x78
 8004676:	4691      	mov	r9, r2
 8004678:	4680      	mov	r8, r0
 800467a:	460c      	mov	r4, r1
 800467c:	469a      	mov	sl, r3
 800467e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004682:	d807      	bhi.n	8004694 <_printf_i+0x28>
 8004684:	2f62      	cmp	r7, #98	@ 0x62
 8004686:	d80a      	bhi.n	800469e <_printf_i+0x32>
 8004688:	2f00      	cmp	r7, #0
 800468a:	f000 80d1 	beq.w	8004830 <_printf_i+0x1c4>
 800468e:	2f58      	cmp	r7, #88	@ 0x58
 8004690:	f000 80b8 	beq.w	8004804 <_printf_i+0x198>
 8004694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004698:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800469c:	e03a      	b.n	8004714 <_printf_i+0xa8>
 800469e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046a2:	2b15      	cmp	r3, #21
 80046a4:	d8f6      	bhi.n	8004694 <_printf_i+0x28>
 80046a6:	a101      	add	r1, pc, #4	@ (adr r1, 80046ac <_printf_i+0x40>)
 80046a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046ac:	08004705 	.word	0x08004705
 80046b0:	08004719 	.word	0x08004719
 80046b4:	08004695 	.word	0x08004695
 80046b8:	08004695 	.word	0x08004695
 80046bc:	08004695 	.word	0x08004695
 80046c0:	08004695 	.word	0x08004695
 80046c4:	08004719 	.word	0x08004719
 80046c8:	08004695 	.word	0x08004695
 80046cc:	08004695 	.word	0x08004695
 80046d0:	08004695 	.word	0x08004695
 80046d4:	08004695 	.word	0x08004695
 80046d8:	08004817 	.word	0x08004817
 80046dc:	08004743 	.word	0x08004743
 80046e0:	080047d1 	.word	0x080047d1
 80046e4:	08004695 	.word	0x08004695
 80046e8:	08004695 	.word	0x08004695
 80046ec:	08004839 	.word	0x08004839
 80046f0:	08004695 	.word	0x08004695
 80046f4:	08004743 	.word	0x08004743
 80046f8:	08004695 	.word	0x08004695
 80046fc:	08004695 	.word	0x08004695
 8004700:	080047d9 	.word	0x080047d9
 8004704:	6833      	ldr	r3, [r6, #0]
 8004706:	1d1a      	adds	r2, r3, #4
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6032      	str	r2, [r6, #0]
 800470c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004710:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004714:	2301      	movs	r3, #1
 8004716:	e09c      	b.n	8004852 <_printf_i+0x1e6>
 8004718:	6833      	ldr	r3, [r6, #0]
 800471a:	6820      	ldr	r0, [r4, #0]
 800471c:	1d19      	adds	r1, r3, #4
 800471e:	6031      	str	r1, [r6, #0]
 8004720:	0606      	lsls	r6, r0, #24
 8004722:	d501      	bpl.n	8004728 <_printf_i+0xbc>
 8004724:	681d      	ldr	r5, [r3, #0]
 8004726:	e003      	b.n	8004730 <_printf_i+0xc4>
 8004728:	0645      	lsls	r5, r0, #25
 800472a:	d5fb      	bpl.n	8004724 <_printf_i+0xb8>
 800472c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004730:	2d00      	cmp	r5, #0
 8004732:	da03      	bge.n	800473c <_printf_i+0xd0>
 8004734:	232d      	movs	r3, #45	@ 0x2d
 8004736:	426d      	negs	r5, r5
 8004738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800473c:	4858      	ldr	r0, [pc, #352]	@ (80048a0 <_printf_i+0x234>)
 800473e:	230a      	movs	r3, #10
 8004740:	e011      	b.n	8004766 <_printf_i+0xfa>
 8004742:	6821      	ldr	r1, [r4, #0]
 8004744:	6833      	ldr	r3, [r6, #0]
 8004746:	0608      	lsls	r0, r1, #24
 8004748:	f853 5b04 	ldr.w	r5, [r3], #4
 800474c:	d402      	bmi.n	8004754 <_printf_i+0xe8>
 800474e:	0649      	lsls	r1, r1, #25
 8004750:	bf48      	it	mi
 8004752:	b2ad      	uxthmi	r5, r5
 8004754:	2f6f      	cmp	r7, #111	@ 0x6f
 8004756:	4852      	ldr	r0, [pc, #328]	@ (80048a0 <_printf_i+0x234>)
 8004758:	6033      	str	r3, [r6, #0]
 800475a:	bf14      	ite	ne
 800475c:	230a      	movne	r3, #10
 800475e:	2308      	moveq	r3, #8
 8004760:	2100      	movs	r1, #0
 8004762:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004766:	6866      	ldr	r6, [r4, #4]
 8004768:	60a6      	str	r6, [r4, #8]
 800476a:	2e00      	cmp	r6, #0
 800476c:	db05      	blt.n	800477a <_printf_i+0x10e>
 800476e:	6821      	ldr	r1, [r4, #0]
 8004770:	432e      	orrs	r6, r5
 8004772:	f021 0104 	bic.w	r1, r1, #4
 8004776:	6021      	str	r1, [r4, #0]
 8004778:	d04b      	beq.n	8004812 <_printf_i+0x1a6>
 800477a:	4616      	mov	r6, r2
 800477c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004780:	fb03 5711 	mls	r7, r3, r1, r5
 8004784:	5dc7      	ldrb	r7, [r0, r7]
 8004786:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800478a:	462f      	mov	r7, r5
 800478c:	42bb      	cmp	r3, r7
 800478e:	460d      	mov	r5, r1
 8004790:	d9f4      	bls.n	800477c <_printf_i+0x110>
 8004792:	2b08      	cmp	r3, #8
 8004794:	d10b      	bne.n	80047ae <_printf_i+0x142>
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	07df      	lsls	r7, r3, #31
 800479a:	d508      	bpl.n	80047ae <_printf_i+0x142>
 800479c:	6923      	ldr	r3, [r4, #16]
 800479e:	6861      	ldr	r1, [r4, #4]
 80047a0:	4299      	cmp	r1, r3
 80047a2:	bfde      	ittt	le
 80047a4:	2330      	movle	r3, #48	@ 0x30
 80047a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047ae:	1b92      	subs	r2, r2, r6
 80047b0:	6122      	str	r2, [r4, #16]
 80047b2:	f8cd a000 	str.w	sl, [sp]
 80047b6:	464b      	mov	r3, r9
 80047b8:	aa03      	add	r2, sp, #12
 80047ba:	4621      	mov	r1, r4
 80047bc:	4640      	mov	r0, r8
 80047be:	f7ff fee7 	bl	8004590 <_printf_common>
 80047c2:	3001      	adds	r0, #1
 80047c4:	d14a      	bne.n	800485c <_printf_i+0x1f0>
 80047c6:	f04f 30ff 	mov.w	r0, #4294967295
 80047ca:	b004      	add	sp, #16
 80047cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	f043 0320 	orr.w	r3, r3, #32
 80047d6:	6023      	str	r3, [r4, #0]
 80047d8:	4832      	ldr	r0, [pc, #200]	@ (80048a4 <_printf_i+0x238>)
 80047da:	2778      	movs	r7, #120	@ 0x78
 80047dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	6831      	ldr	r1, [r6, #0]
 80047e4:	061f      	lsls	r7, r3, #24
 80047e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80047ea:	d402      	bmi.n	80047f2 <_printf_i+0x186>
 80047ec:	065f      	lsls	r7, r3, #25
 80047ee:	bf48      	it	mi
 80047f0:	b2ad      	uxthmi	r5, r5
 80047f2:	6031      	str	r1, [r6, #0]
 80047f4:	07d9      	lsls	r1, r3, #31
 80047f6:	bf44      	itt	mi
 80047f8:	f043 0320 	orrmi.w	r3, r3, #32
 80047fc:	6023      	strmi	r3, [r4, #0]
 80047fe:	b11d      	cbz	r5, 8004808 <_printf_i+0x19c>
 8004800:	2310      	movs	r3, #16
 8004802:	e7ad      	b.n	8004760 <_printf_i+0xf4>
 8004804:	4826      	ldr	r0, [pc, #152]	@ (80048a0 <_printf_i+0x234>)
 8004806:	e7e9      	b.n	80047dc <_printf_i+0x170>
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	f023 0320 	bic.w	r3, r3, #32
 800480e:	6023      	str	r3, [r4, #0]
 8004810:	e7f6      	b.n	8004800 <_printf_i+0x194>
 8004812:	4616      	mov	r6, r2
 8004814:	e7bd      	b.n	8004792 <_printf_i+0x126>
 8004816:	6833      	ldr	r3, [r6, #0]
 8004818:	6825      	ldr	r5, [r4, #0]
 800481a:	6961      	ldr	r1, [r4, #20]
 800481c:	1d18      	adds	r0, r3, #4
 800481e:	6030      	str	r0, [r6, #0]
 8004820:	062e      	lsls	r6, r5, #24
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	d501      	bpl.n	800482a <_printf_i+0x1be>
 8004826:	6019      	str	r1, [r3, #0]
 8004828:	e002      	b.n	8004830 <_printf_i+0x1c4>
 800482a:	0668      	lsls	r0, r5, #25
 800482c:	d5fb      	bpl.n	8004826 <_printf_i+0x1ba>
 800482e:	8019      	strh	r1, [r3, #0]
 8004830:	2300      	movs	r3, #0
 8004832:	6123      	str	r3, [r4, #16]
 8004834:	4616      	mov	r6, r2
 8004836:	e7bc      	b.n	80047b2 <_printf_i+0x146>
 8004838:	6833      	ldr	r3, [r6, #0]
 800483a:	1d1a      	adds	r2, r3, #4
 800483c:	6032      	str	r2, [r6, #0]
 800483e:	681e      	ldr	r6, [r3, #0]
 8004840:	6862      	ldr	r2, [r4, #4]
 8004842:	2100      	movs	r1, #0
 8004844:	4630      	mov	r0, r6
 8004846:	f7fb fcc3 	bl	80001d0 <memchr>
 800484a:	b108      	cbz	r0, 8004850 <_printf_i+0x1e4>
 800484c:	1b80      	subs	r0, r0, r6
 800484e:	6060      	str	r0, [r4, #4]
 8004850:	6863      	ldr	r3, [r4, #4]
 8004852:	6123      	str	r3, [r4, #16]
 8004854:	2300      	movs	r3, #0
 8004856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800485a:	e7aa      	b.n	80047b2 <_printf_i+0x146>
 800485c:	6923      	ldr	r3, [r4, #16]
 800485e:	4632      	mov	r2, r6
 8004860:	4649      	mov	r1, r9
 8004862:	4640      	mov	r0, r8
 8004864:	47d0      	blx	sl
 8004866:	3001      	adds	r0, #1
 8004868:	d0ad      	beq.n	80047c6 <_printf_i+0x15a>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	079b      	lsls	r3, r3, #30
 800486e:	d413      	bmi.n	8004898 <_printf_i+0x22c>
 8004870:	68e0      	ldr	r0, [r4, #12]
 8004872:	9b03      	ldr	r3, [sp, #12]
 8004874:	4298      	cmp	r0, r3
 8004876:	bfb8      	it	lt
 8004878:	4618      	movlt	r0, r3
 800487a:	e7a6      	b.n	80047ca <_printf_i+0x15e>
 800487c:	2301      	movs	r3, #1
 800487e:	4632      	mov	r2, r6
 8004880:	4649      	mov	r1, r9
 8004882:	4640      	mov	r0, r8
 8004884:	47d0      	blx	sl
 8004886:	3001      	adds	r0, #1
 8004888:	d09d      	beq.n	80047c6 <_printf_i+0x15a>
 800488a:	3501      	adds	r5, #1
 800488c:	68e3      	ldr	r3, [r4, #12]
 800488e:	9903      	ldr	r1, [sp, #12]
 8004890:	1a5b      	subs	r3, r3, r1
 8004892:	42ab      	cmp	r3, r5
 8004894:	dcf2      	bgt.n	800487c <_printf_i+0x210>
 8004896:	e7eb      	b.n	8004870 <_printf_i+0x204>
 8004898:	2500      	movs	r5, #0
 800489a:	f104 0619 	add.w	r6, r4, #25
 800489e:	e7f5      	b.n	800488c <_printf_i+0x220>
 80048a0:	080061c1 	.word	0x080061c1
 80048a4:	080061d2 	.word	0x080061d2

080048a8 <memmove>:
 80048a8:	4288      	cmp	r0, r1
 80048aa:	b510      	push	{r4, lr}
 80048ac:	eb01 0402 	add.w	r4, r1, r2
 80048b0:	d902      	bls.n	80048b8 <memmove+0x10>
 80048b2:	4284      	cmp	r4, r0
 80048b4:	4623      	mov	r3, r4
 80048b6:	d807      	bhi.n	80048c8 <memmove+0x20>
 80048b8:	1e43      	subs	r3, r0, #1
 80048ba:	42a1      	cmp	r1, r4
 80048bc:	d008      	beq.n	80048d0 <memmove+0x28>
 80048be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048c6:	e7f8      	b.n	80048ba <memmove+0x12>
 80048c8:	4402      	add	r2, r0
 80048ca:	4601      	mov	r1, r0
 80048cc:	428a      	cmp	r2, r1
 80048ce:	d100      	bne.n	80048d2 <memmove+0x2a>
 80048d0:	bd10      	pop	{r4, pc}
 80048d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048da:	e7f7      	b.n	80048cc <memmove+0x24>

080048dc <_sbrk_r>:
 80048dc:	b538      	push	{r3, r4, r5, lr}
 80048de:	4d06      	ldr	r5, [pc, #24]	@ (80048f8 <_sbrk_r+0x1c>)
 80048e0:	2300      	movs	r3, #0
 80048e2:	4604      	mov	r4, r0
 80048e4:	4608      	mov	r0, r1
 80048e6:	602b      	str	r3, [r5, #0]
 80048e8:	f7fc fece 	bl	8001688 <_sbrk>
 80048ec:	1c43      	adds	r3, r0, #1
 80048ee:	d102      	bne.n	80048f6 <_sbrk_r+0x1a>
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	b103      	cbz	r3, 80048f6 <_sbrk_r+0x1a>
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	bd38      	pop	{r3, r4, r5, pc}
 80048f8:	200004bc 	.word	0x200004bc

080048fc <memcpy>:
 80048fc:	440a      	add	r2, r1
 80048fe:	4291      	cmp	r1, r2
 8004900:	f100 33ff 	add.w	r3, r0, #4294967295
 8004904:	d100      	bne.n	8004908 <memcpy+0xc>
 8004906:	4770      	bx	lr
 8004908:	b510      	push	{r4, lr}
 800490a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800490e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004912:	4291      	cmp	r1, r2
 8004914:	d1f9      	bne.n	800490a <memcpy+0xe>
 8004916:	bd10      	pop	{r4, pc}

08004918 <_realloc_r>:
 8004918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800491c:	4607      	mov	r7, r0
 800491e:	4614      	mov	r4, r2
 8004920:	460d      	mov	r5, r1
 8004922:	b921      	cbnz	r1, 800492e <_realloc_r+0x16>
 8004924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004928:	4611      	mov	r1, r2
 800492a:	f7ff bc4d 	b.w	80041c8 <_malloc_r>
 800492e:	b92a      	cbnz	r2, 800493c <_realloc_r+0x24>
 8004930:	f7ff fbde 	bl	80040f0 <_free_r>
 8004934:	4625      	mov	r5, r4
 8004936:	4628      	mov	r0, r5
 8004938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800493c:	f000 f81a 	bl	8004974 <_malloc_usable_size_r>
 8004940:	4284      	cmp	r4, r0
 8004942:	4606      	mov	r6, r0
 8004944:	d802      	bhi.n	800494c <_realloc_r+0x34>
 8004946:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800494a:	d8f4      	bhi.n	8004936 <_realloc_r+0x1e>
 800494c:	4621      	mov	r1, r4
 800494e:	4638      	mov	r0, r7
 8004950:	f7ff fc3a 	bl	80041c8 <_malloc_r>
 8004954:	4680      	mov	r8, r0
 8004956:	b908      	cbnz	r0, 800495c <_realloc_r+0x44>
 8004958:	4645      	mov	r5, r8
 800495a:	e7ec      	b.n	8004936 <_realloc_r+0x1e>
 800495c:	42b4      	cmp	r4, r6
 800495e:	4622      	mov	r2, r4
 8004960:	4629      	mov	r1, r5
 8004962:	bf28      	it	cs
 8004964:	4632      	movcs	r2, r6
 8004966:	f7ff ffc9 	bl	80048fc <memcpy>
 800496a:	4629      	mov	r1, r5
 800496c:	4638      	mov	r0, r7
 800496e:	f7ff fbbf 	bl	80040f0 <_free_r>
 8004972:	e7f1      	b.n	8004958 <_realloc_r+0x40>

08004974 <_malloc_usable_size_r>:
 8004974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004978:	1f18      	subs	r0, r3, #4
 800497a:	2b00      	cmp	r3, #0
 800497c:	bfbc      	itt	lt
 800497e:	580b      	ldrlt	r3, [r1, r0]
 8004980:	18c0      	addlt	r0, r0, r3
 8004982:	4770      	bx	lr
 8004984:	0000      	movs	r0, r0
	...

08004988 <sin>:
 8004988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800498a:	ec53 2b10 	vmov	r2, r3, d0
 800498e:	4826      	ldr	r0, [pc, #152]	@ (8004a28 <sin+0xa0>)
 8004990:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004994:	4281      	cmp	r1, r0
 8004996:	d807      	bhi.n	80049a8 <sin+0x20>
 8004998:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8004a20 <sin+0x98>
 800499c:	2000      	movs	r0, #0
 800499e:	b005      	add	sp, #20
 80049a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049a4:	f000 b970 	b.w	8004c88 <__kernel_sin>
 80049a8:	4820      	ldr	r0, [pc, #128]	@ (8004a2c <sin+0xa4>)
 80049aa:	4281      	cmp	r1, r0
 80049ac:	d908      	bls.n	80049c0 <sin+0x38>
 80049ae:	4610      	mov	r0, r2
 80049b0:	4619      	mov	r1, r3
 80049b2:	f7fb fc61 	bl	8000278 <__aeabi_dsub>
 80049b6:	ec41 0b10 	vmov	d0, r0, r1
 80049ba:	b005      	add	sp, #20
 80049bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80049c0:	4668      	mov	r0, sp
 80049c2:	f000 fa1d 	bl	8004e00 <__ieee754_rem_pio2>
 80049c6:	f000 0003 	and.w	r0, r0, #3
 80049ca:	2801      	cmp	r0, #1
 80049cc:	d00c      	beq.n	80049e8 <sin+0x60>
 80049ce:	2802      	cmp	r0, #2
 80049d0:	d011      	beq.n	80049f6 <sin+0x6e>
 80049d2:	b9e8      	cbnz	r0, 8004a10 <sin+0x88>
 80049d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80049d8:	ed9d 0b00 	vldr	d0, [sp]
 80049dc:	2001      	movs	r0, #1
 80049de:	f000 f953 	bl	8004c88 <__kernel_sin>
 80049e2:	ec51 0b10 	vmov	r0, r1, d0
 80049e6:	e7e6      	b.n	80049b6 <sin+0x2e>
 80049e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80049ec:	ed9d 0b00 	vldr	d0, [sp]
 80049f0:	f000 f882 	bl	8004af8 <__kernel_cos>
 80049f4:	e7f5      	b.n	80049e2 <sin+0x5a>
 80049f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80049fa:	ed9d 0b00 	vldr	d0, [sp]
 80049fe:	2001      	movs	r0, #1
 8004a00:	f000 f942 	bl	8004c88 <__kernel_sin>
 8004a04:	ec53 2b10 	vmov	r2, r3, d0
 8004a08:	4610      	mov	r0, r2
 8004a0a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004a0e:	e7d2      	b.n	80049b6 <sin+0x2e>
 8004a10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004a14:	ed9d 0b00 	vldr	d0, [sp]
 8004a18:	f000 f86e 	bl	8004af8 <__kernel_cos>
 8004a1c:	e7f2      	b.n	8004a04 <sin+0x7c>
 8004a1e:	bf00      	nop
	...
 8004a28:	3fe921fb 	.word	0x3fe921fb
 8004a2c:	7fefffff 	.word	0x7fefffff

08004a30 <powf>:
 8004a30:	b508      	push	{r3, lr}
 8004a32:	ed2d 8b04 	vpush	{d8-d9}
 8004a36:	eeb0 8a60 	vmov.f32	s16, s1
 8004a3a:	eeb0 9a40 	vmov.f32	s18, s0
 8004a3e:	f000 fbe3 	bl	8005208 <__ieee754_powf>
 8004a42:	eeb4 8a48 	vcmp.f32	s16, s16
 8004a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4a:	eef0 8a40 	vmov.f32	s17, s0
 8004a4e:	d63e      	bvs.n	8004ace <powf+0x9e>
 8004a50:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a58:	d112      	bne.n	8004a80 <powf+0x50>
 8004a5a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a62:	d039      	beq.n	8004ad8 <powf+0xa8>
 8004a64:	eeb0 0a48 	vmov.f32	s0, s16
 8004a68:	f000 f839 	bl	8004ade <finitef>
 8004a6c:	b378      	cbz	r0, 8004ace <powf+0x9e>
 8004a6e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a76:	d52a      	bpl.n	8004ace <powf+0x9e>
 8004a78:	f7ff fb0e 	bl	8004098 <__errno>
 8004a7c:	2322      	movs	r3, #34	@ 0x22
 8004a7e:	e014      	b.n	8004aaa <powf+0x7a>
 8004a80:	f000 f82d 	bl	8004ade <finitef>
 8004a84:	b998      	cbnz	r0, 8004aae <powf+0x7e>
 8004a86:	eeb0 0a49 	vmov.f32	s0, s18
 8004a8a:	f000 f828 	bl	8004ade <finitef>
 8004a8e:	b170      	cbz	r0, 8004aae <powf+0x7e>
 8004a90:	eeb0 0a48 	vmov.f32	s0, s16
 8004a94:	f000 f823 	bl	8004ade <finitef>
 8004a98:	b148      	cbz	r0, 8004aae <powf+0x7e>
 8004a9a:	eef4 8a68 	vcmp.f32	s17, s17
 8004a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa2:	d7e9      	bvc.n	8004a78 <powf+0x48>
 8004aa4:	f7ff faf8 	bl	8004098 <__errno>
 8004aa8:	2321      	movs	r3, #33	@ 0x21
 8004aaa:	6003      	str	r3, [r0, #0]
 8004aac:	e00f      	b.n	8004ace <powf+0x9e>
 8004aae:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab6:	d10a      	bne.n	8004ace <powf+0x9e>
 8004ab8:	eeb0 0a49 	vmov.f32	s0, s18
 8004abc:	f000 f80f 	bl	8004ade <finitef>
 8004ac0:	b128      	cbz	r0, 8004ace <powf+0x9e>
 8004ac2:	eeb0 0a48 	vmov.f32	s0, s16
 8004ac6:	f000 f80a 	bl	8004ade <finitef>
 8004aca:	2800      	cmp	r0, #0
 8004acc:	d1d4      	bne.n	8004a78 <powf+0x48>
 8004ace:	eeb0 0a68 	vmov.f32	s0, s17
 8004ad2:	ecbd 8b04 	vpop	{d8-d9}
 8004ad6:	bd08      	pop	{r3, pc}
 8004ad8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8004adc:	e7f7      	b.n	8004ace <powf+0x9e>

08004ade <finitef>:
 8004ade:	ee10 3a10 	vmov	r3, s0
 8004ae2:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8004ae6:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8004aea:	bfac      	ite	ge
 8004aec:	2000      	movge	r0, #0
 8004aee:	2001      	movlt	r0, #1
 8004af0:	4770      	bx	lr
 8004af2:	0000      	movs	r0, r0
 8004af4:	0000      	movs	r0, r0
	...

08004af8 <__kernel_cos>:
 8004af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afc:	ec57 6b10 	vmov	r6, r7, d0
 8004b00:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004b04:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8004b08:	ed8d 1b00 	vstr	d1, [sp]
 8004b0c:	d206      	bcs.n	8004b1c <__kernel_cos+0x24>
 8004b0e:	4630      	mov	r0, r6
 8004b10:	4639      	mov	r1, r7
 8004b12:	f7fc f803 	bl	8000b1c <__aeabi_d2iz>
 8004b16:	2800      	cmp	r0, #0
 8004b18:	f000 8088 	beq.w	8004c2c <__kernel_cos+0x134>
 8004b1c:	4632      	mov	r2, r6
 8004b1e:	463b      	mov	r3, r7
 8004b20:	4630      	mov	r0, r6
 8004b22:	4639      	mov	r1, r7
 8004b24:	f7fb fd60 	bl	80005e8 <__aeabi_dmul>
 8004b28:	4b51      	ldr	r3, [pc, #324]	@ (8004c70 <__kernel_cos+0x178>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	460d      	mov	r5, r1
 8004b30:	f7fb fd5a 	bl	80005e8 <__aeabi_dmul>
 8004b34:	a340      	add	r3, pc, #256	@ (adr r3, 8004c38 <__kernel_cos+0x140>)
 8004b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3a:	4682      	mov	sl, r0
 8004b3c:	468b      	mov	fp, r1
 8004b3e:	4620      	mov	r0, r4
 8004b40:	4629      	mov	r1, r5
 8004b42:	f7fb fd51 	bl	80005e8 <__aeabi_dmul>
 8004b46:	a33e      	add	r3, pc, #248	@ (adr r3, 8004c40 <__kernel_cos+0x148>)
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	f7fb fb96 	bl	800027c <__adddf3>
 8004b50:	4622      	mov	r2, r4
 8004b52:	462b      	mov	r3, r5
 8004b54:	f7fb fd48 	bl	80005e8 <__aeabi_dmul>
 8004b58:	a33b      	add	r3, pc, #236	@ (adr r3, 8004c48 <__kernel_cos+0x150>)
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	f7fb fb8b 	bl	8000278 <__aeabi_dsub>
 8004b62:	4622      	mov	r2, r4
 8004b64:	462b      	mov	r3, r5
 8004b66:	f7fb fd3f 	bl	80005e8 <__aeabi_dmul>
 8004b6a:	a339      	add	r3, pc, #228	@ (adr r3, 8004c50 <__kernel_cos+0x158>)
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	f7fb fb84 	bl	800027c <__adddf3>
 8004b74:	4622      	mov	r2, r4
 8004b76:	462b      	mov	r3, r5
 8004b78:	f7fb fd36 	bl	80005e8 <__aeabi_dmul>
 8004b7c:	a336      	add	r3, pc, #216	@ (adr r3, 8004c58 <__kernel_cos+0x160>)
 8004b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b82:	f7fb fb79 	bl	8000278 <__aeabi_dsub>
 8004b86:	4622      	mov	r2, r4
 8004b88:	462b      	mov	r3, r5
 8004b8a:	f7fb fd2d 	bl	80005e8 <__aeabi_dmul>
 8004b8e:	a334      	add	r3, pc, #208	@ (adr r3, 8004c60 <__kernel_cos+0x168>)
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f7fb fb72 	bl	800027c <__adddf3>
 8004b98:	4622      	mov	r2, r4
 8004b9a:	462b      	mov	r3, r5
 8004b9c:	f7fb fd24 	bl	80005e8 <__aeabi_dmul>
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	462b      	mov	r3, r5
 8004ba4:	f7fb fd20 	bl	80005e8 <__aeabi_dmul>
 8004ba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bac:	4604      	mov	r4, r0
 8004bae:	460d      	mov	r5, r1
 8004bb0:	4630      	mov	r0, r6
 8004bb2:	4639      	mov	r1, r7
 8004bb4:	f7fb fd18 	bl	80005e8 <__aeabi_dmul>
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f7fb fb5a 	bl	8000278 <__aeabi_dsub>
 8004bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c74 <__kernel_cos+0x17c>)
 8004bc6:	4598      	cmp	r8, r3
 8004bc8:	4606      	mov	r6, r0
 8004bca:	460f      	mov	r7, r1
 8004bcc:	d810      	bhi.n	8004bf0 <__kernel_cos+0xf8>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4650      	mov	r0, sl
 8004bd4:	4659      	mov	r1, fp
 8004bd6:	f7fb fb4f 	bl	8000278 <__aeabi_dsub>
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4926      	ldr	r1, [pc, #152]	@ (8004c78 <__kernel_cos+0x180>)
 8004bde:	4602      	mov	r2, r0
 8004be0:	2000      	movs	r0, #0
 8004be2:	f7fb fb49 	bl	8000278 <__aeabi_dsub>
 8004be6:	ec41 0b10 	vmov	d0, r0, r1
 8004bea:	b003      	add	sp, #12
 8004bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf0:	4b22      	ldr	r3, [pc, #136]	@ (8004c7c <__kernel_cos+0x184>)
 8004bf2:	4921      	ldr	r1, [pc, #132]	@ (8004c78 <__kernel_cos+0x180>)
 8004bf4:	4598      	cmp	r8, r3
 8004bf6:	bf8c      	ite	hi
 8004bf8:	4d21      	ldrhi	r5, [pc, #132]	@ (8004c80 <__kernel_cos+0x188>)
 8004bfa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8004bfe:	2400      	movs	r4, #0
 8004c00:	4622      	mov	r2, r4
 8004c02:	462b      	mov	r3, r5
 8004c04:	2000      	movs	r0, #0
 8004c06:	f7fb fb37 	bl	8000278 <__aeabi_dsub>
 8004c0a:	4622      	mov	r2, r4
 8004c0c:	4680      	mov	r8, r0
 8004c0e:	4689      	mov	r9, r1
 8004c10:	462b      	mov	r3, r5
 8004c12:	4650      	mov	r0, sl
 8004c14:	4659      	mov	r1, fp
 8004c16:	f7fb fb2f 	bl	8000278 <__aeabi_dsub>
 8004c1a:	4632      	mov	r2, r6
 8004c1c:	463b      	mov	r3, r7
 8004c1e:	f7fb fb2b 	bl	8000278 <__aeabi_dsub>
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	4640      	mov	r0, r8
 8004c28:	4649      	mov	r1, r9
 8004c2a:	e7da      	b.n	8004be2 <__kernel_cos+0xea>
 8004c2c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8004c68 <__kernel_cos+0x170>
 8004c30:	e7db      	b.n	8004bea <__kernel_cos+0xf2>
 8004c32:	bf00      	nop
 8004c34:	f3af 8000 	nop.w
 8004c38:	be8838d4 	.word	0xbe8838d4
 8004c3c:	bda8fae9 	.word	0xbda8fae9
 8004c40:	bdb4b1c4 	.word	0xbdb4b1c4
 8004c44:	3e21ee9e 	.word	0x3e21ee9e
 8004c48:	809c52ad 	.word	0x809c52ad
 8004c4c:	3e927e4f 	.word	0x3e927e4f
 8004c50:	19cb1590 	.word	0x19cb1590
 8004c54:	3efa01a0 	.word	0x3efa01a0
 8004c58:	16c15177 	.word	0x16c15177
 8004c5c:	3f56c16c 	.word	0x3f56c16c
 8004c60:	5555554c 	.word	0x5555554c
 8004c64:	3fa55555 	.word	0x3fa55555
 8004c68:	00000000 	.word	0x00000000
 8004c6c:	3ff00000 	.word	0x3ff00000
 8004c70:	3fe00000 	.word	0x3fe00000
 8004c74:	3fd33332 	.word	0x3fd33332
 8004c78:	3ff00000 	.word	0x3ff00000
 8004c7c:	3fe90000 	.word	0x3fe90000
 8004c80:	3fd20000 	.word	0x3fd20000
 8004c84:	00000000 	.word	0x00000000

08004c88 <__kernel_sin>:
 8004c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8c:	ec55 4b10 	vmov	r4, r5, d0
 8004c90:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004c94:	b085      	sub	sp, #20
 8004c96:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8004c9a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004c9e:	4680      	mov	r8, r0
 8004ca0:	d205      	bcs.n	8004cae <__kernel_sin+0x26>
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	f7fb ff39 	bl	8000b1c <__aeabi_d2iz>
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d052      	beq.n	8004d54 <__kernel_sin+0xcc>
 8004cae:	4622      	mov	r2, r4
 8004cb0:	462b      	mov	r3, r5
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	f7fb fc97 	bl	80005e8 <__aeabi_dmul>
 8004cba:	4682      	mov	sl, r0
 8004cbc:	468b      	mov	fp, r1
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	f7fb fc8f 	bl	80005e8 <__aeabi_dmul>
 8004cca:	a342      	add	r3, pc, #264	@ (adr r3, 8004dd4 <__kernel_sin+0x14c>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	e9cd 0100 	strd	r0, r1, [sp]
 8004cd4:	4650      	mov	r0, sl
 8004cd6:	4659      	mov	r1, fp
 8004cd8:	f7fb fc86 	bl	80005e8 <__aeabi_dmul>
 8004cdc:	a33f      	add	r3, pc, #252	@ (adr r3, 8004ddc <__kernel_sin+0x154>)
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	f7fb fac9 	bl	8000278 <__aeabi_dsub>
 8004ce6:	4652      	mov	r2, sl
 8004ce8:	465b      	mov	r3, fp
 8004cea:	f7fb fc7d 	bl	80005e8 <__aeabi_dmul>
 8004cee:	a33d      	add	r3, pc, #244	@ (adr r3, 8004de4 <__kernel_sin+0x15c>)
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f7fb fac2 	bl	800027c <__adddf3>
 8004cf8:	4652      	mov	r2, sl
 8004cfa:	465b      	mov	r3, fp
 8004cfc:	f7fb fc74 	bl	80005e8 <__aeabi_dmul>
 8004d00:	a33a      	add	r3, pc, #232	@ (adr r3, 8004dec <__kernel_sin+0x164>)
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f7fb fab7 	bl	8000278 <__aeabi_dsub>
 8004d0a:	4652      	mov	r2, sl
 8004d0c:	465b      	mov	r3, fp
 8004d0e:	f7fb fc6b 	bl	80005e8 <__aeabi_dmul>
 8004d12:	a338      	add	r3, pc, #224	@ (adr r3, 8004df4 <__kernel_sin+0x16c>)
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	f7fb fab0 	bl	800027c <__adddf3>
 8004d1c:	4606      	mov	r6, r0
 8004d1e:	460f      	mov	r7, r1
 8004d20:	f1b8 0f00 	cmp.w	r8, #0
 8004d24:	d11b      	bne.n	8004d5e <__kernel_sin+0xd6>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4650      	mov	r0, sl
 8004d2c:	4659      	mov	r1, fp
 8004d2e:	f7fb fc5b 	bl	80005e8 <__aeabi_dmul>
 8004d32:	a325      	add	r3, pc, #148	@ (adr r3, 8004dc8 <__kernel_sin+0x140>)
 8004d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d38:	f7fb fa9e 	bl	8000278 <__aeabi_dsub>
 8004d3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d40:	f7fb fc52 	bl	80005e8 <__aeabi_dmul>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4620      	mov	r0, r4
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	f7fb fa96 	bl	800027c <__adddf3>
 8004d50:	4604      	mov	r4, r0
 8004d52:	460d      	mov	r5, r1
 8004d54:	ec45 4b10 	vmov	d0, r4, r5
 8004d58:	b005      	add	sp, #20
 8004d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d62:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd0 <__kernel_sin+0x148>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	f7fb fc3f 	bl	80005e8 <__aeabi_dmul>
 8004d6a:	4632      	mov	r2, r6
 8004d6c:	4680      	mov	r8, r0
 8004d6e:	4689      	mov	r9, r1
 8004d70:	463b      	mov	r3, r7
 8004d72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d76:	f7fb fc37 	bl	80005e8 <__aeabi_dmul>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4640      	mov	r0, r8
 8004d80:	4649      	mov	r1, r9
 8004d82:	f7fb fa79 	bl	8000278 <__aeabi_dsub>
 8004d86:	4652      	mov	r2, sl
 8004d88:	465b      	mov	r3, fp
 8004d8a:	f7fb fc2d 	bl	80005e8 <__aeabi_dmul>
 8004d8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d92:	f7fb fa71 	bl	8000278 <__aeabi_dsub>
 8004d96:	a30c      	add	r3, pc, #48	@ (adr r3, 8004dc8 <__kernel_sin+0x140>)
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	4606      	mov	r6, r0
 8004d9e:	460f      	mov	r7, r1
 8004da0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004da4:	f7fb fc20 	bl	80005e8 <__aeabi_dmul>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4630      	mov	r0, r6
 8004dae:	4639      	mov	r1, r7
 8004db0:	f7fb fa64 	bl	800027c <__adddf3>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4620      	mov	r0, r4
 8004dba:	4629      	mov	r1, r5
 8004dbc:	f7fb fa5c 	bl	8000278 <__aeabi_dsub>
 8004dc0:	e7c6      	b.n	8004d50 <__kernel_sin+0xc8>
 8004dc2:	bf00      	nop
 8004dc4:	f3af 8000 	nop.w
 8004dc8:	55555549 	.word	0x55555549
 8004dcc:	3fc55555 	.word	0x3fc55555
 8004dd0:	3fe00000 	.word	0x3fe00000
 8004dd4:	5acfd57c 	.word	0x5acfd57c
 8004dd8:	3de5d93a 	.word	0x3de5d93a
 8004ddc:	8a2b9ceb 	.word	0x8a2b9ceb
 8004de0:	3e5ae5e6 	.word	0x3e5ae5e6
 8004de4:	57b1fe7d 	.word	0x57b1fe7d
 8004de8:	3ec71de3 	.word	0x3ec71de3
 8004dec:	19c161d5 	.word	0x19c161d5
 8004df0:	3f2a01a0 	.word	0x3f2a01a0
 8004df4:	1110f8a6 	.word	0x1110f8a6
 8004df8:	3f811111 	.word	0x3f811111
 8004dfc:	00000000 	.word	0x00000000

08004e00 <__ieee754_rem_pio2>:
 8004e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e04:	ec57 6b10 	vmov	r6, r7, d0
 8004e08:	4bc5      	ldr	r3, [pc, #788]	@ (8005120 <__ieee754_rem_pio2+0x320>)
 8004e0a:	b08d      	sub	sp, #52	@ 0x34
 8004e0c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004e10:	4598      	cmp	r8, r3
 8004e12:	4604      	mov	r4, r0
 8004e14:	9704      	str	r7, [sp, #16]
 8004e16:	d807      	bhi.n	8004e28 <__ieee754_rem_pio2+0x28>
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	ed80 0b00 	vstr	d0, [r0]
 8004e20:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004e24:	2500      	movs	r5, #0
 8004e26:	e028      	b.n	8004e7a <__ieee754_rem_pio2+0x7a>
 8004e28:	4bbe      	ldr	r3, [pc, #760]	@ (8005124 <__ieee754_rem_pio2+0x324>)
 8004e2a:	4598      	cmp	r8, r3
 8004e2c:	d878      	bhi.n	8004f20 <__ieee754_rem_pio2+0x120>
 8004e2e:	9b04      	ldr	r3, [sp, #16]
 8004e30:	4dbd      	ldr	r5, [pc, #756]	@ (8005128 <__ieee754_rem_pio2+0x328>)
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	4630      	mov	r0, r6
 8004e36:	a3ac      	add	r3, pc, #688	@ (adr r3, 80050e8 <__ieee754_rem_pio2+0x2e8>)
 8004e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3c:	4639      	mov	r1, r7
 8004e3e:	dd38      	ble.n	8004eb2 <__ieee754_rem_pio2+0xb2>
 8004e40:	f7fb fa1a 	bl	8000278 <__aeabi_dsub>
 8004e44:	45a8      	cmp	r8, r5
 8004e46:	4606      	mov	r6, r0
 8004e48:	460f      	mov	r7, r1
 8004e4a:	d01a      	beq.n	8004e82 <__ieee754_rem_pio2+0x82>
 8004e4c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80050f0 <__ieee754_rem_pio2+0x2f0>)
 8004e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e52:	f7fb fa11 	bl	8000278 <__aeabi_dsub>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4680      	mov	r8, r0
 8004e5c:	4689      	mov	r9, r1
 8004e5e:	4630      	mov	r0, r6
 8004e60:	4639      	mov	r1, r7
 8004e62:	f7fb fa09 	bl	8000278 <__aeabi_dsub>
 8004e66:	a3a2      	add	r3, pc, #648	@ (adr r3, 80050f0 <__ieee754_rem_pio2+0x2f0>)
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	f7fb fa04 	bl	8000278 <__aeabi_dsub>
 8004e70:	e9c4 8900 	strd	r8, r9, [r4]
 8004e74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004e78:	2501      	movs	r5, #1
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	b00d      	add	sp, #52	@ 0x34
 8004e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e82:	a39d      	add	r3, pc, #628	@ (adr r3, 80050f8 <__ieee754_rem_pio2+0x2f8>)
 8004e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e88:	f7fb f9f6 	bl	8000278 <__aeabi_dsub>
 8004e8c:	a39c      	add	r3, pc, #624	@ (adr r3, 8005100 <__ieee754_rem_pio2+0x300>)
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	4606      	mov	r6, r0
 8004e94:	460f      	mov	r7, r1
 8004e96:	f7fb f9ef 	bl	8000278 <__aeabi_dsub>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4680      	mov	r8, r0
 8004ea0:	4689      	mov	r9, r1
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	4639      	mov	r1, r7
 8004ea6:	f7fb f9e7 	bl	8000278 <__aeabi_dsub>
 8004eaa:	a395      	add	r3, pc, #596	@ (adr r3, 8005100 <__ieee754_rem_pio2+0x300>)
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	e7dc      	b.n	8004e6c <__ieee754_rem_pio2+0x6c>
 8004eb2:	f7fb f9e3 	bl	800027c <__adddf3>
 8004eb6:	45a8      	cmp	r8, r5
 8004eb8:	4606      	mov	r6, r0
 8004eba:	460f      	mov	r7, r1
 8004ebc:	d018      	beq.n	8004ef0 <__ieee754_rem_pio2+0xf0>
 8004ebe:	a38c      	add	r3, pc, #560	@ (adr r3, 80050f0 <__ieee754_rem_pio2+0x2f0>)
 8004ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec4:	f7fb f9da 	bl	800027c <__adddf3>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4680      	mov	r8, r0
 8004ece:	4689      	mov	r9, r1
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	4639      	mov	r1, r7
 8004ed4:	f7fb f9d0 	bl	8000278 <__aeabi_dsub>
 8004ed8:	a385      	add	r3, pc, #532	@ (adr r3, 80050f0 <__ieee754_rem_pio2+0x2f0>)
 8004eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ede:	f7fb f9cd 	bl	800027c <__adddf3>
 8004ee2:	f04f 35ff 	mov.w	r5, #4294967295
 8004ee6:	e9c4 8900 	strd	r8, r9, [r4]
 8004eea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004eee:	e7c4      	b.n	8004e7a <__ieee754_rem_pio2+0x7a>
 8004ef0:	a381      	add	r3, pc, #516	@ (adr r3, 80050f8 <__ieee754_rem_pio2+0x2f8>)
 8004ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef6:	f7fb f9c1 	bl	800027c <__adddf3>
 8004efa:	a381      	add	r3, pc, #516	@ (adr r3, 8005100 <__ieee754_rem_pio2+0x300>)
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	4606      	mov	r6, r0
 8004f02:	460f      	mov	r7, r1
 8004f04:	f7fb f9ba 	bl	800027c <__adddf3>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4680      	mov	r8, r0
 8004f0e:	4689      	mov	r9, r1
 8004f10:	4630      	mov	r0, r6
 8004f12:	4639      	mov	r1, r7
 8004f14:	f7fb f9b0 	bl	8000278 <__aeabi_dsub>
 8004f18:	a379      	add	r3, pc, #484	@ (adr r3, 8005100 <__ieee754_rem_pio2+0x300>)
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	e7de      	b.n	8004ede <__ieee754_rem_pio2+0xde>
 8004f20:	4b82      	ldr	r3, [pc, #520]	@ (800512c <__ieee754_rem_pio2+0x32c>)
 8004f22:	4598      	cmp	r8, r3
 8004f24:	f200 80d1 	bhi.w	80050ca <__ieee754_rem_pio2+0x2ca>
 8004f28:	f000 f966 	bl	80051f8 <fabs>
 8004f2c:	ec57 6b10 	vmov	r6, r7, d0
 8004f30:	a375      	add	r3, pc, #468	@ (adr r3, 8005108 <__ieee754_rem_pio2+0x308>)
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	4630      	mov	r0, r6
 8004f38:	4639      	mov	r1, r7
 8004f3a:	f7fb fb55 	bl	80005e8 <__aeabi_dmul>
 8004f3e:	4b7c      	ldr	r3, [pc, #496]	@ (8005130 <__ieee754_rem_pio2+0x330>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	f7fb f99b 	bl	800027c <__adddf3>
 8004f46:	f7fb fde9 	bl	8000b1c <__aeabi_d2iz>
 8004f4a:	4605      	mov	r5, r0
 8004f4c:	f7fb fae2 	bl	8000514 <__aeabi_i2d>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f58:	a363      	add	r3, pc, #396	@ (adr r3, 80050e8 <__ieee754_rem_pio2+0x2e8>)
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	f7fb fb43 	bl	80005e8 <__aeabi_dmul>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4630      	mov	r0, r6
 8004f68:	4639      	mov	r1, r7
 8004f6a:	f7fb f985 	bl	8000278 <__aeabi_dsub>
 8004f6e:	a360      	add	r3, pc, #384	@ (adr r3, 80050f0 <__ieee754_rem_pio2+0x2f0>)
 8004f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f74:	4682      	mov	sl, r0
 8004f76:	468b      	mov	fp, r1
 8004f78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f7c:	f7fb fb34 	bl	80005e8 <__aeabi_dmul>
 8004f80:	2d1f      	cmp	r5, #31
 8004f82:	4606      	mov	r6, r0
 8004f84:	460f      	mov	r7, r1
 8004f86:	dc0c      	bgt.n	8004fa2 <__ieee754_rem_pio2+0x1a2>
 8004f88:	4b6a      	ldr	r3, [pc, #424]	@ (8005134 <__ieee754_rem_pio2+0x334>)
 8004f8a:	1e6a      	subs	r2, r5, #1
 8004f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f90:	4543      	cmp	r3, r8
 8004f92:	d006      	beq.n	8004fa2 <__ieee754_rem_pio2+0x1a2>
 8004f94:	4632      	mov	r2, r6
 8004f96:	463b      	mov	r3, r7
 8004f98:	4650      	mov	r0, sl
 8004f9a:	4659      	mov	r1, fp
 8004f9c:	f7fb f96c 	bl	8000278 <__aeabi_dsub>
 8004fa0:	e00e      	b.n	8004fc0 <__ieee754_rem_pio2+0x1c0>
 8004fa2:	463b      	mov	r3, r7
 8004fa4:	4632      	mov	r2, r6
 8004fa6:	4650      	mov	r0, sl
 8004fa8:	4659      	mov	r1, fp
 8004faa:	f7fb f965 	bl	8000278 <__aeabi_dsub>
 8004fae:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004fb2:	9305      	str	r3, [sp, #20]
 8004fb4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004fb8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	dc02      	bgt.n	8004fc6 <__ieee754_rem_pio2+0x1c6>
 8004fc0:	e9c4 0100 	strd	r0, r1, [r4]
 8004fc4:	e039      	b.n	800503a <__ieee754_rem_pio2+0x23a>
 8004fc6:	a34c      	add	r3, pc, #304	@ (adr r3, 80050f8 <__ieee754_rem_pio2+0x2f8>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fd0:	f7fb fb0a 	bl	80005e8 <__aeabi_dmul>
 8004fd4:	4606      	mov	r6, r0
 8004fd6:	460f      	mov	r7, r1
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4650      	mov	r0, sl
 8004fde:	4659      	mov	r1, fp
 8004fe0:	f7fb f94a 	bl	8000278 <__aeabi_dsub>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4680      	mov	r8, r0
 8004fea:	4689      	mov	r9, r1
 8004fec:	4650      	mov	r0, sl
 8004fee:	4659      	mov	r1, fp
 8004ff0:	f7fb f942 	bl	8000278 <__aeabi_dsub>
 8004ff4:	4632      	mov	r2, r6
 8004ff6:	463b      	mov	r3, r7
 8004ff8:	f7fb f93e 	bl	8000278 <__aeabi_dsub>
 8004ffc:	a340      	add	r3, pc, #256	@ (adr r3, 8005100 <__ieee754_rem_pio2+0x300>)
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	4606      	mov	r6, r0
 8005004:	460f      	mov	r7, r1
 8005006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800500a:	f7fb faed 	bl	80005e8 <__aeabi_dmul>
 800500e:	4632      	mov	r2, r6
 8005010:	463b      	mov	r3, r7
 8005012:	f7fb f931 	bl	8000278 <__aeabi_dsub>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4606      	mov	r6, r0
 800501c:	460f      	mov	r7, r1
 800501e:	4640      	mov	r0, r8
 8005020:	4649      	mov	r1, r9
 8005022:	f7fb f929 	bl	8000278 <__aeabi_dsub>
 8005026:	9a05      	ldr	r2, [sp, #20]
 8005028:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b31      	cmp	r3, #49	@ 0x31
 8005030:	dc20      	bgt.n	8005074 <__ieee754_rem_pio2+0x274>
 8005032:	e9c4 0100 	strd	r0, r1, [r4]
 8005036:	46c2      	mov	sl, r8
 8005038:	46cb      	mov	fp, r9
 800503a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800503e:	4650      	mov	r0, sl
 8005040:	4642      	mov	r2, r8
 8005042:	464b      	mov	r3, r9
 8005044:	4659      	mov	r1, fp
 8005046:	f7fb f917 	bl	8000278 <__aeabi_dsub>
 800504a:	463b      	mov	r3, r7
 800504c:	4632      	mov	r2, r6
 800504e:	f7fb f913 	bl	8000278 <__aeabi_dsub>
 8005052:	9b04      	ldr	r3, [sp, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800505a:	f6bf af0e 	bge.w	8004e7a <__ieee754_rem_pio2+0x7a>
 800505e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005062:	6063      	str	r3, [r4, #4]
 8005064:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005068:	f8c4 8000 	str.w	r8, [r4]
 800506c:	60a0      	str	r0, [r4, #8]
 800506e:	60e3      	str	r3, [r4, #12]
 8005070:	426d      	negs	r5, r5
 8005072:	e702      	b.n	8004e7a <__ieee754_rem_pio2+0x7a>
 8005074:	a326      	add	r3, pc, #152	@ (adr r3, 8005110 <__ieee754_rem_pio2+0x310>)
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800507e:	f7fb fab3 	bl	80005e8 <__aeabi_dmul>
 8005082:	4606      	mov	r6, r0
 8005084:	460f      	mov	r7, r1
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4640      	mov	r0, r8
 800508c:	4649      	mov	r1, r9
 800508e:	f7fb f8f3 	bl	8000278 <__aeabi_dsub>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4682      	mov	sl, r0
 8005098:	468b      	mov	fp, r1
 800509a:	4640      	mov	r0, r8
 800509c:	4649      	mov	r1, r9
 800509e:	f7fb f8eb 	bl	8000278 <__aeabi_dsub>
 80050a2:	4632      	mov	r2, r6
 80050a4:	463b      	mov	r3, r7
 80050a6:	f7fb f8e7 	bl	8000278 <__aeabi_dsub>
 80050aa:	a31b      	add	r3, pc, #108	@ (adr r3, 8005118 <__ieee754_rem_pio2+0x318>)
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	4606      	mov	r6, r0
 80050b2:	460f      	mov	r7, r1
 80050b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050b8:	f7fb fa96 	bl	80005e8 <__aeabi_dmul>
 80050bc:	4632      	mov	r2, r6
 80050be:	463b      	mov	r3, r7
 80050c0:	f7fb f8da 	bl	8000278 <__aeabi_dsub>
 80050c4:	4606      	mov	r6, r0
 80050c6:	460f      	mov	r7, r1
 80050c8:	e764      	b.n	8004f94 <__ieee754_rem_pio2+0x194>
 80050ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005138 <__ieee754_rem_pio2+0x338>)
 80050cc:	4598      	cmp	r8, r3
 80050ce:	d935      	bls.n	800513c <__ieee754_rem_pio2+0x33c>
 80050d0:	4632      	mov	r2, r6
 80050d2:	463b      	mov	r3, r7
 80050d4:	4630      	mov	r0, r6
 80050d6:	4639      	mov	r1, r7
 80050d8:	f7fb f8ce 	bl	8000278 <__aeabi_dsub>
 80050dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80050e0:	e9c4 0100 	strd	r0, r1, [r4]
 80050e4:	e69e      	b.n	8004e24 <__ieee754_rem_pio2+0x24>
 80050e6:	bf00      	nop
 80050e8:	54400000 	.word	0x54400000
 80050ec:	3ff921fb 	.word	0x3ff921fb
 80050f0:	1a626331 	.word	0x1a626331
 80050f4:	3dd0b461 	.word	0x3dd0b461
 80050f8:	1a600000 	.word	0x1a600000
 80050fc:	3dd0b461 	.word	0x3dd0b461
 8005100:	2e037073 	.word	0x2e037073
 8005104:	3ba3198a 	.word	0x3ba3198a
 8005108:	6dc9c883 	.word	0x6dc9c883
 800510c:	3fe45f30 	.word	0x3fe45f30
 8005110:	2e000000 	.word	0x2e000000
 8005114:	3ba3198a 	.word	0x3ba3198a
 8005118:	252049c1 	.word	0x252049c1
 800511c:	397b839a 	.word	0x397b839a
 8005120:	3fe921fb 	.word	0x3fe921fb
 8005124:	4002d97b 	.word	0x4002d97b
 8005128:	3ff921fb 	.word	0x3ff921fb
 800512c:	413921fb 	.word	0x413921fb
 8005130:	3fe00000 	.word	0x3fe00000
 8005134:	080061e4 	.word	0x080061e4
 8005138:	7fefffff 	.word	0x7fefffff
 800513c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005140:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8005144:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005148:	4630      	mov	r0, r6
 800514a:	460f      	mov	r7, r1
 800514c:	f7fb fce6 	bl	8000b1c <__aeabi_d2iz>
 8005150:	f7fb f9e0 	bl	8000514 <__aeabi_i2d>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4630      	mov	r0, r6
 800515a:	4639      	mov	r1, r7
 800515c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005160:	f7fb f88a 	bl	8000278 <__aeabi_dsub>
 8005164:	4b22      	ldr	r3, [pc, #136]	@ (80051f0 <__ieee754_rem_pio2+0x3f0>)
 8005166:	2200      	movs	r2, #0
 8005168:	f7fb fa3e 	bl	80005e8 <__aeabi_dmul>
 800516c:	460f      	mov	r7, r1
 800516e:	4606      	mov	r6, r0
 8005170:	f7fb fcd4 	bl	8000b1c <__aeabi_d2iz>
 8005174:	f7fb f9ce 	bl	8000514 <__aeabi_i2d>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4630      	mov	r0, r6
 800517e:	4639      	mov	r1, r7
 8005180:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005184:	f7fb f878 	bl	8000278 <__aeabi_dsub>
 8005188:	4b19      	ldr	r3, [pc, #100]	@ (80051f0 <__ieee754_rem_pio2+0x3f0>)
 800518a:	2200      	movs	r2, #0
 800518c:	f7fb fa2c 	bl	80005e8 <__aeabi_dmul>
 8005190:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005194:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005198:	f04f 0803 	mov.w	r8, #3
 800519c:	2600      	movs	r6, #0
 800519e:	2700      	movs	r7, #0
 80051a0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80051a4:	4632      	mov	r2, r6
 80051a6:	463b      	mov	r3, r7
 80051a8:	46c2      	mov	sl, r8
 80051aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80051ae:	f7fb fc83 	bl	8000ab8 <__aeabi_dcmpeq>
 80051b2:	2800      	cmp	r0, #0
 80051b4:	d1f4      	bne.n	80051a0 <__ieee754_rem_pio2+0x3a0>
 80051b6:	4b0f      	ldr	r3, [pc, #60]	@ (80051f4 <__ieee754_rem_pio2+0x3f4>)
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	2302      	movs	r3, #2
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	462a      	mov	r2, r5
 80051c0:	4653      	mov	r3, sl
 80051c2:	4621      	mov	r1, r4
 80051c4:	a806      	add	r0, sp, #24
 80051c6:	f000 fb87 	bl	80058d8 <__kernel_rem_pio2>
 80051ca:	9b04      	ldr	r3, [sp, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	4605      	mov	r5, r0
 80051d0:	f6bf ae53 	bge.w	8004e7a <__ieee754_rem_pio2+0x7a>
 80051d4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80051d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80051dc:	e9c4 2300 	strd	r2, r3, [r4]
 80051e0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80051e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80051e8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80051ec:	e740      	b.n	8005070 <__ieee754_rem_pio2+0x270>
 80051ee:	bf00      	nop
 80051f0:	41700000 	.word	0x41700000
 80051f4:	08006264 	.word	0x08006264

080051f8 <fabs>:
 80051f8:	ec51 0b10 	vmov	r0, r1, d0
 80051fc:	4602      	mov	r2, r0
 80051fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005202:	ec43 2b10 	vmov	d0, r2, r3
 8005206:	4770      	bx	lr

08005208 <__ieee754_powf>:
 8005208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800520c:	ee10 4a90 	vmov	r4, s1
 8005210:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8005214:	ed2d 8b02 	vpush	{d8}
 8005218:	ee10 6a10 	vmov	r6, s0
 800521c:	eeb0 8a40 	vmov.f32	s16, s0
 8005220:	eef0 8a60 	vmov.f32	s17, s1
 8005224:	d10c      	bne.n	8005240 <__ieee754_powf+0x38>
 8005226:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800522a:	0076      	lsls	r6, r6, #1
 800522c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8005230:	f240 8274 	bls.w	800571c <__ieee754_powf+0x514>
 8005234:	ee38 0a28 	vadd.f32	s0, s16, s17
 8005238:	ecbd 8b02 	vpop	{d8}
 800523c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005240:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8005244:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8005248:	d802      	bhi.n	8005250 <__ieee754_powf+0x48>
 800524a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800524e:	d908      	bls.n	8005262 <__ieee754_powf+0x5a>
 8005250:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8005254:	d1ee      	bne.n	8005234 <__ieee754_powf+0x2c>
 8005256:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800525a:	0064      	lsls	r4, r4, #1
 800525c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8005260:	e7e6      	b.n	8005230 <__ieee754_powf+0x28>
 8005262:	2e00      	cmp	r6, #0
 8005264:	da1f      	bge.n	80052a6 <__ieee754_powf+0x9e>
 8005266:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800526a:	f080 8260 	bcs.w	800572e <__ieee754_powf+0x526>
 800526e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8005272:	d32f      	bcc.n	80052d4 <__ieee754_powf+0xcc>
 8005274:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8005278:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800527c:	fa49 f503 	asr.w	r5, r9, r3
 8005280:	fa05 f303 	lsl.w	r3, r5, r3
 8005284:	454b      	cmp	r3, r9
 8005286:	d123      	bne.n	80052d0 <__ieee754_powf+0xc8>
 8005288:	f005 0501 	and.w	r5, r5, #1
 800528c:	f1c5 0502 	rsb	r5, r5, #2
 8005290:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8005294:	d11f      	bne.n	80052d6 <__ieee754_powf+0xce>
 8005296:	2c00      	cmp	r4, #0
 8005298:	f280 8246 	bge.w	8005728 <__ieee754_powf+0x520>
 800529c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80052a0:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80052a4:	e7c8      	b.n	8005238 <__ieee754_powf+0x30>
 80052a6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80052aa:	d111      	bne.n	80052d0 <__ieee754_powf+0xc8>
 80052ac:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80052b0:	f000 8234 	beq.w	800571c <__ieee754_powf+0x514>
 80052b4:	d906      	bls.n	80052c4 <__ieee754_powf+0xbc>
 80052b6:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80055cc <__ieee754_powf+0x3c4>
 80052ba:	2c00      	cmp	r4, #0
 80052bc:	bfa8      	it	ge
 80052be:	eeb0 0a68 	vmovge.f32	s0, s17
 80052c2:	e7b9      	b.n	8005238 <__ieee754_powf+0x30>
 80052c4:	2c00      	cmp	r4, #0
 80052c6:	f280 822c 	bge.w	8005722 <__ieee754_powf+0x51a>
 80052ca:	eeb1 0a68 	vneg.f32	s0, s17
 80052ce:	e7b3      	b.n	8005238 <__ieee754_powf+0x30>
 80052d0:	2500      	movs	r5, #0
 80052d2:	e7dd      	b.n	8005290 <__ieee754_powf+0x88>
 80052d4:	2500      	movs	r5, #0
 80052d6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80052da:	d102      	bne.n	80052e2 <__ieee754_powf+0xda>
 80052dc:	ee28 0a08 	vmul.f32	s0, s16, s16
 80052e0:	e7aa      	b.n	8005238 <__ieee754_powf+0x30>
 80052e2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80052e6:	f040 8227 	bne.w	8005738 <__ieee754_powf+0x530>
 80052ea:	2e00      	cmp	r6, #0
 80052ec:	f2c0 8224 	blt.w	8005738 <__ieee754_powf+0x530>
 80052f0:	eeb0 0a48 	vmov.f32	s0, s16
 80052f4:	ecbd 8b02 	vpop	{d8}
 80052f8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052fc:	f000 bae6 	b.w	80058cc <__ieee754_sqrtf>
 8005300:	2d01      	cmp	r5, #1
 8005302:	d199      	bne.n	8005238 <__ieee754_powf+0x30>
 8005304:	eeb1 0a40 	vneg.f32	s0, s0
 8005308:	e796      	b.n	8005238 <__ieee754_powf+0x30>
 800530a:	0ff0      	lsrs	r0, r6, #31
 800530c:	3801      	subs	r0, #1
 800530e:	ea55 0300 	orrs.w	r3, r5, r0
 8005312:	d104      	bne.n	800531e <__ieee754_powf+0x116>
 8005314:	ee38 8a48 	vsub.f32	s16, s16, s16
 8005318:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800531c:	e78c      	b.n	8005238 <__ieee754_powf+0x30>
 800531e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8005322:	d96d      	bls.n	8005400 <__ieee754_powf+0x1f8>
 8005324:	4baa      	ldr	r3, [pc, #680]	@ (80055d0 <__ieee754_powf+0x3c8>)
 8005326:	4598      	cmp	r8, r3
 8005328:	d808      	bhi.n	800533c <__ieee754_powf+0x134>
 800532a:	2c00      	cmp	r4, #0
 800532c:	da0b      	bge.n	8005346 <__ieee754_powf+0x13e>
 800532e:	2000      	movs	r0, #0
 8005330:	ecbd 8b02 	vpop	{d8}
 8005334:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005338:	f000 bac2 	b.w	80058c0 <__math_oflowf>
 800533c:	4ba5      	ldr	r3, [pc, #660]	@ (80055d4 <__ieee754_powf+0x3cc>)
 800533e:	4598      	cmp	r8, r3
 8005340:	d908      	bls.n	8005354 <__ieee754_powf+0x14c>
 8005342:	2c00      	cmp	r4, #0
 8005344:	dcf3      	bgt.n	800532e <__ieee754_powf+0x126>
 8005346:	2000      	movs	r0, #0
 8005348:	ecbd 8b02 	vpop	{d8}
 800534c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005350:	f000 bab0 	b.w	80058b4 <__math_uflowf>
 8005354:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005358:	ee30 0a67 	vsub.f32	s0, s0, s15
 800535c:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80055d8 <__ieee754_powf+0x3d0>
 8005360:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8005364:	eee0 6a67 	vfms.f32	s13, s0, s15
 8005368:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800536c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8005370:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005374:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80055dc <__ieee754_powf+0x3d4>
 8005378:	ee27 7a27 	vmul.f32	s14, s14, s15
 800537c:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80055e0 <__ieee754_powf+0x3d8>
 8005380:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8005384:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80055e4 <__ieee754_powf+0x3dc>
 8005388:	eee0 7a07 	vfma.f32	s15, s0, s14
 800538c:	eeb0 7a67 	vmov.f32	s14, s15
 8005390:	eea0 7a26 	vfma.f32	s14, s0, s13
 8005394:	ee17 3a10 	vmov	r3, s14
 8005398:	f36f 030b 	bfc	r3, #0, #12
 800539c:	ee07 3a10 	vmov	s14, r3
 80053a0:	eeb0 6a47 	vmov.f32	s12, s14
 80053a4:	eea0 6a66 	vfms.f32	s12, s0, s13
 80053a8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80053ac:	3d01      	subs	r5, #1
 80053ae:	4305      	orrs	r5, r0
 80053b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053b4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80053b8:	f36f 040b 	bfc	r4, #0, #12
 80053bc:	bf18      	it	ne
 80053be:	eeb0 8a66 	vmovne.f32	s16, s13
 80053c2:	ee06 4a90 	vmov	s13, r4
 80053c6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80053ca:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80053ce:	ee67 7a26 	vmul.f32	s15, s14, s13
 80053d2:	eee6 0a07 	vfma.f32	s1, s12, s14
 80053d6:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80053da:	ee17 1a10 	vmov	r1, s14
 80053de:	2900      	cmp	r1, #0
 80053e0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80053e4:	f340 80dd 	ble.w	80055a2 <__ieee754_powf+0x39a>
 80053e8:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80053ec:	f240 80ca 	bls.w	8005584 <__ieee754_powf+0x37c>
 80053f0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80053f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f8:	bf4c      	ite	mi
 80053fa:	2001      	movmi	r0, #1
 80053fc:	2000      	movpl	r0, #0
 80053fe:	e797      	b.n	8005330 <__ieee754_powf+0x128>
 8005400:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8005404:	bf01      	itttt	eq
 8005406:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80055e8 <__ieee754_powf+0x3e0>
 800540a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800540e:	f06f 0317 	mvneq.w	r3, #23
 8005412:	ee17 7a90 	vmoveq	r7, s15
 8005416:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800541a:	bf18      	it	ne
 800541c:	2300      	movne	r3, #0
 800541e:	3a7f      	subs	r2, #127	@ 0x7f
 8005420:	441a      	add	r2, r3
 8005422:	4b72      	ldr	r3, [pc, #456]	@ (80055ec <__ieee754_powf+0x3e4>)
 8005424:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8005428:	429f      	cmp	r7, r3
 800542a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800542e:	dd06      	ble.n	800543e <__ieee754_powf+0x236>
 8005430:	4b6f      	ldr	r3, [pc, #444]	@ (80055f0 <__ieee754_powf+0x3e8>)
 8005432:	429f      	cmp	r7, r3
 8005434:	f340 80a4 	ble.w	8005580 <__ieee754_powf+0x378>
 8005438:	3201      	adds	r2, #1
 800543a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800543e:	2600      	movs	r6, #0
 8005440:	4b6c      	ldr	r3, [pc, #432]	@ (80055f4 <__ieee754_powf+0x3ec>)
 8005442:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8005446:	ee07 1a10 	vmov	s14, r1
 800544a:	edd3 5a00 	vldr	s11, [r3]
 800544e:	4b6a      	ldr	r3, [pc, #424]	@ (80055f8 <__ieee754_powf+0x3f0>)
 8005450:	ee75 7a87 	vadd.f32	s15, s11, s14
 8005454:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005458:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800545c:	1049      	asrs	r1, r1, #1
 800545e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8005462:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8005466:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800546a:	ee37 6a65 	vsub.f32	s12, s14, s11
 800546e:	ee07 1a90 	vmov	s15, r1
 8005472:	ee26 5a24 	vmul.f32	s10, s12, s9
 8005476:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800547a:	ee15 7a10 	vmov	r7, s10
 800547e:	401f      	ands	r7, r3
 8005480:	ee06 7a90 	vmov	s13, r7
 8005484:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8005488:	ee37 7a65 	vsub.f32	s14, s14, s11
 800548c:	ee65 7a05 	vmul.f32	s15, s10, s10
 8005490:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8005494:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80055fc <__ieee754_powf+0x3f4>
 8005498:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8005600 <__ieee754_powf+0x3f8>
 800549c:	eee7 5a87 	vfma.f32	s11, s15, s14
 80054a0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005604 <__ieee754_powf+0x3fc>
 80054a4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80054a8:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80055d8 <__ieee754_powf+0x3d0>
 80054ac:	eee7 5a27 	vfma.f32	s11, s14, s15
 80054b0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8005608 <__ieee754_powf+0x400>
 80054b4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80054b8:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800560c <__ieee754_powf+0x404>
 80054bc:	ee26 6a24 	vmul.f32	s12, s12, s9
 80054c0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80054c4:	ee35 7a26 	vadd.f32	s14, s10, s13
 80054c8:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80054cc:	ee27 7a06 	vmul.f32	s14, s14, s12
 80054d0:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80054d4:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80054d8:	eef0 5a67 	vmov.f32	s11, s15
 80054dc:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80054e0:	ee75 5a87 	vadd.f32	s11, s11, s14
 80054e4:	ee15 1a90 	vmov	r1, s11
 80054e8:	4019      	ands	r1, r3
 80054ea:	ee05 1a90 	vmov	s11, r1
 80054ee:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80054f2:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80054f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054fa:	ee67 7a85 	vmul.f32	s15, s15, s10
 80054fe:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005502:	eeb0 6a67 	vmov.f32	s12, s15
 8005506:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800550a:	ee16 1a10 	vmov	r1, s12
 800550e:	4019      	ands	r1, r3
 8005510:	ee06 1a10 	vmov	s12, r1
 8005514:	eeb0 7a46 	vmov.f32	s14, s12
 8005518:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800551c:	493c      	ldr	r1, [pc, #240]	@ (8005610 <__ieee754_powf+0x408>)
 800551e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8005522:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005526:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8005614 <__ieee754_powf+0x40c>
 800552a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8005618 <__ieee754_powf+0x410>
 800552e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005532:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800561c <__ieee754_powf+0x414>
 8005536:	eee6 7a07 	vfma.f32	s15, s12, s14
 800553a:	ed91 7a00 	vldr	s14, [r1]
 800553e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005542:	ee07 2a10 	vmov	s14, r2
 8005546:	4a36      	ldr	r2, [pc, #216]	@ (8005620 <__ieee754_powf+0x418>)
 8005548:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800554c:	eeb0 7a67 	vmov.f32	s14, s15
 8005550:	eea6 7a25 	vfma.f32	s14, s12, s11
 8005554:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8005558:	ed92 5a00 	vldr	s10, [r2]
 800555c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005560:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005564:	ee17 2a10 	vmov	r2, s14
 8005568:	401a      	ands	r2, r3
 800556a:	ee07 2a10 	vmov	s14, r2
 800556e:	ee77 6a66 	vsub.f32	s13, s14, s13
 8005572:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8005576:	eee6 6a65 	vfms.f32	s13, s12, s11
 800557a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800557e:	e715      	b.n	80053ac <__ieee754_powf+0x1a4>
 8005580:	2601      	movs	r6, #1
 8005582:	e75d      	b.n	8005440 <__ieee754_powf+0x238>
 8005584:	d152      	bne.n	800562c <__ieee754_powf+0x424>
 8005586:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8005624 <__ieee754_powf+0x41c>
 800558a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800558e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8005592:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559a:	f73f af29 	bgt.w	80053f0 <__ieee754_powf+0x1e8>
 800559e:	2386      	movs	r3, #134	@ 0x86
 80055a0:	e048      	b.n	8005634 <__ieee754_powf+0x42c>
 80055a2:	4a21      	ldr	r2, [pc, #132]	@ (8005628 <__ieee754_powf+0x420>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d907      	bls.n	80055b8 <__ieee754_powf+0x3b0>
 80055a8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80055ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b0:	bf4c      	ite	mi
 80055b2:	2001      	movmi	r0, #1
 80055b4:	2000      	movpl	r0, #0
 80055b6:	e6c7      	b.n	8005348 <__ieee754_powf+0x140>
 80055b8:	d138      	bne.n	800562c <__ieee754_powf+0x424>
 80055ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055be:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80055c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c6:	dbea      	blt.n	800559e <__ieee754_powf+0x396>
 80055c8:	e7ee      	b.n	80055a8 <__ieee754_powf+0x3a0>
 80055ca:	bf00      	nop
 80055cc:	00000000 	.word	0x00000000
 80055d0:	3f7ffff3 	.word	0x3f7ffff3
 80055d4:	3f800007 	.word	0x3f800007
 80055d8:	3eaaaaab 	.word	0x3eaaaaab
 80055dc:	3fb8aa00 	.word	0x3fb8aa00
 80055e0:	3fb8aa3b 	.word	0x3fb8aa3b
 80055e4:	36eca570 	.word	0x36eca570
 80055e8:	4b800000 	.word	0x4b800000
 80055ec:	001cc471 	.word	0x001cc471
 80055f0:	005db3d6 	.word	0x005db3d6
 80055f4:	0800637c 	.word	0x0800637c
 80055f8:	fffff000 	.word	0xfffff000
 80055fc:	3e6c3255 	.word	0x3e6c3255
 8005600:	3e53f142 	.word	0x3e53f142
 8005604:	3e8ba305 	.word	0x3e8ba305
 8005608:	3edb6db7 	.word	0x3edb6db7
 800560c:	3f19999a 	.word	0x3f19999a
 8005610:	0800636c 	.word	0x0800636c
 8005614:	3f76384f 	.word	0x3f76384f
 8005618:	3f763800 	.word	0x3f763800
 800561c:	369dc3a0 	.word	0x369dc3a0
 8005620:	08006374 	.word	0x08006374
 8005624:	3338aa3c 	.word	0x3338aa3c
 8005628:	43160000 	.word	0x43160000
 800562c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8005630:	d96f      	bls.n	8005712 <__ieee754_powf+0x50a>
 8005632:	15db      	asrs	r3, r3, #23
 8005634:	3b7e      	subs	r3, #126	@ 0x7e
 8005636:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800563a:	4118      	asrs	r0, r3
 800563c:	4408      	add	r0, r1
 800563e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005642:	4a4e      	ldr	r2, [pc, #312]	@ (800577c <__ieee754_powf+0x574>)
 8005644:	3b7f      	subs	r3, #127	@ 0x7f
 8005646:	411a      	asrs	r2, r3
 8005648:	4002      	ands	r2, r0
 800564a:	ee07 2a10 	vmov	s14, r2
 800564e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8005652:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8005656:	f1c3 0317 	rsb	r3, r3, #23
 800565a:	4118      	asrs	r0, r3
 800565c:	2900      	cmp	r1, #0
 800565e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005662:	bfb8      	it	lt
 8005664:	4240      	neglt	r0, r0
 8005666:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800566a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8005780 <__ieee754_powf+0x578>
 800566e:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8005784 <__ieee754_powf+0x57c>
 8005672:	ee16 3a90 	vmov	r3, s13
 8005676:	f36f 030b 	bfc	r3, #0, #12
 800567a:	ee06 3a90 	vmov	s13, r3
 800567e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005682:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005686:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800568a:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8005788 <__ieee754_powf+0x580>
 800568e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005692:	eee0 7a87 	vfma.f32	s15, s1, s14
 8005696:	eeb0 7a67 	vmov.f32	s14, s15
 800569a:	eea6 7a86 	vfma.f32	s14, s13, s12
 800569e:	eef0 5a47 	vmov.f32	s11, s14
 80056a2:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80056a6:	ee67 6a07 	vmul.f32	s13, s14, s14
 80056aa:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80056ae:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800578c <__ieee754_powf+0x584>
 80056b2:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8005790 <__ieee754_powf+0x588>
 80056b6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80056ba:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8005794 <__ieee754_powf+0x58c>
 80056be:	eee6 5a26 	vfma.f32	s11, s12, s13
 80056c2:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8005798 <__ieee754_powf+0x590>
 80056c6:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80056ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800579c <__ieee754_powf+0x594>
 80056ce:	eee6 5a26 	vfma.f32	s11, s12, s13
 80056d2:	eeb0 6a47 	vmov.f32	s12, s14
 80056d6:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80056da:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80056de:	ee67 5a06 	vmul.f32	s11, s14, s12
 80056e2:	ee36 6a66 	vsub.f32	s12, s12, s13
 80056e6:	eee7 7a27 	vfma.f32	s15, s14, s15
 80056ea:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80056ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80056f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80056f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80056fa:	ee10 3a10 	vmov	r3, s0
 80056fe:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8005702:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005706:	da06      	bge.n	8005716 <__ieee754_powf+0x50e>
 8005708:	f000 f854 	bl	80057b4 <scalbnf>
 800570c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005710:	e592      	b.n	8005238 <__ieee754_powf+0x30>
 8005712:	2000      	movs	r0, #0
 8005714:	e7a7      	b.n	8005666 <__ieee754_powf+0x45e>
 8005716:	ee00 3a10 	vmov	s0, r3
 800571a:	e7f7      	b.n	800570c <__ieee754_powf+0x504>
 800571c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005720:	e58a      	b.n	8005238 <__ieee754_powf+0x30>
 8005722:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80057a0 <__ieee754_powf+0x598>
 8005726:	e587      	b.n	8005238 <__ieee754_powf+0x30>
 8005728:	eeb0 0a48 	vmov.f32	s0, s16
 800572c:	e584      	b.n	8005238 <__ieee754_powf+0x30>
 800572e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8005732:	f43f adbb 	beq.w	80052ac <__ieee754_powf+0xa4>
 8005736:	2502      	movs	r5, #2
 8005738:	eeb0 0a48 	vmov.f32	s0, s16
 800573c:	f000 f832 	bl	80057a4 <fabsf>
 8005740:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8005744:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8005748:	4647      	mov	r7, r8
 800574a:	d003      	beq.n	8005754 <__ieee754_powf+0x54c>
 800574c:	f1b8 0f00 	cmp.w	r8, #0
 8005750:	f47f addb 	bne.w	800530a <__ieee754_powf+0x102>
 8005754:	2c00      	cmp	r4, #0
 8005756:	bfbc      	itt	lt
 8005758:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800575c:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8005760:	2e00      	cmp	r6, #0
 8005762:	f6bf ad69 	bge.w	8005238 <__ieee754_powf+0x30>
 8005766:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800576a:	ea58 0805 	orrs.w	r8, r8, r5
 800576e:	f47f adc7 	bne.w	8005300 <__ieee754_powf+0xf8>
 8005772:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005776:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800577a:	e55d      	b.n	8005238 <__ieee754_powf+0x30>
 800577c:	ff800000 	.word	0xff800000
 8005780:	3f317218 	.word	0x3f317218
 8005784:	3f317200 	.word	0x3f317200
 8005788:	35bfbe8c 	.word	0x35bfbe8c
 800578c:	b5ddea0e 	.word	0xb5ddea0e
 8005790:	3331bb4c 	.word	0x3331bb4c
 8005794:	388ab355 	.word	0x388ab355
 8005798:	bb360b61 	.word	0xbb360b61
 800579c:	3e2aaaab 	.word	0x3e2aaaab
 80057a0:	00000000 	.word	0x00000000

080057a4 <fabsf>:
 80057a4:	ee10 3a10 	vmov	r3, s0
 80057a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057ac:	ee00 3a10 	vmov	s0, r3
 80057b0:	4770      	bx	lr
	...

080057b4 <scalbnf>:
 80057b4:	ee10 3a10 	vmov	r3, s0
 80057b8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80057bc:	d02b      	beq.n	8005816 <scalbnf+0x62>
 80057be:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80057c2:	d302      	bcc.n	80057ca <scalbnf+0x16>
 80057c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80057c8:	4770      	bx	lr
 80057ca:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80057ce:	d123      	bne.n	8005818 <scalbnf+0x64>
 80057d0:	4b24      	ldr	r3, [pc, #144]	@ (8005864 <scalbnf+0xb0>)
 80057d2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8005868 <scalbnf+0xb4>
 80057d6:	4298      	cmp	r0, r3
 80057d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80057dc:	db17      	blt.n	800580e <scalbnf+0x5a>
 80057de:	ee10 3a10 	vmov	r3, s0
 80057e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80057e6:	3a19      	subs	r2, #25
 80057e8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80057ec:	4288      	cmp	r0, r1
 80057ee:	dd15      	ble.n	800581c <scalbnf+0x68>
 80057f0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800586c <scalbnf+0xb8>
 80057f4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8005870 <scalbnf+0xbc>
 80057f8:	ee10 3a10 	vmov	r3, s0
 80057fc:	eeb0 7a67 	vmov.f32	s14, s15
 8005800:	2b00      	cmp	r3, #0
 8005802:	bfb8      	it	lt
 8005804:	eef0 7a66 	vmovlt.f32	s15, s13
 8005808:	ee27 0a87 	vmul.f32	s0, s15, s14
 800580c:	4770      	bx	lr
 800580e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005874 <scalbnf+0xc0>
 8005812:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005816:	4770      	bx	lr
 8005818:	0dd2      	lsrs	r2, r2, #23
 800581a:	e7e5      	b.n	80057e8 <scalbnf+0x34>
 800581c:	4410      	add	r0, r2
 800581e:	28fe      	cmp	r0, #254	@ 0xfe
 8005820:	dce6      	bgt.n	80057f0 <scalbnf+0x3c>
 8005822:	2800      	cmp	r0, #0
 8005824:	dd06      	ble.n	8005834 <scalbnf+0x80>
 8005826:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800582a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800582e:	ee00 3a10 	vmov	s0, r3
 8005832:	4770      	bx	lr
 8005834:	f110 0f16 	cmn.w	r0, #22
 8005838:	da09      	bge.n	800584e <scalbnf+0x9a>
 800583a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8005874 <scalbnf+0xc0>
 800583e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8005878 <scalbnf+0xc4>
 8005842:	ee10 3a10 	vmov	r3, s0
 8005846:	eeb0 7a67 	vmov.f32	s14, s15
 800584a:	2b00      	cmp	r3, #0
 800584c:	e7d9      	b.n	8005802 <scalbnf+0x4e>
 800584e:	3019      	adds	r0, #25
 8005850:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005854:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005858:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800587c <scalbnf+0xc8>
 800585c:	ee07 3a90 	vmov	s15, r3
 8005860:	e7d7      	b.n	8005812 <scalbnf+0x5e>
 8005862:	bf00      	nop
 8005864:	ffff3cb0 	.word	0xffff3cb0
 8005868:	4c000000 	.word	0x4c000000
 800586c:	7149f2ca 	.word	0x7149f2ca
 8005870:	f149f2ca 	.word	0xf149f2ca
 8005874:	0da24260 	.word	0x0da24260
 8005878:	8da24260 	.word	0x8da24260
 800587c:	33000000 	.word	0x33000000

08005880 <with_errnof>:
 8005880:	b510      	push	{r4, lr}
 8005882:	ed2d 8b02 	vpush	{d8}
 8005886:	eeb0 8a40 	vmov.f32	s16, s0
 800588a:	4604      	mov	r4, r0
 800588c:	f7fe fc04 	bl	8004098 <__errno>
 8005890:	eeb0 0a48 	vmov.f32	s0, s16
 8005894:	ecbd 8b02 	vpop	{d8}
 8005898:	6004      	str	r4, [r0, #0]
 800589a:	bd10      	pop	{r4, pc}

0800589c <xflowf>:
 800589c:	b130      	cbz	r0, 80058ac <xflowf+0x10>
 800589e:	eef1 7a40 	vneg.f32	s15, s0
 80058a2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80058a6:	2022      	movs	r0, #34	@ 0x22
 80058a8:	f7ff bfea 	b.w	8005880 <with_errnof>
 80058ac:	eef0 7a40 	vmov.f32	s15, s0
 80058b0:	e7f7      	b.n	80058a2 <xflowf+0x6>
	...

080058b4 <__math_uflowf>:
 80058b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80058bc <__math_uflowf+0x8>
 80058b8:	f7ff bff0 	b.w	800589c <xflowf>
 80058bc:	10000000 	.word	0x10000000

080058c0 <__math_oflowf>:
 80058c0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80058c8 <__math_oflowf+0x8>
 80058c4:	f7ff bfea 	b.w	800589c <xflowf>
 80058c8:	70000000 	.word	0x70000000

080058cc <__ieee754_sqrtf>:
 80058cc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80058d0:	4770      	bx	lr
 80058d2:	0000      	movs	r0, r0
 80058d4:	0000      	movs	r0, r0
	...

080058d8 <__kernel_rem_pio2>:
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	ed2d 8b02 	vpush	{d8}
 80058e0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80058e4:	f112 0f14 	cmn.w	r2, #20
 80058e8:	9306      	str	r3, [sp, #24]
 80058ea:	9104      	str	r1, [sp, #16]
 80058ec:	4bc2      	ldr	r3, [pc, #776]	@ (8005bf8 <__kernel_rem_pio2+0x320>)
 80058ee:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80058f0:	9008      	str	r0, [sp, #32]
 80058f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	9b06      	ldr	r3, [sp, #24]
 80058fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80058fe:	bfa8      	it	ge
 8005900:	1ed4      	subge	r4, r2, #3
 8005902:	9305      	str	r3, [sp, #20]
 8005904:	bfb2      	itee	lt
 8005906:	2400      	movlt	r4, #0
 8005908:	2318      	movge	r3, #24
 800590a:	fb94 f4f3 	sdivge	r4, r4, r3
 800590e:	f06f 0317 	mvn.w	r3, #23
 8005912:	fb04 3303 	mla	r3, r4, r3, r3
 8005916:	eb03 0b02 	add.w	fp, r3, r2
 800591a:	9b00      	ldr	r3, [sp, #0]
 800591c:	9a05      	ldr	r2, [sp, #20]
 800591e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8005be8 <__kernel_rem_pio2+0x310>
 8005922:	eb03 0802 	add.w	r8, r3, r2
 8005926:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005928:	1aa7      	subs	r7, r4, r2
 800592a:	ae20      	add	r6, sp, #128	@ 0x80
 800592c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005930:	2500      	movs	r5, #0
 8005932:	4545      	cmp	r5, r8
 8005934:	dd12      	ble.n	800595c <__kernel_rem_pio2+0x84>
 8005936:	9b06      	ldr	r3, [sp, #24]
 8005938:	aa20      	add	r2, sp, #128	@ 0x80
 800593a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800593e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8005942:	2700      	movs	r7, #0
 8005944:	9b00      	ldr	r3, [sp, #0]
 8005946:	429f      	cmp	r7, r3
 8005948:	dc2e      	bgt.n	80059a8 <__kernel_rem_pio2+0xd0>
 800594a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8005be8 <__kernel_rem_pio2+0x310>
 800594e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005952:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005956:	46a8      	mov	r8, r5
 8005958:	2600      	movs	r6, #0
 800595a:	e01b      	b.n	8005994 <__kernel_rem_pio2+0xbc>
 800595c:	42ef      	cmn	r7, r5
 800595e:	d407      	bmi.n	8005970 <__kernel_rem_pio2+0x98>
 8005960:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005964:	f7fa fdd6 	bl	8000514 <__aeabi_i2d>
 8005968:	e8e6 0102 	strd	r0, r1, [r6], #8
 800596c:	3501      	adds	r5, #1
 800596e:	e7e0      	b.n	8005932 <__kernel_rem_pio2+0x5a>
 8005970:	ec51 0b18 	vmov	r0, r1, d8
 8005974:	e7f8      	b.n	8005968 <__kernel_rem_pio2+0x90>
 8005976:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800597a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800597e:	f7fa fe33 	bl	80005e8 <__aeabi_dmul>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800598a:	f7fa fc77 	bl	800027c <__adddf3>
 800598e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005992:	3601      	adds	r6, #1
 8005994:	9b05      	ldr	r3, [sp, #20]
 8005996:	429e      	cmp	r6, r3
 8005998:	dded      	ble.n	8005976 <__kernel_rem_pio2+0x9e>
 800599a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800599e:	3701      	adds	r7, #1
 80059a0:	ecaa 7b02 	vstmia	sl!, {d7}
 80059a4:	3508      	adds	r5, #8
 80059a6:	e7cd      	b.n	8005944 <__kernel_rem_pio2+0x6c>
 80059a8:	9b00      	ldr	r3, [sp, #0]
 80059aa:	f8dd 8000 	ldr.w	r8, [sp]
 80059ae:	aa0c      	add	r2, sp, #48	@ 0x30
 80059b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80059b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80059b6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80059b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80059bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80059be:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80059c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059c4:	ab98      	add	r3, sp, #608	@ 0x260
 80059c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80059ca:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80059ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80059d2:	ac0c      	add	r4, sp, #48	@ 0x30
 80059d4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80059d6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80059da:	46a1      	mov	r9, r4
 80059dc:	46c2      	mov	sl, r8
 80059de:	f1ba 0f00 	cmp.w	sl, #0
 80059e2:	dc77      	bgt.n	8005ad4 <__kernel_rem_pio2+0x1fc>
 80059e4:	4658      	mov	r0, fp
 80059e6:	ed9d 0b02 	vldr	d0, [sp, #8]
 80059ea:	f000 fac5 	bl	8005f78 <scalbn>
 80059ee:	ec57 6b10 	vmov	r6, r7, d0
 80059f2:	2200      	movs	r2, #0
 80059f4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80059f8:	4630      	mov	r0, r6
 80059fa:	4639      	mov	r1, r7
 80059fc:	f7fa fdf4 	bl	80005e8 <__aeabi_dmul>
 8005a00:	ec41 0b10 	vmov	d0, r0, r1
 8005a04:	f000 fb34 	bl	8006070 <floor>
 8005a08:	4b7c      	ldr	r3, [pc, #496]	@ (8005bfc <__kernel_rem_pio2+0x324>)
 8005a0a:	ec51 0b10 	vmov	r0, r1, d0
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f7fa fdea 	bl	80005e8 <__aeabi_dmul>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4630      	mov	r0, r6
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	f7fa fc2c 	bl	8000278 <__aeabi_dsub>
 8005a20:	460f      	mov	r7, r1
 8005a22:	4606      	mov	r6, r0
 8005a24:	f7fb f87a 	bl	8000b1c <__aeabi_d2iz>
 8005a28:	9002      	str	r0, [sp, #8]
 8005a2a:	f7fa fd73 	bl	8000514 <__aeabi_i2d>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4630      	mov	r0, r6
 8005a34:	4639      	mov	r1, r7
 8005a36:	f7fa fc1f 	bl	8000278 <__aeabi_dsub>
 8005a3a:	f1bb 0f00 	cmp.w	fp, #0
 8005a3e:	4606      	mov	r6, r0
 8005a40:	460f      	mov	r7, r1
 8005a42:	dd6c      	ble.n	8005b1e <__kernel_rem_pio2+0x246>
 8005a44:	f108 31ff 	add.w	r1, r8, #4294967295
 8005a48:	ab0c      	add	r3, sp, #48	@ 0x30
 8005a4a:	9d02      	ldr	r5, [sp, #8]
 8005a4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005a50:	f1cb 0018 	rsb	r0, fp, #24
 8005a54:	fa43 f200 	asr.w	r2, r3, r0
 8005a58:	4415      	add	r5, r2
 8005a5a:	4082      	lsls	r2, r0
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	aa0c      	add	r2, sp, #48	@ 0x30
 8005a60:	9502      	str	r5, [sp, #8]
 8005a62:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005a66:	f1cb 0217 	rsb	r2, fp, #23
 8005a6a:	fa43 f902 	asr.w	r9, r3, r2
 8005a6e:	f1b9 0f00 	cmp.w	r9, #0
 8005a72:	dd64      	ble.n	8005b3e <__kernel_rem_pio2+0x266>
 8005a74:	9b02      	ldr	r3, [sp, #8]
 8005a76:	2200      	movs	r2, #0
 8005a78:	3301      	adds	r3, #1
 8005a7a:	9302      	str	r3, [sp, #8]
 8005a7c:	4615      	mov	r5, r2
 8005a7e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8005a82:	4590      	cmp	r8, r2
 8005a84:	f300 80a1 	bgt.w	8005bca <__kernel_rem_pio2+0x2f2>
 8005a88:	f1bb 0f00 	cmp.w	fp, #0
 8005a8c:	dd07      	ble.n	8005a9e <__kernel_rem_pio2+0x1c6>
 8005a8e:	f1bb 0f01 	cmp.w	fp, #1
 8005a92:	f000 80c1 	beq.w	8005c18 <__kernel_rem_pio2+0x340>
 8005a96:	f1bb 0f02 	cmp.w	fp, #2
 8005a9a:	f000 80c8 	beq.w	8005c2e <__kernel_rem_pio2+0x356>
 8005a9e:	f1b9 0f02 	cmp.w	r9, #2
 8005aa2:	d14c      	bne.n	8005b3e <__kernel_rem_pio2+0x266>
 8005aa4:	4632      	mov	r2, r6
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	4955      	ldr	r1, [pc, #340]	@ (8005c00 <__kernel_rem_pio2+0x328>)
 8005aaa:	2000      	movs	r0, #0
 8005aac:	f7fa fbe4 	bl	8000278 <__aeabi_dsub>
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	460f      	mov	r7, r1
 8005ab4:	2d00      	cmp	r5, #0
 8005ab6:	d042      	beq.n	8005b3e <__kernel_rem_pio2+0x266>
 8005ab8:	4658      	mov	r0, fp
 8005aba:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8005bf0 <__kernel_rem_pio2+0x318>
 8005abe:	f000 fa5b 	bl	8005f78 <scalbn>
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	4639      	mov	r1, r7
 8005ac6:	ec53 2b10 	vmov	r2, r3, d0
 8005aca:	f7fa fbd5 	bl	8000278 <__aeabi_dsub>
 8005ace:	4606      	mov	r6, r0
 8005ad0:	460f      	mov	r7, r1
 8005ad2:	e034      	b.n	8005b3e <__kernel_rem_pio2+0x266>
 8005ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8005c04 <__kernel_rem_pio2+0x32c>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005adc:	f7fa fd84 	bl	80005e8 <__aeabi_dmul>
 8005ae0:	f7fb f81c 	bl	8000b1c <__aeabi_d2iz>
 8005ae4:	f7fa fd16 	bl	8000514 <__aeabi_i2d>
 8005ae8:	4b47      	ldr	r3, [pc, #284]	@ (8005c08 <__kernel_rem_pio2+0x330>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	4606      	mov	r6, r0
 8005aee:	460f      	mov	r7, r1
 8005af0:	f7fa fd7a 	bl	80005e8 <__aeabi_dmul>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005afc:	f7fa fbbc 	bl	8000278 <__aeabi_dsub>
 8005b00:	f7fb f80c 	bl	8000b1c <__aeabi_d2iz>
 8005b04:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005b08:	f849 0b04 	str.w	r0, [r9], #4
 8005b0c:	4639      	mov	r1, r7
 8005b0e:	4630      	mov	r0, r6
 8005b10:	f7fa fbb4 	bl	800027c <__adddf3>
 8005b14:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b1c:	e75f      	b.n	80059de <__kernel_rem_pio2+0x106>
 8005b1e:	d107      	bne.n	8005b30 <__kernel_rem_pio2+0x258>
 8005b20:	f108 33ff 	add.w	r3, r8, #4294967295
 8005b24:	aa0c      	add	r2, sp, #48	@ 0x30
 8005b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b2a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005b2e:	e79e      	b.n	8005a6e <__kernel_rem_pio2+0x196>
 8005b30:	4b36      	ldr	r3, [pc, #216]	@ (8005c0c <__kernel_rem_pio2+0x334>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	f7fa ffde 	bl	8000af4 <__aeabi_dcmpge>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	d143      	bne.n	8005bc4 <__kernel_rem_pio2+0x2ec>
 8005b3c:	4681      	mov	r9, r0
 8005b3e:	2200      	movs	r2, #0
 8005b40:	2300      	movs	r3, #0
 8005b42:	4630      	mov	r0, r6
 8005b44:	4639      	mov	r1, r7
 8005b46:	f7fa ffb7 	bl	8000ab8 <__aeabi_dcmpeq>
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	f000 80c1 	beq.w	8005cd2 <__kernel_rem_pio2+0x3fa>
 8005b50:	f108 33ff 	add.w	r3, r8, #4294967295
 8005b54:	2200      	movs	r2, #0
 8005b56:	9900      	ldr	r1, [sp, #0]
 8005b58:	428b      	cmp	r3, r1
 8005b5a:	da70      	bge.n	8005c3e <__kernel_rem_pio2+0x366>
 8005b5c:	2a00      	cmp	r2, #0
 8005b5e:	f000 808b 	beq.w	8005c78 <__kernel_rem_pio2+0x3a0>
 8005b62:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b66:	ab0c      	add	r3, sp, #48	@ 0x30
 8005b68:	f1ab 0b18 	sub.w	fp, fp, #24
 8005b6c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f6      	beq.n	8005b62 <__kernel_rem_pio2+0x28a>
 8005b74:	4658      	mov	r0, fp
 8005b76:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8005bf0 <__kernel_rem_pio2+0x318>
 8005b7a:	f000 f9fd 	bl	8005f78 <scalbn>
 8005b7e:	f108 0301 	add.w	r3, r8, #1
 8005b82:	00da      	lsls	r2, r3, #3
 8005b84:	9205      	str	r2, [sp, #20]
 8005b86:	ec55 4b10 	vmov	r4, r5, d0
 8005b8a:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005b8c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8005c04 <__kernel_rem_pio2+0x32c>
 8005b90:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005b94:	4646      	mov	r6, r8
 8005b96:	f04f 0a00 	mov.w	sl, #0
 8005b9a:	2e00      	cmp	r6, #0
 8005b9c:	f280 80d1 	bge.w	8005d42 <__kernel_rem_pio2+0x46a>
 8005ba0:	4644      	mov	r4, r8
 8005ba2:	2c00      	cmp	r4, #0
 8005ba4:	f2c0 80ff 	blt.w	8005da6 <__kernel_rem_pio2+0x4ce>
 8005ba8:	4b19      	ldr	r3, [pc, #100]	@ (8005c10 <__kernel_rem_pio2+0x338>)
 8005baa:	461f      	mov	r7, r3
 8005bac:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005bae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bb2:	9306      	str	r3, [sp, #24]
 8005bb4:	f04f 0a00 	mov.w	sl, #0
 8005bb8:	f04f 0b00 	mov.w	fp, #0
 8005bbc:	2600      	movs	r6, #0
 8005bbe:	eba8 0504 	sub.w	r5, r8, r4
 8005bc2:	e0e4      	b.n	8005d8e <__kernel_rem_pio2+0x4b6>
 8005bc4:	f04f 0902 	mov.w	r9, #2
 8005bc8:	e754      	b.n	8005a74 <__kernel_rem_pio2+0x19c>
 8005bca:	f854 3b04 	ldr.w	r3, [r4], #4
 8005bce:	bb0d      	cbnz	r5, 8005c14 <__kernel_rem_pio2+0x33c>
 8005bd0:	b123      	cbz	r3, 8005bdc <__kernel_rem_pio2+0x304>
 8005bd2:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005bd6:	f844 3c04 	str.w	r3, [r4, #-4]
 8005bda:	2301      	movs	r3, #1
 8005bdc:	3201      	adds	r2, #1
 8005bde:	461d      	mov	r5, r3
 8005be0:	e74f      	b.n	8005a82 <__kernel_rem_pio2+0x1aa>
 8005be2:	bf00      	nop
 8005be4:	f3af 8000 	nop.w
	...
 8005bf4:	3ff00000 	.word	0x3ff00000
 8005bf8:	080063c8 	.word	0x080063c8
 8005bfc:	40200000 	.word	0x40200000
 8005c00:	3ff00000 	.word	0x3ff00000
 8005c04:	3e700000 	.word	0x3e700000
 8005c08:	41700000 	.word	0x41700000
 8005c0c:	3fe00000 	.word	0x3fe00000
 8005c10:	08006388 	.word	0x08006388
 8005c14:	1acb      	subs	r3, r1, r3
 8005c16:	e7de      	b.n	8005bd6 <__kernel_rem_pio2+0x2fe>
 8005c18:	f108 32ff 	add.w	r2, r8, #4294967295
 8005c1c:	ab0c      	add	r3, sp, #48	@ 0x30
 8005c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c22:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005c26:	a90c      	add	r1, sp, #48	@ 0x30
 8005c28:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005c2c:	e737      	b.n	8005a9e <__kernel_rem_pio2+0x1c6>
 8005c2e:	f108 32ff 	add.w	r2, r8, #4294967295
 8005c32:	ab0c      	add	r3, sp, #48	@ 0x30
 8005c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c38:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005c3c:	e7f3      	b.n	8005c26 <__kernel_rem_pio2+0x34e>
 8005c3e:	a90c      	add	r1, sp, #48	@ 0x30
 8005c40:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005c44:	3b01      	subs	r3, #1
 8005c46:	430a      	orrs	r2, r1
 8005c48:	e785      	b.n	8005b56 <__kernel_rem_pio2+0x27e>
 8005c4a:	3401      	adds	r4, #1
 8005c4c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005c50:	2a00      	cmp	r2, #0
 8005c52:	d0fa      	beq.n	8005c4a <__kernel_rem_pio2+0x372>
 8005c54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c56:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005c5a:	eb0d 0503 	add.w	r5, sp, r3
 8005c5e:	9b06      	ldr	r3, [sp, #24]
 8005c60:	aa20      	add	r2, sp, #128	@ 0x80
 8005c62:	4443      	add	r3, r8
 8005c64:	f108 0701 	add.w	r7, r8, #1
 8005c68:	3d98      	subs	r5, #152	@ 0x98
 8005c6a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8005c6e:	4444      	add	r4, r8
 8005c70:	42bc      	cmp	r4, r7
 8005c72:	da04      	bge.n	8005c7e <__kernel_rem_pio2+0x3a6>
 8005c74:	46a0      	mov	r8, r4
 8005c76:	e6a2      	b.n	80059be <__kernel_rem_pio2+0xe6>
 8005c78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c7a:	2401      	movs	r4, #1
 8005c7c:	e7e6      	b.n	8005c4c <__kernel_rem_pio2+0x374>
 8005c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c80:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005c84:	f7fa fc46 	bl	8000514 <__aeabi_i2d>
 8005c88:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8005f48 <__kernel_rem_pio2+0x670>
 8005c8c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005c90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c98:	46b2      	mov	sl, r6
 8005c9a:	f04f 0800 	mov.w	r8, #0
 8005c9e:	9b05      	ldr	r3, [sp, #20]
 8005ca0:	4598      	cmp	r8, r3
 8005ca2:	dd05      	ble.n	8005cb0 <__kernel_rem_pio2+0x3d8>
 8005ca4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ca8:	3701      	adds	r7, #1
 8005caa:	eca5 7b02 	vstmia	r5!, {d7}
 8005cae:	e7df      	b.n	8005c70 <__kernel_rem_pio2+0x398>
 8005cb0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8005cb4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005cb8:	f7fa fc96 	bl	80005e8 <__aeabi_dmul>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cc4:	f7fa fada 	bl	800027c <__adddf3>
 8005cc8:	f108 0801 	add.w	r8, r8, #1
 8005ccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cd0:	e7e5      	b.n	8005c9e <__kernel_rem_pio2+0x3c6>
 8005cd2:	f1cb 0000 	rsb	r0, fp, #0
 8005cd6:	ec47 6b10 	vmov	d0, r6, r7
 8005cda:	f000 f94d 	bl	8005f78 <scalbn>
 8005cde:	ec55 4b10 	vmov	r4, r5, d0
 8005ce2:	4b9b      	ldr	r3, [pc, #620]	@ (8005f50 <__kernel_rem_pio2+0x678>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	4629      	mov	r1, r5
 8005cea:	f7fa ff03 	bl	8000af4 <__aeabi_dcmpge>
 8005cee:	b300      	cbz	r0, 8005d32 <__kernel_rem_pio2+0x45a>
 8005cf0:	4b98      	ldr	r3, [pc, #608]	@ (8005f54 <__kernel_rem_pio2+0x67c>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	f7fa fc76 	bl	80005e8 <__aeabi_dmul>
 8005cfc:	f7fa ff0e 	bl	8000b1c <__aeabi_d2iz>
 8005d00:	4606      	mov	r6, r0
 8005d02:	f7fa fc07 	bl	8000514 <__aeabi_i2d>
 8005d06:	4b92      	ldr	r3, [pc, #584]	@ (8005f50 <__kernel_rem_pio2+0x678>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f7fa fc6d 	bl	80005e8 <__aeabi_dmul>
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4602      	mov	r2, r0
 8005d12:	4629      	mov	r1, r5
 8005d14:	4620      	mov	r0, r4
 8005d16:	f7fa faaf 	bl	8000278 <__aeabi_dsub>
 8005d1a:	f7fa feff 	bl	8000b1c <__aeabi_d2iz>
 8005d1e:	ab0c      	add	r3, sp, #48	@ 0x30
 8005d20:	f10b 0b18 	add.w	fp, fp, #24
 8005d24:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005d28:	f108 0801 	add.w	r8, r8, #1
 8005d2c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005d30:	e720      	b.n	8005b74 <__kernel_rem_pio2+0x29c>
 8005d32:	4620      	mov	r0, r4
 8005d34:	4629      	mov	r1, r5
 8005d36:	f7fa fef1 	bl	8000b1c <__aeabi_d2iz>
 8005d3a:	ab0c      	add	r3, sp, #48	@ 0x30
 8005d3c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005d40:	e718      	b.n	8005b74 <__kernel_rem_pio2+0x29c>
 8005d42:	ab0c      	add	r3, sp, #48	@ 0x30
 8005d44:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005d48:	f7fa fbe4 	bl	8000514 <__aeabi_i2d>
 8005d4c:	4622      	mov	r2, r4
 8005d4e:	462b      	mov	r3, r5
 8005d50:	f7fa fc4a 	bl	80005e8 <__aeabi_dmul>
 8005d54:	4652      	mov	r2, sl
 8005d56:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8005d5a:	465b      	mov	r3, fp
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	4629      	mov	r1, r5
 8005d60:	f7fa fc42 	bl	80005e8 <__aeabi_dmul>
 8005d64:	3e01      	subs	r6, #1
 8005d66:	4604      	mov	r4, r0
 8005d68:	460d      	mov	r5, r1
 8005d6a:	e716      	b.n	8005b9a <__kernel_rem_pio2+0x2c2>
 8005d6c:	9906      	ldr	r1, [sp, #24]
 8005d6e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8005d72:	9106      	str	r1, [sp, #24]
 8005d74:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8005d78:	f7fa fc36 	bl	80005e8 <__aeabi_dmul>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4650      	mov	r0, sl
 8005d82:	4659      	mov	r1, fp
 8005d84:	f7fa fa7a 	bl	800027c <__adddf3>
 8005d88:	3601      	adds	r6, #1
 8005d8a:	4682      	mov	sl, r0
 8005d8c:	468b      	mov	fp, r1
 8005d8e:	9b00      	ldr	r3, [sp, #0]
 8005d90:	429e      	cmp	r6, r3
 8005d92:	dc01      	bgt.n	8005d98 <__kernel_rem_pio2+0x4c0>
 8005d94:	42ae      	cmp	r6, r5
 8005d96:	dde9      	ble.n	8005d6c <__kernel_rem_pio2+0x494>
 8005d98:	ab48      	add	r3, sp, #288	@ 0x120
 8005d9a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005d9e:	e9c5 ab00 	strd	sl, fp, [r5]
 8005da2:	3c01      	subs	r4, #1
 8005da4:	e6fd      	b.n	8005ba2 <__kernel_rem_pio2+0x2ca>
 8005da6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	dc0b      	bgt.n	8005dc4 <__kernel_rem_pio2+0x4ec>
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	dc35      	bgt.n	8005e1c <__kernel_rem_pio2+0x544>
 8005db0:	d059      	beq.n	8005e66 <__kernel_rem_pio2+0x58e>
 8005db2:	9b02      	ldr	r3, [sp, #8]
 8005db4:	f003 0007 	and.w	r0, r3, #7
 8005db8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005dbc:	ecbd 8b02 	vpop	{d8}
 8005dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	d1f3      	bne.n	8005db2 <__kernel_rem_pio2+0x4da>
 8005dca:	9b05      	ldr	r3, [sp, #20]
 8005dcc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005dd0:	eb0d 0403 	add.w	r4, sp, r3
 8005dd4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005dd8:	4625      	mov	r5, r4
 8005dda:	46c2      	mov	sl, r8
 8005ddc:	f1ba 0f00 	cmp.w	sl, #0
 8005de0:	dc69      	bgt.n	8005eb6 <__kernel_rem_pio2+0x5de>
 8005de2:	4645      	mov	r5, r8
 8005de4:	2d01      	cmp	r5, #1
 8005de6:	f300 8087 	bgt.w	8005ef8 <__kernel_rem_pio2+0x620>
 8005dea:	9c05      	ldr	r4, [sp, #20]
 8005dec:	ab48      	add	r3, sp, #288	@ 0x120
 8005dee:	441c      	add	r4, r3
 8005df0:	2000      	movs	r0, #0
 8005df2:	2100      	movs	r1, #0
 8005df4:	f1b8 0f01 	cmp.w	r8, #1
 8005df8:	f300 809c 	bgt.w	8005f34 <__kernel_rem_pio2+0x65c>
 8005dfc:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8005e00:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8005e04:	f1b9 0f00 	cmp.w	r9, #0
 8005e08:	f040 80a6 	bne.w	8005f58 <__kernel_rem_pio2+0x680>
 8005e0c:	9b04      	ldr	r3, [sp, #16]
 8005e0e:	e9c3 5600 	strd	r5, r6, [r3]
 8005e12:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005e16:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005e1a:	e7ca      	b.n	8005db2 <__kernel_rem_pio2+0x4da>
 8005e1c:	9d05      	ldr	r5, [sp, #20]
 8005e1e:	ab48      	add	r3, sp, #288	@ 0x120
 8005e20:	441d      	add	r5, r3
 8005e22:	4644      	mov	r4, r8
 8005e24:	2000      	movs	r0, #0
 8005e26:	2100      	movs	r1, #0
 8005e28:	2c00      	cmp	r4, #0
 8005e2a:	da35      	bge.n	8005e98 <__kernel_rem_pio2+0x5c0>
 8005e2c:	f1b9 0f00 	cmp.w	r9, #0
 8005e30:	d038      	beq.n	8005ea4 <__kernel_rem_pio2+0x5cc>
 8005e32:	4602      	mov	r2, r0
 8005e34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e38:	9c04      	ldr	r4, [sp, #16]
 8005e3a:	e9c4 2300 	strd	r2, r3, [r4]
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005e46:	f7fa fa17 	bl	8000278 <__aeabi_dsub>
 8005e4a:	ad4a      	add	r5, sp, #296	@ 0x128
 8005e4c:	2401      	movs	r4, #1
 8005e4e:	45a0      	cmp	r8, r4
 8005e50:	da2b      	bge.n	8005eaa <__kernel_rem_pio2+0x5d2>
 8005e52:	f1b9 0f00 	cmp.w	r9, #0
 8005e56:	d002      	beq.n	8005e5e <__kernel_rem_pio2+0x586>
 8005e58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	9b04      	ldr	r3, [sp, #16]
 8005e60:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005e64:	e7a5      	b.n	8005db2 <__kernel_rem_pio2+0x4da>
 8005e66:	9c05      	ldr	r4, [sp, #20]
 8005e68:	ab48      	add	r3, sp, #288	@ 0x120
 8005e6a:	441c      	add	r4, r3
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	2100      	movs	r1, #0
 8005e70:	f1b8 0f00 	cmp.w	r8, #0
 8005e74:	da09      	bge.n	8005e8a <__kernel_rem_pio2+0x5b2>
 8005e76:	f1b9 0f00 	cmp.w	r9, #0
 8005e7a:	d002      	beq.n	8005e82 <__kernel_rem_pio2+0x5aa>
 8005e7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e80:	4619      	mov	r1, r3
 8005e82:	9b04      	ldr	r3, [sp, #16]
 8005e84:	e9c3 0100 	strd	r0, r1, [r3]
 8005e88:	e793      	b.n	8005db2 <__kernel_rem_pio2+0x4da>
 8005e8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005e8e:	f7fa f9f5 	bl	800027c <__adddf3>
 8005e92:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e96:	e7eb      	b.n	8005e70 <__kernel_rem_pio2+0x598>
 8005e98:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005e9c:	f7fa f9ee 	bl	800027c <__adddf3>
 8005ea0:	3c01      	subs	r4, #1
 8005ea2:	e7c1      	b.n	8005e28 <__kernel_rem_pio2+0x550>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	e7c6      	b.n	8005e38 <__kernel_rem_pio2+0x560>
 8005eaa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005eae:	f7fa f9e5 	bl	800027c <__adddf3>
 8005eb2:	3401      	adds	r4, #1
 8005eb4:	e7cb      	b.n	8005e4e <__kernel_rem_pio2+0x576>
 8005eb6:	ed35 7b02 	vldmdb	r5!, {d7}
 8005eba:	ed8d 7b00 	vstr	d7, [sp]
 8005ebe:	ed95 7b02 	vldr	d7, [r5, #8]
 8005ec2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ec6:	ec53 2b17 	vmov	r2, r3, d7
 8005eca:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005ece:	f7fa f9d5 	bl	800027c <__adddf3>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4606      	mov	r6, r0
 8005ed8:	460f      	mov	r7, r1
 8005eda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ede:	f7fa f9cb 	bl	8000278 <__aeabi_dsub>
 8005ee2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ee6:	f7fa f9c9 	bl	800027c <__adddf3>
 8005eea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005eee:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005ef2:	e9c5 6700 	strd	r6, r7, [r5]
 8005ef6:	e771      	b.n	8005ddc <__kernel_rem_pio2+0x504>
 8005ef8:	ed34 7b02 	vldmdb	r4!, {d7}
 8005efc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005f00:	ec51 0b17 	vmov	r0, r1, d7
 8005f04:	4652      	mov	r2, sl
 8005f06:	465b      	mov	r3, fp
 8005f08:	ed8d 7b00 	vstr	d7, [sp]
 8005f0c:	f7fa f9b6 	bl	800027c <__adddf3>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4606      	mov	r6, r0
 8005f16:	460f      	mov	r7, r1
 8005f18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f1c:	f7fa f9ac 	bl	8000278 <__aeabi_dsub>
 8005f20:	4652      	mov	r2, sl
 8005f22:	465b      	mov	r3, fp
 8005f24:	f7fa f9aa 	bl	800027c <__adddf3>
 8005f28:	3d01      	subs	r5, #1
 8005f2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f2e:	e9c4 6700 	strd	r6, r7, [r4]
 8005f32:	e757      	b.n	8005de4 <__kernel_rem_pio2+0x50c>
 8005f34:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005f38:	f7fa f9a0 	bl	800027c <__adddf3>
 8005f3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f40:	e758      	b.n	8005df4 <__kernel_rem_pio2+0x51c>
 8005f42:	bf00      	nop
 8005f44:	f3af 8000 	nop.w
	...
 8005f50:	41700000 	.word	0x41700000
 8005f54:	3e700000 	.word	0x3e700000
 8005f58:	9b04      	ldr	r3, [sp, #16]
 8005f5a:	9a04      	ldr	r2, [sp, #16]
 8005f5c:	601d      	str	r5, [r3, #0]
 8005f5e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8005f62:	605c      	str	r4, [r3, #4]
 8005f64:	609f      	str	r7, [r3, #8]
 8005f66:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8005f6a:	60d3      	str	r3, [r2, #12]
 8005f6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005f70:	6110      	str	r0, [r2, #16]
 8005f72:	6153      	str	r3, [r2, #20]
 8005f74:	e71d      	b.n	8005db2 <__kernel_rem_pio2+0x4da>
 8005f76:	bf00      	nop

08005f78 <scalbn>:
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	ec55 4b10 	vmov	r4, r5, d0
 8005f7e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005f82:	4606      	mov	r6, r0
 8005f84:	462b      	mov	r3, r5
 8005f86:	b991      	cbnz	r1, 8005fae <scalbn+0x36>
 8005f88:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005f8c:	4323      	orrs	r3, r4
 8005f8e:	d03b      	beq.n	8006008 <scalbn+0x90>
 8005f90:	4b33      	ldr	r3, [pc, #204]	@ (8006060 <scalbn+0xe8>)
 8005f92:	4620      	mov	r0, r4
 8005f94:	4629      	mov	r1, r5
 8005f96:	2200      	movs	r2, #0
 8005f98:	f7fa fb26 	bl	80005e8 <__aeabi_dmul>
 8005f9c:	4b31      	ldr	r3, [pc, #196]	@ (8006064 <scalbn+0xec>)
 8005f9e:	429e      	cmp	r6, r3
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	460d      	mov	r5, r1
 8005fa4:	da0f      	bge.n	8005fc6 <scalbn+0x4e>
 8005fa6:	a326      	add	r3, pc, #152	@ (adr r3, 8006040 <scalbn+0xc8>)
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	e01e      	b.n	8005fec <scalbn+0x74>
 8005fae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005fb2:	4291      	cmp	r1, r2
 8005fb4:	d10b      	bne.n	8005fce <scalbn+0x56>
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	4620      	mov	r0, r4
 8005fba:	4629      	mov	r1, r5
 8005fbc:	f7fa f95e 	bl	800027c <__adddf3>
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	460d      	mov	r5, r1
 8005fc4:	e020      	b.n	8006008 <scalbn+0x90>
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005fcc:	3936      	subs	r1, #54	@ 0x36
 8005fce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005fd2:	4296      	cmp	r6, r2
 8005fd4:	dd0d      	ble.n	8005ff2 <scalbn+0x7a>
 8005fd6:	2d00      	cmp	r5, #0
 8005fd8:	a11b      	add	r1, pc, #108	@ (adr r1, 8006048 <scalbn+0xd0>)
 8005fda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fde:	da02      	bge.n	8005fe6 <scalbn+0x6e>
 8005fe0:	a11b      	add	r1, pc, #108	@ (adr r1, 8006050 <scalbn+0xd8>)
 8005fe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fe6:	a318      	add	r3, pc, #96	@ (adr r3, 8006048 <scalbn+0xd0>)
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	f7fa fafc 	bl	80005e8 <__aeabi_dmul>
 8005ff0:	e7e6      	b.n	8005fc0 <scalbn+0x48>
 8005ff2:	1872      	adds	r2, r6, r1
 8005ff4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005ff8:	428a      	cmp	r2, r1
 8005ffa:	dcec      	bgt.n	8005fd6 <scalbn+0x5e>
 8005ffc:	2a00      	cmp	r2, #0
 8005ffe:	dd06      	ble.n	800600e <scalbn+0x96>
 8006000:	f36f 531e 	bfc	r3, #20, #11
 8006004:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006008:	ec45 4b10 	vmov	d0, r4, r5
 800600c:	bd70      	pop	{r4, r5, r6, pc}
 800600e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006012:	da08      	bge.n	8006026 <scalbn+0xae>
 8006014:	2d00      	cmp	r5, #0
 8006016:	a10a      	add	r1, pc, #40	@ (adr r1, 8006040 <scalbn+0xc8>)
 8006018:	e9d1 0100 	ldrd	r0, r1, [r1]
 800601c:	dac3      	bge.n	8005fa6 <scalbn+0x2e>
 800601e:	a10e      	add	r1, pc, #56	@ (adr r1, 8006058 <scalbn+0xe0>)
 8006020:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006024:	e7bf      	b.n	8005fa6 <scalbn+0x2e>
 8006026:	3236      	adds	r2, #54	@ 0x36
 8006028:	f36f 531e 	bfc	r3, #20, #11
 800602c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006030:	4620      	mov	r0, r4
 8006032:	4b0d      	ldr	r3, [pc, #52]	@ (8006068 <scalbn+0xf0>)
 8006034:	4629      	mov	r1, r5
 8006036:	2200      	movs	r2, #0
 8006038:	e7d8      	b.n	8005fec <scalbn+0x74>
 800603a:	bf00      	nop
 800603c:	f3af 8000 	nop.w
 8006040:	c2f8f359 	.word	0xc2f8f359
 8006044:	01a56e1f 	.word	0x01a56e1f
 8006048:	8800759c 	.word	0x8800759c
 800604c:	7e37e43c 	.word	0x7e37e43c
 8006050:	8800759c 	.word	0x8800759c
 8006054:	fe37e43c 	.word	0xfe37e43c
 8006058:	c2f8f359 	.word	0xc2f8f359
 800605c:	81a56e1f 	.word	0x81a56e1f
 8006060:	43500000 	.word	0x43500000
 8006064:	ffff3cb0 	.word	0xffff3cb0
 8006068:	3c900000 	.word	0x3c900000
 800606c:	00000000 	.word	0x00000000

08006070 <floor>:
 8006070:	ec51 0b10 	vmov	r0, r1, d0
 8006074:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800607c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006080:	2e13      	cmp	r6, #19
 8006082:	460c      	mov	r4, r1
 8006084:	4605      	mov	r5, r0
 8006086:	4680      	mov	r8, r0
 8006088:	dc34      	bgt.n	80060f4 <floor+0x84>
 800608a:	2e00      	cmp	r6, #0
 800608c:	da17      	bge.n	80060be <floor+0x4e>
 800608e:	a332      	add	r3, pc, #200	@ (adr r3, 8006158 <floor+0xe8>)
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	f7fa f8f2 	bl	800027c <__adddf3>
 8006098:	2200      	movs	r2, #0
 800609a:	2300      	movs	r3, #0
 800609c:	f7fa fd34 	bl	8000b08 <__aeabi_dcmpgt>
 80060a0:	b150      	cbz	r0, 80060b8 <floor+0x48>
 80060a2:	2c00      	cmp	r4, #0
 80060a4:	da55      	bge.n	8006152 <floor+0xe2>
 80060a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80060aa:	432c      	orrs	r4, r5
 80060ac:	2500      	movs	r5, #0
 80060ae:	42ac      	cmp	r4, r5
 80060b0:	4c2b      	ldr	r4, [pc, #172]	@ (8006160 <floor+0xf0>)
 80060b2:	bf08      	it	eq
 80060b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80060b8:	4621      	mov	r1, r4
 80060ba:	4628      	mov	r0, r5
 80060bc:	e023      	b.n	8006106 <floor+0x96>
 80060be:	4f29      	ldr	r7, [pc, #164]	@ (8006164 <floor+0xf4>)
 80060c0:	4137      	asrs	r7, r6
 80060c2:	ea01 0307 	and.w	r3, r1, r7
 80060c6:	4303      	orrs	r3, r0
 80060c8:	d01d      	beq.n	8006106 <floor+0x96>
 80060ca:	a323      	add	r3, pc, #140	@ (adr r3, 8006158 <floor+0xe8>)
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	f7fa f8d4 	bl	800027c <__adddf3>
 80060d4:	2200      	movs	r2, #0
 80060d6:	2300      	movs	r3, #0
 80060d8:	f7fa fd16 	bl	8000b08 <__aeabi_dcmpgt>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d0eb      	beq.n	80060b8 <floor+0x48>
 80060e0:	2c00      	cmp	r4, #0
 80060e2:	bfbe      	ittt	lt
 80060e4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80060e8:	4133      	asrlt	r3, r6
 80060ea:	18e4      	addlt	r4, r4, r3
 80060ec:	ea24 0407 	bic.w	r4, r4, r7
 80060f0:	2500      	movs	r5, #0
 80060f2:	e7e1      	b.n	80060b8 <floor+0x48>
 80060f4:	2e33      	cmp	r6, #51	@ 0x33
 80060f6:	dd0a      	ble.n	800610e <floor+0x9e>
 80060f8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80060fc:	d103      	bne.n	8006106 <floor+0x96>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	f7fa f8bb 	bl	800027c <__adddf3>
 8006106:	ec41 0b10 	vmov	d0, r0, r1
 800610a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800610e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006112:	f04f 37ff 	mov.w	r7, #4294967295
 8006116:	40df      	lsrs	r7, r3
 8006118:	4207      	tst	r7, r0
 800611a:	d0f4      	beq.n	8006106 <floor+0x96>
 800611c:	a30e      	add	r3, pc, #56	@ (adr r3, 8006158 <floor+0xe8>)
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	f7fa f8ab 	bl	800027c <__adddf3>
 8006126:	2200      	movs	r2, #0
 8006128:	2300      	movs	r3, #0
 800612a:	f7fa fced 	bl	8000b08 <__aeabi_dcmpgt>
 800612e:	2800      	cmp	r0, #0
 8006130:	d0c2      	beq.n	80060b8 <floor+0x48>
 8006132:	2c00      	cmp	r4, #0
 8006134:	da0a      	bge.n	800614c <floor+0xdc>
 8006136:	2e14      	cmp	r6, #20
 8006138:	d101      	bne.n	800613e <floor+0xce>
 800613a:	3401      	adds	r4, #1
 800613c:	e006      	b.n	800614c <floor+0xdc>
 800613e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006142:	2301      	movs	r3, #1
 8006144:	40b3      	lsls	r3, r6
 8006146:	441d      	add	r5, r3
 8006148:	4545      	cmp	r5, r8
 800614a:	d3f6      	bcc.n	800613a <floor+0xca>
 800614c:	ea25 0507 	bic.w	r5, r5, r7
 8006150:	e7b2      	b.n	80060b8 <floor+0x48>
 8006152:	2500      	movs	r5, #0
 8006154:	462c      	mov	r4, r5
 8006156:	e7af      	b.n	80060b8 <floor+0x48>
 8006158:	8800759c 	.word	0x8800759c
 800615c:	7e37e43c 	.word	0x7e37e43c
 8006160:	bff00000 	.word	0xbff00000
 8006164:	000fffff 	.word	0x000fffff

08006168 <_init>:
 8006168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616a:	bf00      	nop
 800616c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616e:	bc08      	pop	{r3}
 8006170:	469e      	mov	lr, r3
 8006172:	4770      	bx	lr

08006174 <_fini>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	bf00      	nop
 8006178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617a:	bc08      	pop	{r3}
 800617c:	469e      	mov	lr, r3
 800617e:	4770      	bx	lr
